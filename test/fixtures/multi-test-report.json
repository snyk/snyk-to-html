[
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:56Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[`commons-collections:commons-collections`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-collections%22)\nApache commons-collections library permitted code execution when deserializing objects involving a specially constructed chain of classes. A remote attacker could use this flaw to execute arbitrary code with the permissions of the application using the commons-collections library.\n\n# Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution. \n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n \nThe vulnerability, also know as _Mad Gadget_ \n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google \n\n\n## References\n- [breenmachine Blog](http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/)\n",
        "disclosureTime": "2015-11-06T16:51:56Z",
        "id": "SNYK-JAVA-COMMONSCOLLECTIONS-30078",
        "identifiers": {
          "CVE": [
            "CVE-2015-7501"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-collections",
          "groupId": "commons-collections"
        },
        "modificationTime": "2018-09-03T13:22:51.636347Z",
        "moduleName": "commons-collections:commons-collections",
        "packageManager": "maven",
        "packageName": "commons-collections:commons-collections",
        "patches": [],
        "publicationTime": "2015-11-06T16:51:56Z",
        "references": [
          {
            "title": "breenmachine Blog",
            "url": "http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3,3.2.2)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-core@1.0-SNAPSHOT",
          "commons-collections:commons-collections@3.2.1"
        ],
        "upgradePath": [
          false,
          false,
          "commons-collections:commons-collections@3.2.2"
        ],
        "version": "3.2.1",
        "name": "commons-collections:commons-collections",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:56Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[`commons-collections:commons-collections`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-collections%22)\nApache commons-collections library permitted code execution when deserializing objects involving a specially constructed chain of classes. A remote attacker could use this flaw to execute arbitrary code with the permissions of the application using the commons-collections library.\n\n# Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution. \n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n \nThe vulnerability, also know as _Mad Gadget_ \n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google \n\n\n## References\n- [breenmachine Blog](http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/)\n",
        "disclosureTime": "2015-11-06T16:51:56Z",
        "id": "SNYK-JAVA-COMMONSCOLLECTIONS-30078",
        "identifiers": {
          "CVE": [
            "CVE-2015-7501"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-collections",
          "groupId": "commons-collections"
        },
        "modificationTime": "2018-09-03T13:22:51.636347Z",
        "moduleName": "commons-collections:commons-collections",
        "packageManager": "maven",
        "packageName": "commons-collections:commons-collections",
        "patches": [],
        "publicationTime": "2015-11-06T16:51:56Z",
        "references": [
          {
            "title": "breenmachine Blog",
            "url": "http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3,3.2.2)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
          "io.github.snyk:todolist-core@1.0-SNAPSHOT",
          "commons-collections:commons-collections@3.2.1"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "commons-collections:commons-collections@3.2.2"
        ],
        "version": "3.2.1",
        "name": "commons-collections:commons-collections",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:56Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[`commons-collections:commons-collections`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-collections%22)\nApache commons-collections library permitted code execution when deserializing objects involving a specially constructed chain of classes. A remote attacker could use this flaw to execute arbitrary code with the permissions of the application using the commons-collections library.\n\n# Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution. \n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n \nThe vulnerability, also know as _Mad Gadget_ \n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google \n\n\n## References\n- [breenmachine Blog](http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/)\n",
        "disclosureTime": "2015-11-06T16:51:56Z",
        "id": "SNYK-JAVA-COMMONSCOLLECTIONS-30078",
        "identifiers": {
          "CVE": [
            "CVE-2015-7501"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-collections",
          "groupId": "commons-collections"
        },
        "modificationTime": "2018-09-03T13:22:51.636347Z",
        "moduleName": "commons-collections:commons-collections",
        "packageManager": "maven",
        "packageName": "commons-collections:commons-collections",
        "patches": [],
        "publicationTime": "2015-11-06T16:51:56Z",
        "references": [
          {
            "title": "breenmachine Blog",
            "url": "http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3,3.2.2)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
          "io.github.snyk:todolist-core@1.0-SNAPSHOT",
          "commons-collections:commons-collections@3.2.1"
        ],
        "upgradePath": [
          false,
          false,
          false,
          false,
          "commons-collections:commons-collections@3.2.2"
        ],
        "version": "3.2.1",
        "name": "commons-collections:commons-collections",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:56Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`commons-fileupload:commons-fileupload`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-fileupload%22) provides a simple yet flexible means of adding support for multipart file upload functionality to servlets and web applications.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) attacks. An attacker can upload a file with a long boundry string in the HTTP header, causing high CPU consumption. The `MultipartStream` class contains a flaw that allows remote attackers to cause a Denial of service (CPU consumption) attacks. This happens by setting the length of the multipart boundary to be just below the size of the buffer (4096 bytes) used to read the uploaded file. Typically, the boundary is tens of bytes long, which caused this case to take much longer than usual.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nUpgrade `commons-fileupload:commons-fileupload` to version 1.3.2 or higher.\n\n## References\n- [Github ChangeLog](https://github.com/apache/commons-fileupload/blob/b1498c9877d751f8bc4635a6f252ebdfcba28518/src/changes/changes.xml#L84)\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1349475)\n- [Apache Mailing Archives](http://mail-archives.us.apache.org/mod_mbox/www-announce/201606.mbox/%3C6223ece6-2b41-ef4f-22f9-d3481e492832@apache.org%3E)\n- [Apache-SVN](http://svn.apache.org/viewvc/commons/proper/fileupload/trunk/RELEASE-NOTES.txt?r1=1745717&r2=1749637&diff_format=h)\n- [CVE](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3092)\n",
        "disclosureTime": "2016-06-22T16:51:56Z",
        "id": "SNYK-JAVA-COMMONSFILEUPLOAD-30082",
        "identifiers": {
          "CVE": [
            "CVE-2016-3092"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-fileupload",
          "groupId": "commons-fileupload"
        },
        "modificationTime": "2018-09-03T13:22:51.653432Z",
        "moduleName": "commons-fileupload:commons-fileupload",
        "packageManager": "maven",
        "packageName": "commons-fileupload:commons-fileupload",
        "patches": [],
        "publicationTime": "2016-06-22T16:51:56Z",
        "references": [
          {
            "title": "CVE",
            "url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3092"
          },
          {
            "title": "Apache-SVN",
            "url": "http://svn.apache.org/viewvc/commons/proper/fileupload/trunk/RELEASE-NOTES.txt?r1=1745717&r2=1749637&diff_format=h"
          },
          {
            "title": "Apache Mailing Archives",
            "url": "http://mail-archives.us.apache.org/mod_mbox/www-announce/201606.mbox/%3C6223ece6-2b41-ef4f-22f9-d3481e492832@apache.org%3E"
          },
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1349475"
          },
          {
            "title": "Github ChangeLog",
            "url": "https://github.com/apache/commons-fileupload/blob/b1498c9877d751f8bc4635a6f252ebdfcba28518/src/changes/changes.xml#L84"
          }
        ],
        "semver": {
          "vulnerable": [
            "[1.3,1.3.2)"
          ]
        },
        "severity": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20",
          "commons-fileupload:commons-fileupload@1.3.1"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.30",
          "commons-fileupload:commons-fileupload@1.3.2"
        ],
        "version": "1.3.1",
        "name": "commons-fileupload:commons-fileupload",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:18.753000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`commons-fileupload:commons-fileupload`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-fileupload%22)\nThe Apache Commons FileUpload library contains a Java Object that, upon deserialization, can be manipulated to write or copy files in arbitrary locations. If integrated with [`ysoserial`](https://github.com/frohoff/ysoserial), it is possible to upload and execute binaries in a single deserialization call.\n\n# Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\n## Remediation\nUpgrade `commons-fileupload` to version 1.3.3 or higher.\n\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-1000031)\n- [Tenable Security](http://www.tenable.com/security/research/tra-2016-12)\n- [Github ChangeLog](https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml#L65)\n- [Github Commit](https://github.com/apache/commons-fileupload/commit/388e824518697c2c8f9f83fd964621d9c2f8fc4c)\n",
        "disclosureTime": "2016-10-26T03:04:11.895000Z",
        "id": "SNYK-JAVA-COMMONSFILEUPLOAD-30401",
        "identifiers": {
          "CVE": [
            "CVE-2016-1000031"
          ],
          "CWE": [
            "CWE-284"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-fileupload",
          "groupId": "commons-fileupload"
        },
        "modificationTime": "2018-09-03T13:22:52.255248Z",
        "moduleName": "commons-fileupload:commons-fileupload",
        "packageManager": "maven",
        "packageName": "commons-fileupload:commons-fileupload",
        "patches": [],
        "publicationTime": "2016-10-26T03:04:11.895000Z",
        "references": [
          {
            "title": "Github Commit",
            "url": "https://github.com/apache/commons-fileupload/commit/388e824518697c2c8f9f83fd964621d9c2f8fc4c"
          },
          {
            "title": "Github ChangeLog",
            "url": "https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml#L65"
          },
          {
            "title": "Tenable Security",
            "url": "http://www.tenable.com/security/research/tra-2016-12"
          },
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-1000031"
          }
        ],
        "semver": {
          "vulnerable": [
            "[1.1,1.3.3)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20",
          "commons-fileupload:commons-fileupload@1.3.1"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.5.12",
          "commons-fileupload:commons-fileupload@1.3.3"
        ],
        "version": "1.3.1",
        "name": "commons-fileupload:commons-fileupload",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-10-01T08:05:48.497000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[`commons-fileupload:commons-fileupload`](https://commons.apache.org/proper/commons-fileupload/) provides a simple yet flexible means of adding support for multipart file upload functionality to servlets and web applications.\n\nAffected versions of the package are vulnerable to Information Disclosure because the `InputStream` is not closed on exception.\n\n## Remediation\nUpgrade `commons-fileupload` to version 1.3.2 or higher.\n\n## References\n- [Github ChangeLog](https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml#L56)\n- [Github Commit](https://github.com/apache/commons-fileupload/commit/5b4881d7f75f439326f54fa554a9ca7de6d60814)\n",
        "disclosureTime": "2014-02-17T22:00:00Z",
        "id": "SNYK-JAVA-COMMONSFILEUPLOAD-31540",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-200"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-fileupload",
          "groupId": "commons-fileupload"
        },
        "modificationTime": "2018-09-03T13:22:55.796435Z",
        "moduleName": "commons-fileupload:commons-fileupload",
        "packageManager": "maven",
        "packageName": "commons-fileupload:commons-fileupload",
        "patches": [],
        "publicationTime": "2017-02-17T08:05:48.497000Z",
        "references": [
          {
            "title": "Github Commit",
            "url": "https://github.com/apache/commons-fileupload/commit/5b4881d7f75f439326f54fa554a9ca7de6d60814"
          },
          {
            "title": "Github ChangeLog",
            "url": "https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml#L56"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.3.2)"
          ]
        },
        "severity": "medium",
        "title": "Information Disclosure",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20",
          "commons-fileupload:commons-fileupload@1.3.1"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.30",
          "commons-fileupload:commons-fileupload@1.3.2"
        ],
        "version": "1.3.1",
        "name": "commons-fileupload:commons-fileupload",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:19.341000Z",
        "credit": [
          "David Jorm"
        ],
        "cvssScore": 7.6,
        "description": "## Overview\nAffected versions of [`javax.servlet:jstl`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jstl%22) are vulnerable to XML External Entity (XXE) Injection. It allowed the processing of untrusted XML documents to utilize external entity references, which could access resources on the host system and, potentially, allowing arbitrary code execution.\n\n## Details\n\nXXE Injection is a type of attack against an application that parses XML input.\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\n\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\n\nFor example, below is a sample XML document, containing an XML element- username.\n\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n   <username>John</username>\n</xml>\n```\n\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\n\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE foo [\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n   <username>&xxe;</username>\n</xml>\n```\n\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n\n## Remediation\nUpgrade to a version `1.3` or above. \n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0254)\n- [Redhat Security](https://access.redhat.com/security/cve/CVE-2015-0254)\n",
        "disclosureTime": "2015-02-27T16:13:27Z",
        "id": "SNYK-JAVA-JAVAXSERVLET-30449",
        "identifiers": {
          "CVE": [
            "CVE-2015-0254"
          ],
          "CWE": [
            "CWE-611"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jstl",
          "groupId": "javax.servlet"
        },
        "modificationTime": "2018-09-03T13:22:52.309150Z",
        "moduleName": "javax.servlet:jstl",
        "packageManager": "maven",
        "packageName": "javax.servlet:jstl",
        "patches": [],
        "publicationTime": "2015-02-27T16:13:27Z",
        "references": [
          {
            "title": "Redhat Security",
            "url": "https://access.redhat.com/security/cve/CVE-2015-0254"
          },
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0254"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.2]"
          ]
        },
        "severity": "high",
        "title": "XML External Entity (XXE) Injection",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
          "javax.servlet:jstl@1.2"
        ],
        "upgradePath": [],
        "version": "1.2",
        "name": "javax.servlet:jstl",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:19.341000Z",
        "credit": [
          "David Jorm"
        ],
        "cvssScore": 7.6,
        "description": "## Overview\nAffected versions of [`javax.servlet:jstl`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jstl%22) are vulnerable to XML External Entity (XXE) Injection. It allowed the processing of untrusted XML documents to utilize external entity references, which could access resources on the host system and, potentially, allowing arbitrary code execution.\n\n## Details\n\nXXE Injection is a type of attack against an application that parses XML input.\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\n\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\n\nFor example, below is a sample XML document, containing an XML element- username.\n\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n   <username>John</username>\n</xml>\n```\n\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\n\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE foo [\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n   <username>&xxe;</username>\n</xml>\n```\n\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n\n## Remediation\nUpgrade to a version `1.3` or above. \n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0254)\n- [Redhat Security](https://access.redhat.com/security/cve/CVE-2015-0254)\n",
        "disclosureTime": "2015-02-27T16:13:27Z",
        "id": "SNYK-JAVA-JAVAXSERVLET-30449",
        "identifiers": {
          "CVE": [
            "CVE-2015-0254"
          ],
          "CWE": [
            "CWE-611"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jstl",
          "groupId": "javax.servlet"
        },
        "modificationTime": "2018-09-03T13:22:52.309150Z",
        "moduleName": "javax.servlet:jstl",
        "packageManager": "maven",
        "packageName": "javax.servlet:jstl",
        "patches": [],
        "publicationTime": "2015-02-27T16:13:27Z",
        "references": [
          {
            "title": "Redhat Security",
            "url": "https://access.redhat.com/security/cve/CVE-2015-0254"
          },
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0254"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.2]"
          ]
        },
        "severity": "high",
        "title": "XML External Entity (XXE) Injection",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
          "javax.servlet:jstl@1.2"
        ],
        "upgradePath": [],
        "version": "1.2",
        "name": "javax.servlet:jstl",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:19.659000Z",
        "credit": [
          "Tao Wang"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`ognl:ognl`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22ognl%22) is a simple Expression Language (EL) for Java.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) attacks.\nApache Struts 2.0.0 through 2.3.24.1 does not properly cache method references when used with OGNL before 3.0.12, which allows remote attackers to cause a denial of service (block access to a web site) via unspecified vectors.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nUpgrade `ognl:ognl` to version 3.0.12 or higher.\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3093)\n- [GitHub Commit](https://github.com/jkuhnert/ognl/commit/ae43073fbf38db8371ff4f8bf2a966ee3b5f7e92)\n",
        "disclosureTime": "2016-06-02T02:16:48.918000Z",
        "id": "SNYK-JAVA-OGNL-30474",
        "identifiers": {
          "CVE": [
            "CVE-2016-3093"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "ognl",
          "groupId": "ognl"
        },
        "modificationTime": "2018-09-03T13:22:52.370748Z",
        "moduleName": "ognl:ognl",
        "packageManager": "maven",
        "packageName": "ognl:ognl",
        "patches": [],
        "publicationTime": "2016-06-02T02:16:48.918000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jkuhnert/ognl/commit/ae43073fbf38db8371ff4f8bf2a966ee3b5f7e92"
          },
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3093"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,3.0.12)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20",
          "ognl:ognl@3.0.6"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.28",
          "ognl:ognl@3.0.13"
        ],
        "version": "3.0.6",
        "name": "ognl:ognl",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:55Z",
        "credit": [
          "Jasper Rosenberg"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[`org.apache.struts:struts2-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22struts2-core%22)\nThe default exclude patterns (excludeParams) in Apache Struts 2.3.20 allow remote attackers to \"compromise internal state of an application\" via unspecified vectors.\n\n## References\n\n- [Vulnerability Summary](http://struts.apache.org/docs/s2-024.html)\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-1831)\n",
        "disclosureTime": "2015-05-11T16:51:55Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-30058",
        "identifiers": {
          "CVE": [
            "CVE-2015-1831"
          ],
          "CWE": [
            "CWE-453"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:51.547133Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2015-05-11T16:51:55Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-1831"
          },
          {
            "title": "Vulnerability Summary",
            "url": "http://struts.apache.org/docs/s2-024.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.3.20]"
          ]
        },
        "severity": "high",
        "title": "Insecure Defaults",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.20.1"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:56Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.1,
        "description": "## Overview\n[`org.apache.struts:struts2-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22struts2-core%22)\nValueStack defines special top object which represents root of execution context. It can be used to manipulate Struts' internals or can be used to affect container's settings.\n\n## References\n\n- [Vulnerability Summary](http://struts.apache.org/docs/s2-026.html)\n",
        "disclosureTime": "2015-07-01T16:51:56Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-30060",
        "identifiers": {
          "CVE": [
            "CVE-2015-5209"
          ],
          "CWE": [
            "CWE-284"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:51.555483Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2015-07-01T16:51:56Z",
        "references": [
          {
            "title": "Vulnerability Summary",
            "url": "http://struts.apache.org/docs/s2-026.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "(,2.3.24]"
          ]
        },
        "severity": "low",
        "title": "Manipulation of Struts' internals",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.24.1"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:H",
        "alternativeIds": [],
        "creationTime": "2017-03-19T10:28:21.873000Z",
        "credit": [
          "Nike Zheng"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`org.apache.struts:struts2-core`](https://cwiki.apache.org/confluence/display/WW/Home) is an elegant, extensible framework for building enterprise-ready Java web applications.\n\nAffected versions of the package are vulnerable to Arbitrary Command Execution while uploading files with the Jakarta Multipart parser. This particular vulnerability can be exploited by an attacker by sending a crafted request to upload a file to the vulnerable server that uses a Jakarta-based plugin to process the upload request.\n\nThe attacker can then send malicious code in the `Content-Type`, `Content-Disposition` or `Content-Length` HTTP headers, which will then be executed by the vulnerable server. [A proof of concept](https://github.com/tengzhangchao/Struts2_045-Poc) that demonstrates the attack scenario is publicly available and the vulnerability is being [actively exploited in the wild](https://www.theregister.co.uk/2017/03/09/apache_under_attack_patch_for_zero_day_available/).\n\nAlthough maintainers of the open source project immediately patched the vulnerability, Struts servers that have yet to install the update remain under attack by hackers who exploit it to inject commands of their choice.\n\nThis attack can be achieved without authentication. To make matters worse, web applications don't necessarily need to successfully upload a malicious file to exploit this vulnerability, as just the presence of the vulnerable Struts library within an application is enough to exploit the vulnerability.\n\n## Remediation\nUpgrade `org.apache.struts:struts2-core` to version 2.3.32, 2.5.10.1 or higher.\n\n## References\n- [Metasploit GitHub PR](https://github.com/rapid7/metasploit-framework/pull/8072)\n- [Metasploit GitHub Issue](https://github.com/rapid7/metasploit-framework/issues/8064)\n- [Metasploit GitHub Commit](https://github.com/rapid7/metasploit-framework/pull/8072/commits/fc0f63e77471baa40057effaaa8be0f205adc6b7)\n- [PoC](https://github.com/tengzhangchao/Struts2_045-Poc)\n- [CVE](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5638)\n- [Exploit DB](https://www.exploit-db.com/exploits/41570/)\n- [Struts Wiki](https://cwiki.apache.org/confluence/display/WW/S2-045)\n- [Talos Intelligence Blog](http://blog.talosintelligence.com/2017/03/apache-0-day-exploited.html)\n",
        "disclosureTime": "2017-03-05T22:00:00Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-30207",
        "identifiers": {
          "CVE": [
            "CVE-2017-5638"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "method": {
          "org/apache/struts2/dispatcher/multipart/JakartaMultiPartRequest": [
            {
              "name": [
                "buildErrorMessage"
              ],
              "semver": [
                "[2.3.5,2.3.32)"
              ]
            }
          ],
          "org/apache/struts2/interceptor/FileUploadInterceptor": [
            {
              "name": [
                "intercept"
              ],
              "semver": [
                "[2.5,2.5.10.1)"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:52.111222Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2017-03-21T15:30:44.863000Z",
        "references": [
          {
            "title": "Talos Intelligence Blog",
            "url": "http://blog.talosintelligence.com/2017/03/apache-0-day-exploited.html"
          },
          {
            "title": "Struts Wiki",
            "url": "https://cwiki.apache.org/confluence/display/WW/S2-045"
          },
          {
            "title": "Exploit DB",
            "url": "https://www.exploit-db.com/exploits/41570/"
          },
          {
            "title": "CVE",
            "url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5638"
          },
          {
            "title": "PoC",
            "url": "https://github.com/tengzhangchao/Struts2_045-Poc"
          },
          {
            "title": "Metasploit GitHub Commit",
            "url": "https://github.com/rapid7/metasploit-framework/pull/8072/commits/fc0f63e77471baa40057effaaa8be0f205adc6b7"
          },
          {
            "title": "Metasploit GitHub Issue",
            "url": "https://github.com/rapid7/metasploit-framework/issues/8064"
          },
          {
            "title": "Metasploit GitHub PR",
            "url": "https://github.com/rapid7/metasploit-framework/pull/8072"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.3.5,2.3.32), [2.5,2.5.10.1)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.32"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H/E:H/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.315000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.8,
        "description": "## Overview\n[`org.apache.struts:struts2-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22struts2-core%22)\nApache Struts 2.x before 2.3.20.2, 2.3.24.x before 2.3.24.2, and 2.3.28.x before 2.3.28.1, when Dynamic Method Invocation is enabled, allow remote attackers to execute arbitrary code via method: prefix, related to chained expressions.\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3081)",
        "disclosureTime": "2016-04-22T04:32:51.243000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-30770",
        "identifiers": {
          "CVE": [
            "CVE-2016-3081"
          ],
          "CWE": [
            "CWE-77"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:53.288096Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2016-04-22T04:32:51.243000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3081"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2,2.3.20.2), [2.3.24,2.3.24.2), [2.3.28,2.3.28.1)"
          ]
        },
        "severity": "high",
        "title": "Command Injection",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.20.3"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.327000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`org.apache.struts:struts2-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22struts2-core%22) is a free open-source solution for creating Java web applications.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. It allows remote attackers to execute arbitrary code via the stylesheet location parameter.\n\n## Remediation\nUpgrade `org.apache.struts:struts2-core` to version 2.3.20.2, 2.3.24.2, 2.3.28.1 or higher.\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3082)",
        "disclosureTime": "2016-04-22T02:36:52.273000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-30771",
        "identifiers": {
          "CVE": [
            "CVE-2016-3082"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:53.292118Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2016-04-22T02:36:52.273000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3082"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2,2.3.20.2), [2.3.24,2.3.24.2), [2.3.28,2.3.28.1)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.20.3"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:H/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.339000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[`org.apache.struts:struts2-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22struts2-core%22)\nApache Struts 2.3.20.x before 2.3.20.3, 2.3.24.x before 2.3.24.3, and 2.3.28.x before 2.3.28.1, when Dynamic Method Invocation is enabled, allow remote attackers to execute arbitrary code via vectors related to an ! (exclamation mark) operator to the REST Plugin.\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3087)",
        "disclosureTime": "2016-06-02T00:40:36.101000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-30772",
        "identifiers": {
          "CVE": [
            "CVE-2016-3087"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:53.296368Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2016-06-02T00:40:36.101000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3087"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2,2.3.20.2), [2.3.24,2.3.24.3), [2.3.28,2.3.28.1)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Command Execution",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.20.3"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.353000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n[`org.apache.struts:struts2-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22struts2-core%22)\nCross-site Scripting (XSS) vulnerability in the URLDecoder function in JRE before 1.8, as used in Apache Struts 2.x before 2.3.28, when using a single byte page encoding, allows remote attackers to inject arbitrary web script or HTML via multi-byte characters in a url-encoded parameter.\n\n## Details\nCross-Site Scripting (XSS) attacks occur when an attacker tricks a user’s browser to execute malicious JavaScript code in the context of a victim’s domain. Such scripts can steal the user’s session cookies for the domain, scrape or modify its content, and perform or modify actions on the user’s behalf, actions typically blocked by the browser’s Same Origin Policy.\n\nThese attacks are possible by escaping the context of the web application and injecting malicious scripts in an otherwise trusted website. These scripts can introduce additional attributes (say, a \"new\" option in a dropdown list or a new link to a malicious site) and can potentially execute code on the clients side, unbeknown to the victim. This occurs when characters like `<` `>` `\"` `'` are not escaped properly.\n\nThere are a few types of XSS:\n- **Persistent XSS** is an attack in which the malicious code persists into the web app’s database.\n- **Reflected XSS** is an which the website echoes back a portion of the request. The attacker needs to trick the user into clicking a malicious link (for instance through a phishing email or malicious JS on another page), which triggers the XSS attack.\n- **DOM-based XSS** is an that occurs purely in the browser when client-side JavaScript echoes back a portion of the URL onto the page. DOM-Based XSS is notoriously hard to detect, as the server never gets a chance to see the attack taking place.\n\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-4003)",
        "disclosureTime": "2016-03-16T06:52:13.014000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-30773",
        "identifiers": {
          "CVE": [
            "CVE-2016-4003"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:53.300334Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2016-03-16T06:52:13.014000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-4003"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.3.28)"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.28"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.364000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[`org.apache.struts:struts2-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22struts2-core%22)\nApache Struts 2 2.3.20 through 2.3.28.1 mishandles token validation, which allows remote attackers to conduct cross-site request forgery (CSRF) attacks via unspecified vectors.\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-4430)",
        "disclosureTime": "2016-06-20T07:00:37.929000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-30774",
        "identifiers": {
          "CVE": [
            "CVE-2016-4430"
          ],
          "CWE": [
            "CWE-352"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:53.304460Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2016-06-20T07:00:37.929000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-4430"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.3.20,2.3.28.1]"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Request Forgery (CSRF)",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.29"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.377000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`org.apache.struts:struts2-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22struts2-core%22)\nApache Struts 2 2.3.20 through 2.3.28.1 allows remote attackers to bypass intended access restrictions and conduct redirection attacks by leveraging a default method.\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-4431)",
        "disclosureTime": "2016-06-21T04:49:27.674000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-30775",
        "identifiers": {
          "CVE": [
            "CVE-2016-4431"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:53.308589Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2016-06-21T04:49:27.674000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-4431"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.3.20,2.3.28.1]"
          ]
        },
        "severity": "medium",
        "title": "Access Restriction Bypass",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.29"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.390000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`org.apache.struts:struts2-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22struts2-core%22)\nApache Struts 2 2.3.20 through 2.3.28.1 allows remote attackers to bypass intended access restrictions and conduct redirection attacks via a crafted request.\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-4433)",
        "disclosureTime": "2016-06-21T01:33:07.474000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-30776",
        "identifiers": {
          "CVE": [
            "CVE-2016-4433"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:53.313147Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2016-06-21T01:33:07.474000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-4433"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.3.20,2.3.28.1]"
          ]
        },
        "severity": "medium",
        "title": "Access Restriction Bypass",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.29"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.404000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`org.apache.struts:struts2-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22struts2-core%22)\nThe URLValidator class in Apache Struts 2 2.3.20 through 2.3.28.1 and 2.5.x before 2.5.1 allows remote attackers to cause a denial of service via a null value for a URL field.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-4465)",
        "disclosureTime": "2016-06-20T07:45:43.528000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-30777",
        "identifiers": {
          "CVE": [
            "CVE-2016-4465"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:53.317183Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2016-06-20T07:45:43.528000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-4465"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.5,2.5.1), [2.3.20, 2.3.28.1]"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.29"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.415000Z",
        "credit": [
          "Takeshi Terada"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[`org.apache.struts:struts2-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22struts2-core%22)\nAffected versions of the package are vulnerable to Directory Traversal.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n\n## References\n- [Apache Security Advisory](http://struts.apache.org/docs/s2-042.html)\n",
        "disclosureTime": "2016-10-19T01:09:09.263000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-30778",
        "identifiers": {
          "CVE": [
            "CVE-2016-6795"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:53.321240Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2016-10-19T01:09:09.263000Z",
        "references": [
          {
            "title": "Apache Security Advisory",
            "url": "http://struts.apache.org/docs/s2-042.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.3.20,2.3.31)"
          ]
        },
        "severity": "high",
        "title": "Directory Traversal",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.31"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-09-06T17:28:23.339000Z",
        "credit": [
          "LGTM Security Team"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[Apache Struts2](http://struts.apache.org/) is a popular open-source framework for developing web applications in the Java programming language.\n\nThe REST Plugin in affected versions use a `XStreamHandler` with an instance of XStream for deserialization without any type filtering. By design, there are few limits to the type of objects XStream can handle. This flexibility comes at a price. The XML generated or consumed by XStream includes all information required to build Java objects of almost any type. The provided XML data is used by XStream to unmarshal Java objects. An attacker could use this flaw to execute arbitrary code or conduct further attacks.\n\n[A working exploit](https://github.com/rapid7/metasploit-framework/commit/5ea83fee5ee8c23ad95608b7e2022db5b48340ef) is publicly available and [is actively](https://www.imperva.com/blog/2017/09/cve-2017-9805-analysis-of-apache-struts-rce-vulnerability-in-rest-plugin/) exploited in the wild.\n\nYou can read more about this vulnerability [on our blog](https://snyk.io/blog/equifax-breach-vulnerable-open-source-libraries/).\n\n# Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker control the state or the flow of the execution. \n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\n\n## Remediation\nDevelopers are strongly advised to upgrade their _Apache Struts_ components to version `2.3.34`, `2.5.13` or higher.\n\nIt is possible that some REST actions stop working because of applied default restrictions on available classes. In this case please investigate the new interfaces that were introduced to allow class restrictions per action, those interfaces are:\n* org.apache.struts2.rest.handler.AllowedClasses\n* org.apache.struts2.rest.handler.AllowedClassNames\n* org.apache.struts2.rest.handler.XStreamPermissionProvider\n\nIf for some reason upgrading is not an option, consider the following workarounds:\n1. Disable handling XML pages and requests to such pages\n```xml\n<constant name=\"struts.action.extension\" value=\"xhtml,,json\" />\n```\n\n2. Override getContentType in XStreamHandler\n```java\n public class MyXStreamHandler extends XStreamHandler { \n   public String getContentType() {\n     return \"not-existing-content-type-@;/&%$#@\";\n   }\n }\n```\n\n3. Register the handler by overriding the one provided by the framework in your struts.xml\n```xml\n<bean type=\"org.apache.struts2.rest.handler.ContentTypeHandler\" name=\"myXStreamHandmer\" class=\"com.company.MyXStreamHandler\"/>\n<constant name=\"struts.rest.handlerOverride.xml\" value=\"myXStreamHandler\"/>\n```\n\n## References\n- [LGTM Advisory](https://lgtm.com/blog/apache_struts_CVE-2017-9805_announcement)\n- [LGTM Vulnerability Details](https://lgtm.com/blog/apache_struts_CVE-2017-9805)\n- [Apache Struts Statement on Equifax Security Breach](https://blogs.apache.org/foundation/entry/apache-struts-statement-on-equifax)\n- [Apache Security Bulletin](https://cwiki.apache.org/confluence/display/WW/S2-052)\n",
        "disclosureTime": "2017-09-05T17:28:23.339000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-31495",
        "identifiers": {
          "CVE": [
            "CVE-2017-9805"
          ],
          "CWE": [
            "CWE-502",
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:55.653329Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2017-09-06T17:28:23.339000Z",
        "references": [
          {
            "title": "Apache Security Bulletin",
            "url": "https://cwiki.apache.org/confluence/display/WW/S2-052"
          },
          {
            "title": "Apache Struts Statement on Equifax Security Breach",
            "url": "https://blogs.apache.org/foundation/entry/apache-struts-statement-on-equifax"
          },
          {
            "title": "LGTM Vulnerability Details",
            "url": "https://lgtm.com/blog/apache_struts_CVE-2017-9805"
          },
          {
            "title": "LGTM Advisory",
            "url": "https://lgtm.com/blog/apache_struts_CVE-2017-9805_announcement"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.3.34), [2.4,2.5.13)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Command Execution",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.34"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2017-09-12T12:47:32.905000Z",
        "credit": [
          "Yasser Zamani"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[Apache Struts2](http://struts.apache.org/) is a popular open-source framework for developing web applications in the Java programming language.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) attacks.\nWhen using a Spring AOP functionality to secure Struts actions it is possible to perform a DoS attack.\n\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nUpgrade `org.apache.struts:struts2-core` to version 2.3.33, 2.5.12 or higher.\n\n## References\n- [Struts Security Bulletin](http://struts.apache.org/docs/s2-049.html)\n- [Struts Announcements Mailing List](https://lists.apache.org/thread.html/3795c4dd46d9ec75f4a6eb9eca11c11edd3e796c6c1fd7b17b5dc50d@%3Cannouncements.struts.apache.org%3E)\n",
        "disclosureTime": "2017-08-23T21:00:00Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-31500",
        "identifiers": {
          "CVE": [
            "CVE-2017-9787"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:55.665476Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2017-09-12T12:47:32.905000Z",
        "references": [
          {
            "title": "Struts Announcements Mailing List",
            "url": "https://lists.apache.org/thread.html/3795c4dd46d9ec75f4a6eb9eca11c11edd3e796c6c1fd7b17b5dc50d@%3Cannouncements.struts.apache.org%3E"
          },
          {
            "title": "Struts Security Bulletin",
            "url": "http://struts.apache.org/docs/s2-049.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.3.7,2.3.33), [2.5,2.5.12)"
          ]
        },
        "severity": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.33"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2017-09-12T12:47:32.905000Z",
        "credit": [
          "Adam Cazzolla",
          "Jonathan Bullock"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[Apache Struts2](http://struts.apache.org/) is a popular open-source framework for developing web applications in the Java programming language.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This is due to an incomplete fix for [CVE-2017-7672](https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESTRUTS-31499). If an application allows enter an URL in a form field and built-in URLValidator is used, it is possible to prepare a special URL which will be used to overload server process when performing validation of the URL.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nUpgrade `org.apache.struts:struts2-core` to version 2.3.34, 2.5.13 or higher.\n\n## References\n- [Struts Security Bulletin](http://struts.apache.org/docs/s2-050.html)\n",
        "disclosureTime": "2017-08-23T21:00:00Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-31501",
        "identifiers": {
          "CVE": [
            "CVE-2017-9804"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:55.669434Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2017-09-12T12:47:32.905000Z",
        "references": [
          {
            "title": "Struts Security Bulletin",
            "url": "http://struts.apache.org/docs/s2-050.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.3.7,2.3.34), [2.5,2.5.13)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.34"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2017-09-12T12:47:32.905000Z",
        "credit": [
          "Huijun Chen",
          "Xiaolong Zhu"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[Apache Struts2](http://struts.apache.org/) is a popular open-source framework for developing web applications in the Java programming language.\n\nAffected versions of this package are vulnerable to Denial of Service (ReDoS) attacks. The REST Plugin is using outdated XStream library which is vulnerable and allow perform a DoS attack using malicious request with specially crafted XML payload.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nUpgrade `org.apache.struts:struts2-core` to version 2.3.34, 2.5.13 or higher.\n\n## References\n- [Struts Security Bulletin](http://struts.apache.org/docs/s2-051.html)\n",
        "disclosureTime": "2017-08-23T21:00:00Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-31502",
        "identifiers": {
          "CVE": [
            "CVE-2017-9793"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:55.673440Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2017-09-12T12:47:32.905000Z",
        "references": [
          {
            "title": "Struts Security Bulletin",
            "url": "http://struts.apache.org/docs/s2-051.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.3.7,2.3.34), [2.5,2.5.13)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.34"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-09-06T17:28:23.339000Z",
        "credit": [
          "Lupin",
          "David Greene",
          "Roland McIntosh"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[Apache Struts2](http://struts.apache.org/) is a popular open-source framework for developing web applications in the Java programming language.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. An unauthenticated attack may be able to exploit this \nWhen using expression literals or forcing expression in Freemarker tags (see example below) and using request values can lead to RCE attack.\n\n```xml\n<@s.hidden name=\"redirectUri\" value=redirectUri />\n<@s.hidden name=\"redirectUri\" value=\"${redirectUri}\" />\n<@s.hidden name=\"${redirectUri}\"/>\n```\n\nIn both cases a writable property is used in the value attribute and in both cases this is threatened as an expression by Freemarker. Please be aware that using Struts expression evaluation style is safe:\n\n```\n<@s.hidden name=\"redirectUri\" value=\"%{redirectUri}\" />\n<@s.hidden name=\"%{redirectUri}\"/>\n```\n\n## Remediation\nDevelopers are strongly advised to upgrade their _Apache Struts_ components to version `2.3.34`, `2.5.12` or higher.\n\n## References\n- [Apache Security Bulletin](https://cwiki.apache.org/confluence/display/WW/S2-053)\n",
        "disclosureTime": "2017-09-05T17:28:23.339000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-31503",
        "identifiers": {
          "CVE": [
            "CVE-2017-12611"
          ],
          "CWE": [
            "CWE-502",
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:55.677355Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2017-09-06T17:28:23.339000Z",
        "references": [
          {
            "title": "Apache Security Bulletin",
            "url": "https://cwiki.apache.org/confluence/display/WW/S2-053"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.3.34), [2.4,2.5.12)"
          ]
        },
        "severity": "medium",
        "title": "Arbitrary Code Execution",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.34"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-08-22T00:00:00Z",
        "credit": [
          "Man Yue Mo"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[org.apache.struts:struts2-core](http://struts.apache.org/) is a popular open-source framework for developing web applications in the Java programming language.\n\nAffected versions of this package are vulnerable to Remote Code Execution.\nWhen the namespace value is not set for a result defined in underlying xml configurations, and in same time, its upper action(s) configurations have no or wildcard namespace, an attacker may be able to conduct a remote code execution attack. They could also use the opportunity when using a url tag which does not have a value and action set and in same time, its upper action(s) configurations have no or wildcard namespace.\n\n## Remediation\nUpgrade `org.apache.struts:struts2-core` to versions 2.3.35, 2.5.17 or higher.\n\n## References\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1620019)\n- [Struts2 Security Bulletin](https://cwiki.apache.org/confluence/display/WW/S2-057)\n- [Lgtm Blog](https://lgtm.com/blog/apache_struts_CVE-2018-11776)\n",
        "disclosureTime": "2018-08-17T00:00:00Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTS-32477",
        "identifiers": {
          "CVE": [
            "CVE-2018-11776"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "struts2-core",
          "groupId": "org.apache.struts"
        },
        "modificationTime": "2018-09-03T13:22:58.833220Z",
        "moduleName": "org.apache.struts:struts2-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts:struts2-core",
        "patches": [],
        "publicationTime": "2018-08-22T11:53:44.582000Z",
        "references": [
          {
            "title": "Lgtm Blog",
            "url": "https://lgtm.com/blog/apache_struts_CVE-2018-11776"
          },
          {
            "title": "Struts2 Security Bulletin",
            "url": "https://cwiki.apache.org/confluence/display/WW/S2-057"
          },
          {
            "title": "RedHat Bugzilla Bug",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1620019"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.3.0, 2.3.35), [2.5.0, 2.5.17)"
          ]
        },
        "severity": "high",
        "title": "Remote Code Execution",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.35"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts:struts2-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.661000Z",
        "credit": [
          "Jasper Rosenberg"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[`org.apache.struts.xwork:xwork-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xwork-core%22)\nThe default exclude patterns (excludeParams) in Apache Struts 2.3.20 allow remote attackers to \"compromise internal state of an application\" via unspecified vectors.\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-1831)\n- [Struts Security Advisory](https://struts.apache.org/docs/s2-024.html)\n",
        "disclosureTime": "2015-07-17T17:44:54Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTSXWORK-30797",
        "identifiers": {
          "CVE": [
            "CVE-2015-1831"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xwork-core",
          "groupId": "org.apache.struts.xwork"
        },
        "modificationTime": "2018-09-03T13:22:53.400297Z",
        "moduleName": "org.apache.struts.xwork:xwork-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts.xwork:xwork-core",
        "patches": [],
        "publicationTime": "2015-07-17T17:44:54Z",
        "references": [
          {
            "title": "Struts Security Advisory",
            "url": "https://struts.apache.org/docs/s2-024.html"
          },
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-1831"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.3.20]"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20",
          "org.apache.struts.xwork:xwork-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.20.1",
          "org.apache.struts.xwork:xwork-core@2.3.20.1"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts.xwork:xwork-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.673000Z",
        "credit": [
          "rskvp93"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[`org.apache.struts.xwork:xwork-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xwork-core%22)\nAffected versions of the package are vulnerable to Parameter Alteration. ValueStack defines special top object which represents root of execution context. It can be used to manipulate Struts' internals or can be used to affect container's settings\n\n\n## References\n- [Apache Security Advisory](https://struts.apache.org/docs/s2-026.html)\n",
        "disclosureTime": "2015-09-28T16:59:30Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTSXWORK-30798",
        "identifiers": {
          "CVE": [
            "CVE-2015-5209"
          ],
          "CWE": [
            "CWE-235"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xwork-core",
          "groupId": "org.apache.struts.xwork"
        },
        "modificationTime": "2018-09-03T13:22:53.404431Z",
        "moduleName": "org.apache.struts.xwork:xwork-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts.xwork:xwork-core",
        "patches": [],
        "publicationTime": "2015-09-28T16:59:30Z",
        "references": [
          {
            "title": "Apache Security Advisory",
            "url": "https://struts.apache.org/docs/s2-026.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2,2.3.24.1)"
          ]
        },
        "severity": "high",
        "title": "Parameter Alteration",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20",
          "org.apache.struts.xwork:xwork-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.24.1",
          "org.apache.struts.xwork:xwork-core@2.3.24.1"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts.xwork:xwork-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.686000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`org.apache.struts.xwork:xwork-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xwork-core%22)\nApache Struts 2.x before 2.3.28 allows remote attackers to execute arbitrary code via a \"%{}\" sequence in a tag attribute, aka forced double OGNL evaluation.\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0785)",
        "disclosureTime": "2016-03-16T05:58:06.341000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTSXWORK-30799",
        "identifiers": {
          "CVE": [
            "CVE-2016-0785"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xwork-core",
          "groupId": "org.apache.struts.xwork"
        },
        "modificationTime": "2018-09-03T13:22:53.408735Z",
        "moduleName": "org.apache.struts.xwork:xwork-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts.xwork:xwork-core",
        "patches": [],
        "publicationTime": "2016-03-16T05:58:06.341000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0785"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2,2.3.28)"
          ]
        },
        "severity": "high",
        "title": "Improper Input Validation",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20",
          "org.apache.struts.xwork:xwork-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.28",
          "org.apache.struts.xwork:xwork-core@2.3.28"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts.xwork:xwork-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.701000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n[`org.apache.struts.xwork:xwork-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xwork-core%22)\nApache Struts 2.x before 2.3.25 does not sanitize text in the Locale object constructed by I18NInterceptor, which might allow remote attackers to conduct cross-site scripting (XSS) attacks via unspecified vectors involving language display.\n\n## Details\nCross-Site Scripting (XSS) attacks occur when an attacker tricks a user’s browser to execute malicious JavaScript code in the context of a victim’s domain. Such scripts can steal the user’s session cookies for the domain, scrape or modify its content, and perform or modify actions on the user’s behalf, actions typically blocked by the browser’s Same Origin Policy.\n\nThese attacks are possible by escaping the context of the web application and injecting malicious scripts in an otherwise trusted website. These scripts can introduce additional attributes (say, a \"new\" option in a dropdown list or a new link to a malicious site) and can potentially execute code on the clients side, unbeknown to the victim. This occurs when characters like `<` `>` `\"` `'` are not escaped properly.\n\nThere are a few types of XSS:\n- **Persistent XSS** is an attack in which the malicious code persists into the web app’s database.\n- **Reflected XSS** is an which the website echoes back a portion of the request. The attacker needs to trick the user into clicking a malicious link (for instance through a phishing email or malicious JS on another page), which triggers the XSS attack.\n- **DOM-based XSS** is an that occurs purely in the browser when client-side JavaScript echoes back a portion of the URL onto the page. DOM-Based XSS is notoriously hard to detect, as the server never gets a chance to see the attack taking place.\n\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-2162)",
        "disclosureTime": "2016-03-16T07:51:26.242000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTSXWORK-30800",
        "identifiers": {
          "CVE": [
            "CVE-2016-2162"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xwork-core",
          "groupId": "org.apache.struts.xwork"
        },
        "modificationTime": "2018-09-03T13:22:53.413216Z",
        "moduleName": "org.apache.struts.xwork:xwork-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts.xwork:xwork-core",
        "patches": [],
        "publicationTime": "2016-03-16T07:51:26.242000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-2162"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2,2.3.25)"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20",
          "org.apache.struts.xwork:xwork-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.28",
          "org.apache.struts.xwork:xwork-core@2.3.28"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts.xwork:xwork-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.713000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`org.apache.struts.xwork:xwork-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xwork-core%22)\nApache Struts 2.0.0 through 2.3.24.1 does not properly cache method references when used with OGNL before 3.0.12, which allows remote attackers to cause a denial of service (block access to a web site) via unspecified vectors.\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3093)",
        "disclosureTime": "2016-06-02T02:16:48.918000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTSXWORK-30801",
        "identifiers": {
          "CVE": [
            "CVE-2016-3093"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xwork-core",
          "groupId": "org.apache.struts.xwork"
        },
        "modificationTime": "2018-09-03T13:22:53.421610Z",
        "moduleName": "org.apache.struts.xwork:xwork-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts.xwork:xwork-core",
        "patches": [],
        "publicationTime": "2016-06-02T02:16:48.918000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3093"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2,2.3.24.1]"
          ]
        },
        "severity": "medium",
        "title": "Improper Input Validation",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20",
          "org.apache.struts.xwork:xwork-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.24.3",
          "org.apache.struts.xwork:xwork-core@2.3.24.3"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts.xwork:xwork-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.724000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`org.apache.struts.xwork:xwork-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xwork-core%22)\nApache Struts 2 2.3.20 through 2.3.28.1 allows remote attackers to bypass intended access restrictions and conduct redirection attacks via a crafted request.\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-4433)",
        "disclosureTime": "2016-06-21T01:33:07.474000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTSXWORK-30802",
        "identifiers": {
          "CVE": [
            "CVE-2016-4433"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xwork-core",
          "groupId": "org.apache.struts.xwork"
        },
        "modificationTime": "2018-09-03T13:22:53.425894Z",
        "moduleName": "org.apache.struts.xwork:xwork-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts.xwork:xwork-core",
        "patches": [],
        "publicationTime": "2016-06-21T01:33:07.474000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-4433"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.3.20,2.3.28.1]"
          ]
        },
        "severity": "medium",
        "title": "Improper Input Validation",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20",
          "org.apache.struts.xwork:xwork-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.29",
          "org.apache.struts.xwork:xwork-core@2.3.29"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts.xwork:xwork-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.738000Z",
        "credit": [
          "Alvaro Munoz"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[`org.apache.struts.xwork:xwork-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xwork-core%22)\nAffected versions of the package are vulnerable to Remote code Execution. The Apache Struts frameworks when forced, performs double evaluation of attributes' values assigned to certain tags so it is possible to pass in a value that will be evaluated again when a tag's attributes will be rendered.\n\n## References\n- [Apache Security Advisory](https://struts.apache.org/docs/s2-036.html)\n",
        "disclosureTime": "2016-11-14T07:48:03.440000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTSXWORK-30803",
        "identifiers": {
          "CVE": [
            "CVE-2016-4461"
          ],
          "CWE": [
            "CWE-264"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xwork-core",
          "groupId": "org.apache.struts.xwork"
        },
        "modificationTime": "2018-09-03T13:22:53.430348Z",
        "moduleName": "org.apache.struts.xwork:xwork-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts.xwork:xwork-core",
        "patches": [],
        "publicationTime": "2016-11-14T07:48:03.440000Z",
        "references": [
          {
            "title": "Apache Security Advisory",
            "url": "https://struts.apache.org/docs/s2-036.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.2.1,2.3.28.1]"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20",
          "org.apache.struts.xwork:xwork-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.29",
          "org.apache.struts.xwork:xwork-core@2.3.29"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts.xwork:xwork-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:23.751000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`org.apache.struts.xwork:xwork-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xwork-core%22)\nThe URLValidator class in Apache Struts 2 2.3.20 through 2.3.28.1 and 2.5.x before 2.5.1 allows remote attackers to cause a denial of service via a null value for a URL field.\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-4465)",
        "disclosureTime": "2016-06-20T07:45:43.528000Z",
        "id": "SNYK-JAVA-ORGAPACHESTRUTSXWORK-30804",
        "identifiers": {
          "CVE": [
            "CVE-2016-4465"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xwork-core",
          "groupId": "org.apache.struts.xwork"
        },
        "modificationTime": "2018-09-03T13:22:53.434762Z",
        "moduleName": "org.apache.struts.xwork:xwork-core",
        "packageManager": "maven",
        "packageName": "org.apache.struts.xwork:xwork-core",
        "patches": [],
        "publicationTime": "2016-06-20T07:45:43.528000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-4465"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.3.20,2.3.28.1], [2.5,2.5.1)"
          ]
        },
        "severity": "medium",
        "title": "Improper Input Validation",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.apache.struts:struts2-core@2.3.20",
          "org.apache.struts.xwork:xwork-core@2.3.20"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.struts:struts2-core@2.3.29",
          "org.apache.struts.xwork:xwork-core@2.3.29"
        ],
        "version": "2.3.20",
        "name": "org.apache.struts.xwork:xwork-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:53Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`org.hibernate:hibernate-validator`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22hibernate-validator%22)\nReflectionHelper (`org.hibernate.validator.util.ReflectionHelper`) in Hibernate Validator 4.1.0 before 4.2.1, 4.3.x before 4.3.2, and 5.x before 5.1.2 allows attackers to bypass Java Security Manager (JSM) restrictions and execute restricted reflection calls via a crafted application.\n\n## References\n\n- [Redhat Bugzilla](https://bugzilla.redhat.com/CVE-2014-3558)\n- [Jira Issue](https://hibernate.atlassian.net/browse/HV-912)\n",
        "disclosureTime": "2014-07-17T16:51:53Z",
        "id": "SNYK-JAVA-ORGHIBERNATE-30098",
        "identifiers": {
          "CVE": [
            "CVE-2014-3558"
          ],
          "CWE": [
            "CWE-592"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "hibernate-validator",
          "groupId": "org.hibernate"
        },
        "modificationTime": "2018-09-03T13:22:51.715206Z",
        "moduleName": "org.hibernate:hibernate-validator",
        "packageManager": "maven",
        "packageName": "org.hibernate:hibernate-validator",
        "patches": [],
        "publicationTime": "2014-07-17T16:51:53Z",
        "references": [
          {
            "title": "Jira Issue",
            "url": "https://hibernate.atlassian.net/browse/HV-912"
          },
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/CVE-2014-3558"
          }
        ],
        "semver": {
          "vulnerable": [
            "[4.1-alpha, 4.2.1), [4.3-alpha, 4.3.2.Final), [5, 5.1.2.Final)"
          ]
        },
        "severity": "medium",
        "title": "JSM bypass via ReflectionHelper",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
          "org.hibernate:hibernate-validator@4.3.1.Final"
        ],
        "upgradePath": [
          false,
          false,
          "org.hibernate:hibernate-validator@4.3.2.Final"
        ],
        "version": "4.3.1.Final",
        "name": "org.hibernate:hibernate-validator",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:53Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`org.hibernate:hibernate-validator`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22hibernate-validator%22)\nReflectionHelper (`org.hibernate.validator.util.ReflectionHelper`) in Hibernate Validator 4.1.0 before 4.2.1, 4.3.x before 4.3.2, and 5.x before 5.1.2 allows attackers to bypass Java Security Manager (JSM) restrictions and execute restricted reflection calls via a crafted application.\n\n## References\n\n- [Redhat Bugzilla](https://bugzilla.redhat.com/CVE-2014-3558)\n- [Jira Issue](https://hibernate.atlassian.net/browse/HV-912)\n",
        "disclosureTime": "2014-07-17T16:51:53Z",
        "id": "SNYK-JAVA-ORGHIBERNATE-30098",
        "identifiers": {
          "CVE": [
            "CVE-2014-3558"
          ],
          "CWE": [
            "CWE-592"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "hibernate-validator",
          "groupId": "org.hibernate"
        },
        "modificationTime": "2018-09-03T13:22:51.715206Z",
        "moduleName": "org.hibernate:hibernate-validator",
        "packageManager": "maven",
        "packageName": "org.hibernate:hibernate-validator",
        "patches": [],
        "publicationTime": "2014-07-17T16:51:53Z",
        "references": [
          {
            "title": "Jira Issue",
            "url": "https://hibernate.atlassian.net/browse/HV-912"
          },
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/CVE-2014-3558"
          }
        ],
        "semver": {
          "vulnerable": [
            "[4.1-alpha, 4.2.1), [4.3-alpha, 4.3.2.Final), [5, 5.1.2.Final)"
          ]
        },
        "severity": "medium",
        "title": "JSM bypass via ReflectionHelper",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
          "org.hibernate:hibernate-validator@4.3.1.Final"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "org.hibernate:hibernate-validator@4.3.2.Final"
        ],
        "version": "4.3.1.Final",
        "name": "org.hibernate:hibernate-validator",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:52Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`org.springframework:spring-web`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-web%22)\n\nAffected versions of this package are vulnerable to XML External Entity (XXE) Injection attacks due to not disabling  the resolution of URI references by default in a DTD declaration. This occurs only when processing user provided XML documents.\n\n## Details\n\nXXE Injection is a type of attack against an application that parses XML input.\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\n\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\n\nFor example, below is a sample XML document, containing an XML element- username.\n\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n   <username>John</username>\n</xml>\n```\n\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\n\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE foo [\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n   <username>&xxe;</username>\n</xml>\n```\n\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n\n## Remediation\nUpgrade `org.springframework:spring-web` to versions 3.2.8, 4.0.4 or higher.\n\n## References\n- [Pivotal Security](http://www.gopivotal.com/security/cve-2014-0225)\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-0225)\n",
        "disclosureTime": "2016-12-25T16:51:52Z",
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-30163",
        "identifiers": {
          "CVE": [
            "CVE-2014-0225"
          ],
          "CWE": [
            "CWE-611"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-web",
          "groupId": "org.springframework"
        },
        "modificationTime": "2018-09-03T13:22:51.997599Z",
        "moduleName": "org.springframework:spring-web",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-web",
        "patches": [],
        "publicationTime": "2016-12-25T16:51:52Z",
        "references": [
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-0225"
          },
          {
            "title": "Pivotal Security",
            "url": "http://www.gopivotal.com/security/cve-2014-0225"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3,3.2.8.RELEASE], [4,4.0.4.RELEASE]"
          ]
        },
        "severity": "low",
        "title": "XML External Entity (XXE) Injection",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.springframework:spring-web@3.2.6.RELEASE"
        ],
        "upgradePath": [
          false,
          false,
          "org.springframework:spring-web@3.2.9.RELEASE"
        ],
        "version": "3.2.6.RELEASE",
        "name": "org.springframework:spring-web",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:55Z",
        "credit": [
          "Toshiaki Maki"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n[`org.springframework:spring-web`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-web%22) provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n\nAffected versions of this package are vulnerable to Denial of Sevice attacks. It does not properly process inline DTD declarations when DTD is not entirely disabled, which allows remote attackers to cause a denial of service (memory consumption and out-of-memory errors) via a crafted XML file.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nUpgrade `org.springframework:spring-web` to version 3.2.14, 4.1.7 or higher.\n\n## References\n- [Pivotal Security](http://pivotal.io/security/cve-2015-3192)\n",
        "disclosureTime": "2016-12-25T16:51:55Z",
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-30164",
        "identifiers": {
          "CVE": [
            "CVE-2015-3192"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-web",
          "groupId": "org.springframework"
        },
        "modificationTime": "2018-09-03T13:22:52.001631Z",
        "moduleName": "org.springframework:spring-web",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-web",
        "patches": [],
        "publicationTime": "2016-12-25T16:51:55Z",
        "references": [
          {
            "title": "Pivotal Security",
            "url": "http://pivotal.io/security/cve-2015-3192"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3.2,3.2.13.RELEASE], [4,4.1.6.RELEASE]"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.springframework:spring-web@3.2.6.RELEASE"
        ],
        "upgradePath": [
          false,
          false,
          "org.springframework:spring-web@3.2.14.RELEASE"
        ],
        "version": "3.2.6.RELEASE",
        "name": "org.springframework:spring-web",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:56Z",
        "credit": [
          "Alvaro Muñoz"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[`org.springframework:spring-web`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-web%22) provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\n\nAffected versions of this package are vulnerable to Reflected File Download (RFD) attacks via a crafted URL with a batch script extension, resulting in the response being downloaded rather than rendered.\n\n## Remediation\nUpgrade `org.springframework:spring-web` to version 4.2.1.RELEASE, 4.1.7.RELEASE, 4.0.9.RELEASE, 3.2.14.RELEASE or higher.\n\n## References\n- [Pivotal Security](http://pivotal.io/security/cve-2015-5211)\n- [Redhat Bugzilla](https://access.redhat.com/security/cve/cve-2015-5211)\n- [Oren Hafif Blog](https://www.trustwave.com/Resources/SpiderLabs-Blog/Reflected-File-Download---A-New-Web-Attack-Vector/)\n",
        "disclosureTime": "2016-12-25T16:51:56Z",
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-30165",
        "identifiers": {
          "CVE": [
            "CVE-2015-5211"
          ],
          "CWE": [
            "CWE-494"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-web",
          "groupId": "org.springframework"
        },
        "modificationTime": "2018-09-03T13:22:52.005676Z",
        "moduleName": "org.springframework:spring-web",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-web",
        "patches": [],
        "publicationTime": "2016-12-25T16:51:56Z",
        "references": [
          {
            "title": "Oren Hafif Blog",
            "url": "https://www.trustwave.com/Resources/SpiderLabs-Blog/Reflected-File-Download---A-New-Web-Attack-Vector/"
          },
          {
            "title": "Redhat Bugzilla",
            "url": "https://access.redhat.com/security/cve/cve-2015-5211"
          },
          {
            "title": "Pivotal Security",
            "url": "http://pivotal.io/security/cve-2015-5211"
          }
        ],
        "semver": {
          "vulnerable": [
            "[4.2,4.2.1.RELEASE], [4.1,4.1.7.RELEASE], [4.0,4.0.9.RELEASE], [3.2,3.2.14.RELEASE]"
          ]
        },
        "severity": "medium",
        "title": "Reflected File Download",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.springframework:spring-web@3.2.6.RELEASE"
        ],
        "upgradePath": [
          false,
          false,
          "org.springframework:spring-web@3.2.15.RELEASE"
        ],
        "version": "3.2.6.RELEASE",
        "name": "org.springframework:spring-web",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:31.465000Z",
        "credit": [
          "Takeshi Terada"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[`org.springframework:spring-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-core%22) provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\r\n\r\nAffected versions of this package are vulnerable to Directory traversal attack. It allows remote attackers to read arbitrary files via a crafted URL.\r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade `org.springframework:spring-core` to version 3.2.9, 4.0.5 or higher.\r\n\r\n## References\r\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8)\r\n- [Pivotal Security](https://pivotal.io/security/cve-2014-3578)\r\n- [Jira Issue](https://jira.spring.io/browse/SPR-12354)\r\n- [JVNDB](http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html)\r\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1131882)\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578)",
        "disclosureTime": "2014-09-05T17:16:58Z",
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-31325",
        "identifiers": {
          "CVE": [
            "CVE-2014-3578"
          ],
          "CWE": [
            "CWE-22"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-core",
          "groupId": "org.springframework"
        },
        "method": {
          "org/springframework/web/multipart/support/DefaultMultipartHttpServletRequest": [
            {
              "name": [
                "getParameterNames"
              ],
              "semver": [
                "[3,3.2.9), [4,4.0.5)"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-09T10:55:49.293607Z",
        "moduleName": "org.springframework:spring-core",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-core",
        "patches": [],
        "publicationTime": "2014-09-05T17:16:58Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578"
          },
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1131882"
          },
          {
            "title": "JVNDB",
            "url": "http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html"
          },
          {
            "title": "Jira Issue",
            "url": "https://jira.spring.io/browse/SPR-12354"
          },
          {
            "title": "Pivotal Security",
            "url": "https://pivotal.io/security/cve-2014-3578"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3.0.0, 3.2.9)",
            "[4.0.0, 4.0.5)"
          ]
        },
        "severity": "medium",
        "title": "Directory Traversal",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-core@1.0-SNAPSHOT",
          "org.springframework:spring-orm@3.2.6.RELEASE",
          "org.springframework:spring-core@3.2.6.RELEASE"
        ],
        "upgradePath": [
          false,
          false,
          "org.springframework:spring-orm@3.2.9.RELEASE",
          "org.springframework:spring-core@3.2.9.RELEASE"
        ],
        "version": "3.2.6.RELEASE",
        "name": "org.springframework:spring-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:31.465000Z",
        "credit": [
          "Takeshi Terada"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[`org.springframework:spring-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-core%22) provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\r\n\r\nAffected versions of this package are vulnerable to Directory traversal attack. It allows remote attackers to read arbitrary files via a crafted URL.\r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade `org.springframework:spring-core` to version 3.2.9, 4.0.5 or higher.\r\n\r\n## References\r\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8)\r\n- [Pivotal Security](https://pivotal.io/security/cve-2014-3578)\r\n- [Jira Issue](https://jira.spring.io/browse/SPR-12354)\r\n- [JVNDB](http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html)\r\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1131882)\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578)",
        "disclosureTime": "2014-09-05T17:16:58Z",
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-31325",
        "identifiers": {
          "CVE": [
            "CVE-2014-3578"
          ],
          "CWE": [
            "CWE-22"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-core",
          "groupId": "org.springframework"
        },
        "method": {
          "org/springframework/web/multipart/support/DefaultMultipartHttpServletRequest": [
            {
              "name": [
                "getParameterNames"
              ],
              "semver": [
                "[3,3.2.9), [4,4.0.5)"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-09T10:55:49.293607Z",
        "moduleName": "org.springframework:spring-core",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-core",
        "patches": [],
        "publicationTime": "2014-09-05T17:16:58Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578"
          },
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1131882"
          },
          {
            "title": "JVNDB",
            "url": "http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html"
          },
          {
            "title": "Jira Issue",
            "url": "https://jira.spring.io/browse/SPR-12354"
          },
          {
            "title": "Pivotal Security",
            "url": "https://pivotal.io/security/cve-2014-3578"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3.0.0, 3.2.9)",
            "[4.0.0, 4.0.5)"
          ]
        },
        "severity": "medium",
        "title": "Directory Traversal",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.springframework:spring-web@3.2.6.RELEASE",
          "org.springframework:spring-core@3.2.6.RELEASE"
        ],
        "upgradePath": [
          false,
          false,
          "org.springframework:spring-web@3.2.9.RELEASE",
          "org.springframework:spring-core@3.2.9.RELEASE"
        ],
        "version": "3.2.6.RELEASE",
        "name": "org.springframework:spring-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:31.465000Z",
        "credit": [
          "Takeshi Terada"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[`org.springframework:spring-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-core%22) provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\r\n\r\nAffected versions of this package are vulnerable to Directory traversal attack. It allows remote attackers to read arbitrary files via a crafted URL.\r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade `org.springframework:spring-core` to version 3.2.9, 4.0.5 or higher.\r\n\r\n## References\r\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8)\r\n- [Pivotal Security](https://pivotal.io/security/cve-2014-3578)\r\n- [Jira Issue](https://jira.spring.io/browse/SPR-12354)\r\n- [JVNDB](http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html)\r\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1131882)\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578)",
        "disclosureTime": "2014-09-05T17:16:58Z",
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-31325",
        "identifiers": {
          "CVE": [
            "CVE-2014-3578"
          ],
          "CWE": [
            "CWE-22"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-core",
          "groupId": "org.springframework"
        },
        "method": {
          "org/springframework/web/multipart/support/DefaultMultipartHttpServletRequest": [
            {
              "name": [
                "getParameterNames"
              ],
              "semver": [
                "[3,3.2.9), [4,4.0.5)"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-09T10:55:49.293607Z",
        "moduleName": "org.springframework:spring-core",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-core",
        "patches": [],
        "publicationTime": "2014-09-05T17:16:58Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578"
          },
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1131882"
          },
          {
            "title": "JVNDB",
            "url": "http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html"
          },
          {
            "title": "Jira Issue",
            "url": "https://jira.spring.io/browse/SPR-12354"
          },
          {
            "title": "Pivotal Security",
            "url": "https://pivotal.io/security/cve-2014-3578"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3.0.0, 3.2.9)",
            "[4.0.0, 4.0.5)"
          ]
        },
        "severity": "medium",
        "title": "Directory Traversal",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
          "io.github.snyk:todolist-core@1.0-SNAPSHOT",
          "org.springframework:spring-orm@3.2.6.RELEASE",
          "org.springframework:spring-core@3.2.6.RELEASE"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "org.springframework:spring-orm@3.2.9.RELEASE",
          "org.springframework:spring-core@3.2.9.RELEASE"
        ],
        "version": "3.2.6.RELEASE",
        "name": "org.springframework:spring-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:31.538000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[`org.springframework:spring-web`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-web%22)\nAffected versions of this package do not disable external entity resolution, which allows remote attackers to read arbitrary files, cause a denial of service and conduct CSRF attacks via crafted XML, aka an XML External Entity (XXE) issue.  \n\n**NOTE:** this vulnerability exists because of an incomplete fix for [CVE-2013-4152](https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31330), [CVE-2013-7315](https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30162), and [CVE-2013-6429](https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30160).\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0054)\n",
        "disclosureTime": "2014-06-06T21:43:43Z",
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-31331",
        "identifiers": {
          "CVE": [
            "CVE-2014-0054"
          ],
          "CWE": [
            "CWE-352"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-web",
          "groupId": "org.springframework"
        },
        "modificationTime": "2018-09-03T13:22:54.999991Z",
        "moduleName": "org.springframework:spring-web",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-web",
        "patches": [],
        "publicationTime": "2014-06-06T21:43:43Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0054"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,3.2.8), [4,4.0.2)"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Request Forgery (CSRF)",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.springframework:spring-web@3.2.6.RELEASE"
        ],
        "upgradePath": [
          false,
          false,
          "org.springframework:spring-web@3.2.8.RELEASE"
        ],
        "version": "3.2.6.RELEASE",
        "name": "org.springframework:spring-web",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2018-03-05T13:22:59.343000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`org.springframework:spring-web`](https://springframework.org) provides security services for the Spring IO Platform.\n\nAffected versions of the package are vulnerable to Authentication Bypass.\n\n## Remediation\nThere is no fix version for `org.springframework:spring-web`.\n\n## References\n- [GitHub Issue](https://github.com/spring-projects/spring-security/issues/3392)\n",
        "disclosureTime": "2016-01-02T22:00:00Z",
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-31644",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-592"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-web",
          "groupId": "org.springframework"
        },
        "modificationTime": "2018-09-03T13:22:56.194572Z",
        "moduleName": "org.springframework:spring-web",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-web",
        "patches": [],
        "publicationTime": "2018-03-06T11:16:29.445000Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/spring-projects/spring-security/issues/3392"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "medium",
        "title": "Authentication Bypass",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.springframework:spring-web@3.2.6.RELEASE"
        ],
        "upgradePath": [],
        "version": "3.2.6.RELEASE",
        "name": "org.springframework:spring-web",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:H/A:H/E:H/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2018-05-30T12:32:02.349000Z",
        "credit": [
          "Snyk Security research Team"
        ],
        "cvssScore": 9.4,
        "description": "## Overview\r\n[`org.zeroturnaround:zt-zip`](https://github.com/zeroturnaround/zt-zip) is a library that helps to create, modify or extract ZIP archives.\r\n\r\nAffected versions of the package are vulnerable to Arbitrary File Write via Archive Extraction (AKA \"Zip Slip\").\r\n\r\nIt can be exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a `../../file.exe` location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n++2018-04-15 22:04:29 .....           19           19  good.txt\r\n++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n## Remediation\r\nUpgrade `org.zeroturnaround:zt-zip` to version 1.13 or higher.\r\n\r\n## References\r\n- [GitHub Commit](https://github.com/zeroturnaround/zt-zip/commit/759b72f33bc8f4d69f84f09fcb7f010ad45d6fff)\r\n- [Zip Slip Advisory](https://snyk.io/research/zip-slip-vulnerability)\r\n- [List of fixed projects that contained Zip Slip](https://github.com/snyk/zip-slip-vulnerability)",
        "disclosureTime": "2018-04-17T21:00:00Z",
        "id": "SNYK-JAVA-ORGZEROTURNAROUND-31681",
        "identifiers": {
          "CVE": [
            "CVE-2018-1002201"
          ],
          "CWE": [
            "CWE-29"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "zt-zip",
          "groupId": "org.zeroturnaround"
        },
        "method": {
          "org/zeroturnaround/zip/ZipUtil$Unpacker": [
            {
              "name": [
                "process"
              ],
              "semver": [
                "[,1.13)"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:56.330768Z",
        "moduleName": "org.zeroturnaround:zt-zip",
        "packageManager": "maven",
        "packageName": "org.zeroturnaround:zt-zip",
        "patches": [],
        "publicationTime": "2018-05-31T07:32:02Z",
        "references": [
          {
            "title": "List of fixed projects that contained Zip Slip",
            "url": "https://github.com/snyk/zip-slip-vulnerability"
          },
          {
            "title": "Zip Slip Advisory",
            "url": "https://snyk.io/research/zip-slip-vulnerability"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/zeroturnaround/zt-zip/commit/759b72f33bc8f4d69f84f09fcb7f010ad45d6fff"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.13)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "org.zeroturnaround:zt-zip@1.12"
        ],
        "upgradePath": [
          false,
          false,
          "org.zeroturnaround:zt-zip@1.13"
        ],
        "version": "1.12",
        "name": "org.zeroturnaround:zt-zip",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "license": "EPL-1.0",
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "id": "snyk:lic:maven:org.aspectj:aspectjweaver:EPL-1.0",
        "type": "license",
        "packageManager": "maven",
        "language": "java",
        "packageName": "org.aspectj:aspectjweaver",
        "title": "EPL-1.0 license",
        "description": "EPL-1.0 license",
        "publicationTime": "2018-09-19T02:07:04.893Z",
        "creationTime": "2018-09-19T02:07:04.893Z",
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt",
        "severity": "medium",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-core@1.0-SNAPSHOT",
          "org.aspectj:aspectjweaver@1.8.2"
        ],
        "upgradePath": [],
        "version": "1.8.2",
        "name": "org.aspectj:aspectjweaver",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "license": "EPL-1.0",
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "id": "snyk:lic:maven:org.aspectj:aspectjweaver:EPL-1.0",
        "type": "license",
        "packageManager": "maven",
        "language": "java",
        "packageName": "org.aspectj:aspectjweaver",
        "title": "EPL-1.0 license",
        "description": "EPL-1.0 license",
        "publicationTime": "2018-09-19T02:07:04.893Z",
        "creationTime": "2018-09-19T02:07:04.893Z",
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt",
        "severity": "medium",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
          "io.github.snyk:todolist-core@1.0-SNAPSHOT",
          "org.aspectj:aspectjweaver@1.8.2"
        ],
        "upgradePath": [],
        "version": "1.8.2",
        "name": "org.aspectj:aspectjweaver",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "license": "EPL-1.0",
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "id": "snyk:lic:maven:org.aspectj:aspectjweaver:EPL-1.0",
        "type": "license",
        "packageManager": "maven",
        "language": "java",
        "packageName": "org.aspectj:aspectjweaver",
        "title": "EPL-1.0 license",
        "description": "EPL-1.0 license",
        "publicationTime": "2018-09-19T02:07:04.893Z",
        "creationTime": "2018-09-19T02:07:04.893Z",
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt",
        "severity": "medium",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
          "io.github.snyk:todolist-core@1.0-SNAPSHOT",
          "org.aspectj:aspectjweaver@1.8.2"
        ],
        "upgradePath": [],
        "version": "1.8.2",
        "name": "org.aspectj:aspectjweaver",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "license": "(EPL-1.0 OR EPL-1.0)",
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "id": "snyk:lic:maven:org.hibernate.javax.persistence:hibernate-jpa-2.1-api:(EPL-1.0_OR_EPL-1.0)",
        "type": "license",
        "packageManager": "maven",
        "language": "java",
        "packageName": "org.hibernate.javax.persistence:hibernate-jpa-2.1-api",
        "title": "Dual license: EPL-1.0, EPL-1.0",
        "description": "Dual license: EPL-1.0, EPL-1.0",
        "publicationTime": "2018-09-19T02:07:21.638Z",
        "creationTime": "2018-09-19T02:07:21.638Z",
        "licenseTemplateUrl": [
          "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt",
          "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt"
        ],
        "severity": "medium",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-core@1.0-SNAPSHOT",
          "org.hibernate:hibernate-core@4.3.7.Final",
          "org.hibernate.javax.persistence:hibernate-jpa-2.1-api@1.0.0.Final"
        ],
        "upgradePath": [],
        "version": "1.0.0.Final",
        "name": "org.hibernate.javax.persistence:hibernate-jpa-2.1-api",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "license": "(EPL-1.0 OR EPL-1.0)",
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "id": "snyk:lic:maven:org.hibernate.javax.persistence:hibernate-jpa-2.1-api:(EPL-1.0_OR_EPL-1.0)",
        "type": "license",
        "packageManager": "maven",
        "language": "java",
        "packageName": "org.hibernate.javax.persistence:hibernate-jpa-2.1-api",
        "title": "Dual license: EPL-1.0, EPL-1.0",
        "description": "Dual license: EPL-1.0, EPL-1.0",
        "publicationTime": "2018-09-19T02:07:21.638Z",
        "creationTime": "2018-09-19T02:07:21.638Z",
        "licenseTemplateUrl": [
          "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt",
          "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt"
        ],
        "severity": "medium",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
          "io.github.snyk:todolist-core@1.0-SNAPSHOT",
          "org.hibernate:hibernate-core@4.3.7.Final",
          "org.hibernate.javax.persistence:hibernate-jpa-2.1-api@1.0.0.Final"
        ],
        "upgradePath": [],
        "version": "1.0.0.Final",
        "name": "org.hibernate.javax.persistence:hibernate-jpa-2.1-api",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "license": "(EPL-1.0 OR EPL-1.0)",
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "id": "snyk:lic:maven:org.hibernate.javax.persistence:hibernate-jpa-2.1-api:(EPL-1.0_OR_EPL-1.0)",
        "type": "license",
        "packageManager": "maven",
        "language": "java",
        "packageName": "org.hibernate.javax.persistence:hibernate-jpa-2.1-api",
        "title": "Dual license: EPL-1.0, EPL-1.0",
        "description": "Dual license: EPL-1.0, EPL-1.0",
        "publicationTime": "2018-09-19T02:07:21.638Z",
        "creationTime": "2018-09-19T02:07:21.638Z",
        "licenseTemplateUrl": [
          "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt",
          "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt"
        ],
        "severity": "medium",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
          "io.github.snyk:todolist-core@1.0-SNAPSHOT",
          "org.hibernate:hibernate-core@4.3.7.Final",
          "org.hibernate.javax.persistence:hibernate-jpa-2.1-api@1.0.0.Final"
        ],
        "upgradePath": [],
        "version": "1.0.0.Final",
        "name": "org.hibernate.javax.persistence:hibernate-jpa-2.1-api",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "license": "GPL-3.0",
        "semver": {
          "vulnerable": [
            "[3.0.1.GA,3.1.2.GA)"
          ]
        },
        "id": "snyk:lic:maven:org.jboss.logging:jboss-logging:GPL-3.0",
        "type": "license",
        "packageManager": "maven",
        "language": "java",
        "packageName": "org.jboss.logging:jboss-logging",
        "title": "GPL-3.0 license",
        "description": "GPL-3.0 license",
        "publicationTime": "2018-09-19T02:07:24.951Z",
        "creationTime": "2018-09-19T02:07:24.951Z",
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/GPL-3.0.txt",
        "severity": "high",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
          "org.hibernate:hibernate-validator@4.3.1.Final",
          "org.jboss.logging:jboss-logging@3.1.0.CR2"
        ],
        "upgradePath": [
          false,
          false,
          "org.hibernate:hibernate-validator@5.1.0.Final",
          "org.jboss.logging:jboss-logging@3.1.3.GA"
        ],
        "version": "3.1.0.CR2",
        "name": "org.jboss.logging:jboss-logging",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "license": "GPL-3.0",
        "semver": {
          "vulnerable": [
            "[3.0.1.GA,3.1.2.GA)"
          ]
        },
        "id": "snyk:lic:maven:org.jboss.logging:jboss-logging:GPL-3.0",
        "type": "license",
        "packageManager": "maven",
        "language": "java",
        "packageName": "org.jboss.logging:jboss-logging",
        "title": "GPL-3.0 license",
        "description": "GPL-3.0 license",
        "publicationTime": "2018-09-19T02:07:24.951Z",
        "creationTime": "2018-09-19T02:07:24.951Z",
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/GPL-3.0.txt",
        "severity": "high",
        "from": [
          "io.github.snyk:todolist-mvc@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-struts@1.0-SNAPSHOT",
          "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
          "org.hibernate:hibernate-validator@4.3.1.Final",
          "org.jboss.logging:jboss-logging@3.1.0.CR2"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "org.hibernate:hibernate-validator@5.1.0.Final",
          "org.jboss.logging:jboss-logging@3.1.3.GA"
        ],
        "version": "3.1.0.CR2",
        "name": "org.jboss.logging:jboss-logging",
        "isUpgradable": false,
        "isPatchable": false
      }
    ],
    "dependencyCount": 54,
    "org": "kevinwright",
    "licensesPolicy": {
      "severities": {
        "MS-RL": "medium",
        "EPL-1.0": "medium",
        "GPL-2.0": "high",
        "GPL-3.0": "high",
        "MPL-1.1": "medium",
        "MPL-2.0": "medium",
        "AGPL-1.0": "high",
        "AGPL-3.0": "high",
        "CDDL-1.0": "medium",
        "LGPL-2.0": "medium",
        "LGPL-2.1": "medium",
        "LGPL-3.0": "medium",
        "Newsletr": "medium",
        "CPOL-1.02": "high",
        "LGPL-2.1+": "medium",
        "LGPL-3.0+": "medium",
        "SimPL-2.0": "high",
        "Artistic-1.0": "medium",
        "Artistic-2.0": "medium"
      }
    },
    "isPrivate": true,
    "packageManager": "maven",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.12.0\nignore: {}\npatch: {}\n",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": true,
      "disregardFilesystemIgnores": false
    },
    "summary": "54 vulnerable dependency paths",
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 43,
    "path": "./java-goof"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:H/A:H/E:H/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-ADMZIP-11093"
        ],
        "creationTime": "2018-05-30T12:09:16.138000Z",
        "credit": [
          "Snyk Security Research",
          "Sébastien Mignot",
          "Alex Chapman"
        ],
        "cvssScore": 9.4,
        "description": "## Overview\n[`adm-zip`](https://www.npmjs.com/package/adm-zip) is a Javascript implementation of zip for NodeJS with support for electron original-fs. \n\nAffected versions of the package are vulnerable to Arbitrary File Write via Archive Extraction (AKA \"Zip Slip\").\n\nIt can be exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a `../../file.exe` location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n+2018-04-15 22:04:29 .....           19           19  good.txt\n+2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `adm-zip` to version 0.4.11 or higher.\n\n## References\n- [GitHub PR](https://github.com/cthackers/adm-zip/pull/212)\n- [GitHub Commit 0.4.9](https://github.com/cthackers/adm-zip/pull/212/commits/6f4dfeb9a2166e93207443879988f97d88a37cde)\n- [GitHub Commit 0.4.11](https://github.com/cthackers/adm-zip/commit/d01fa8c80c3a5fcf5ce1eda82d96600c62910d3f)\n- [Zip Slip Advisory](https://snyk.io/research/zip-slip-vulnerability)\n- [List of fixed projects that contained Zip Slip](https://github.com/snyk/zip-slip-vulnerability)",
        "disclosureTime": "2018-04-14T21:00:00Z",
        "id": "npm:adm-zip:20180415",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-ADMZIP-11093"
          ],
          "CVE": [
            "CVE-2018-1002204"
          ],
          "CWE": [
            "CWE-29"
          ],
          "NSP": [
            681
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:48.347796Z",
        "moduleName": "adm-zip",
        "packageManager": "npm",
        "packageName": "adm-zip",
        "patches": [],
        "publicationTime": "2018-05-31T07:09:16.138000Z",
        "references": [
          {
            "title": "List of fixed projects that contained Zip Slip",
            "url": "https://github.com/snyk/zip-slip-vulnerability"
          },
          {
            "title": "Zip Slip Advisory",
            "url": "https://snyk.io/research/zip-slip-vulnerability"
          },
          {
            "title": "GitHub Commit 0.4.11",
            "url": "https://github.com/cthackers/adm-zip/commit/d01fa8c80c3a5fcf5ce1eda82d96600c62910d3f"
          },
          {
            "title": "GitHub Commit 0.4.9",
            "url": "https://github.com/cthackers/adm-zip/pull/212/commits/6f4dfeb9a2166e93207443879988f97d88a37cde"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/cthackers/adm-zip/pull/212"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.4.11"
          ]
        },
        "severity": "high",
        "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
        "from": [
          "goof@0.0.3",
          "adm-zip@0.4.7"
        ],
        "upgradePath": [
          false,
          "adm-zip@0.4.11"
        ],
        "version": "0.4.7",
        "name": "adm-zip",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/adm-zip/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "credit": [
          "kamael"
        ],
        "cvssScore": 6.2,
        "description": "## Overview\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `brace-expansion` to version 1.1.7 or higher.\n\n## References\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)\n",
        "disclosureTime": "2017-03-01T22:00:00Z",
        "id": "npm:brace-expansion:20170302",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ],
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            338
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:46.030285Z",
        "moduleName": "brace-expansion",
        "packageManager": "npm",
        "packageName": "brace-expansion",
        "patches": [],
        "publicationTime": "2017-04-26T09:19:21.663000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/juliangruber/brace-expansion/issues/33"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/juliangruber/brace-expansion/pull/35"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "severity": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "nyc@6.6.1",
          "glob@7.0.3",
          "minimatch@3.0.0",
          "brace-expansion@1.1.4"
        ],
        "upgradePath": [
          false,
          "tap@5.8.0",
          "nyc@6.6.1",
          "glob@7.0.3",
          "minimatch@3.0.0",
          "brace-expansion@1.1.7"
        ],
        "version": "1.1.4",
        "name": "brace-expansion",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/nyc/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/package.json",
        "bundled": [
          "goof@0.0.3",
          "nyc@6.6.1",
          "spawn-wrap@1.2.3"
        ],
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "credit": [
          "kamael"
        ],
        "cvssScore": 6.2,
        "description": "## Overview\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `brace-expansion` to version 1.1.7 or higher.\n\n## References\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)\n",
        "disclosureTime": "2017-03-01T22:00:00Z",
        "id": "npm:brace-expansion:20170302",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ],
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            338
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:46.030285Z",
        "moduleName": "brace-expansion",
        "packageManager": "npm",
        "packageName": "brace-expansion",
        "patches": [],
        "publicationTime": "2017-04-26T09:19:21.663000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/juliangruber/brace-expansion/issues/33"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/juliangruber/brace-expansion/pull/35"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "severity": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "nyc@6.6.1",
          "rimraf@2.5.2",
          "glob@7.0.3",
          "minimatch@3.0.0",
          "brace-expansion@1.1.4"
        ],
        "upgradePath": [
          false,
          "tap@5.8.0",
          "nyc@6.6.1",
          "rimraf@2.5.2",
          "glob@7.0.3",
          "minimatch@3.0.0",
          "brace-expansion@1.1.7"
        ],
        "version": "1.1.4",
        "name": "brace-expansion",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/nyc/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/package.json",
        "bundled": [
          "goof@0.0.3",
          "nyc@6.6.1",
          "spawn-wrap@1.2.3"
        ],
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "credit": [
          "kamael"
        ],
        "cvssScore": 6.2,
        "description": "## Overview\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `brace-expansion` to version 1.1.7 or higher.\n\n## References\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)\n",
        "disclosureTime": "2017-03-01T22:00:00Z",
        "id": "npm:brace-expansion:20170302",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ],
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            338
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:46.030285Z",
        "moduleName": "brace-expansion",
        "packageManager": "npm",
        "packageName": "brace-expansion",
        "patches": [],
        "publicationTime": "2017-04-26T09:19:21.663000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/juliangruber/brace-expansion/issues/33"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/juliangruber/brace-expansion/pull/35"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "severity": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "nyc@6.6.1",
          "istanbul@0.4.3",
          "fileset@0.2.1",
          "minimatch@2.0.10",
          "brace-expansion@1.1.4"
        ],
        "upgradePath": [
          false,
          "tap@5.8.0",
          "nyc@6.6.1",
          "istanbul@0.4.3",
          "fileset@0.2.1",
          "minimatch@2.0.10",
          "brace-expansion@1.1.7"
        ],
        "version": "1.1.4",
        "name": "brace-expansion",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/nyc/node_modules/istanbul/node_modules/fileset/node_modules/minimatch/node_modules/brace-expansion/package.json",
        "bundled": [
          "goof@0.0.3",
          "nyc@6.6.1",
          "istanbul@0.4.3"
        ],
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "credit": [
          "kamael"
        ],
        "cvssScore": 6.2,
        "description": "## Overview\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `brace-expansion` to version 1.1.7 or higher.\n\n## References\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)\n",
        "disclosureTime": "2017-03-01T22:00:00Z",
        "id": "npm:brace-expansion:20170302",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ],
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            338
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:46.030285Z",
        "moduleName": "brace-expansion",
        "packageManager": "npm",
        "packageName": "brace-expansion",
        "patches": [],
        "publicationTime": "2017-04-26T09:19:21.663000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/juliangruber/brace-expansion/issues/33"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/juliangruber/brace-expansion/pull/35"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "severity": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "nyc@6.6.1",
          "spawn-wrap@1.2.3",
          "rimraf@2.5.2",
          "glob@7.0.3",
          "minimatch@3.0.0",
          "brace-expansion@1.1.4"
        ],
        "upgradePath": [
          false,
          "tap@5.8.0",
          "nyc@6.6.1",
          "spawn-wrap@1.2.3",
          "rimraf@2.5.2",
          "glob@7.0.3",
          "minimatch@3.0.0",
          "brace-expansion@1.1.7"
        ],
        "version": "1.1.4",
        "name": "brace-expansion",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/nyc/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/package.json",
        "bundled": [
          "goof@0.0.3",
          "nyc@6.6.1",
          "spawn-wrap@1.2.3"
        ],
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "credit": [
          "kamael"
        ],
        "cvssScore": 6.2,
        "description": "## Overview\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `brace-expansion` to version 1.1.7 or higher.\n\n## References\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)\n",
        "disclosureTime": "2017-03-01T22:00:00Z",
        "id": "npm:brace-expansion:20170302",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ],
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            338
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:46.030285Z",
        "moduleName": "brace-expansion",
        "packageManager": "npm",
        "packageName": "brace-expansion",
        "patches": [],
        "publicationTime": "2017-04-26T09:19:21.663000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/juliangruber/brace-expansion/issues/33"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/juliangruber/brace-expansion/pull/35"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "severity": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "nyc@6.6.1",
          "istanbul@0.4.3",
          "fileset@0.2.1",
          "glob@5.0.15",
          "minimatch@2.0.10",
          "brace-expansion@1.1.4"
        ],
        "upgradePath": [
          false,
          "tap@5.8.0",
          "nyc@6.6.1",
          "istanbul@0.4.3",
          "fileset@0.2.1",
          "glob@5.0.15",
          "minimatch@2.0.10",
          "brace-expansion@1.1.7"
        ],
        "version": "1.1.4",
        "name": "brace-expansion",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/nyc/node_modules/istanbul/node_modules/fileset/node_modules/minimatch/node_modules/brace-expansion/package.json",
        "bundled": [
          "goof@0.0.3",
          "nyc@6.6.1",
          "istanbul@0.4.3"
        ],
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-BRACES-10900"
        ],
        "creationTime": "2018-02-19T14:36:50Z",
        "credit": [
          "Jamie Davis"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n",
        "disclosureTime": "2018-02-19T20:39:06Z",
        "id": "npm:braces:20180219",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-BRACES-10900"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400",
            "CWE-185"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.629331Z",
        "moduleName": "braces",
        "packageManager": "npm",
        "packageName": "braces",
        "patches": [],
        "publicationTime": "2018-02-19T16:32:28.424000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.3.1"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "nyc@6.6.1",
          "micromatch@2.3.8",
          "braces@1.8.5"
        ],
        "upgradePath": [
          false,
          "tap@10.3.3",
          "nyc@11.7.2",
          "micromatch@3.1.10",
          "braces@2.3.1"
        ],
        "version": "1.8.5",
        "name": "braces",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/nyc/node_modules/micromatch/node_modules/braces/package.json",
        "bundled": [
          "goof@0.0.3",
          "nyc@6.6.1",
          "test-exclude@1.1.0"
        ],
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-BRACES-10900"
        ],
        "creationTime": "2018-02-19T14:36:50Z",
        "credit": [
          "Jamie Davis"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n",
        "disclosureTime": "2018-02-19T20:39:06Z",
        "id": "npm:braces:20180219",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-BRACES-10900"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400",
            "CWE-185"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.629331Z",
        "moduleName": "braces",
        "packageManager": "npm",
        "packageName": "braces",
        "patches": [],
        "publicationTime": "2018-02-19T16:32:28.424000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.3.1"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "nyc@6.6.1",
          "test-exclude@1.1.0",
          "micromatch@2.3.8",
          "braces@1.8.5"
        ],
        "upgradePath": [
          false,
          "tap@9.0.0",
          "nyc@10.2.0",
          "test-exclude@4.2.1",
          "micromatch@3.1.8",
          "braces@2.3.1"
        ],
        "version": "1.8.5",
        "name": "braces",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/nyc/node_modules/micromatch/node_modules/braces/package.json",
        "bundled": [
          "goof@0.0.3",
          "nyc@6.6.1",
          "test-exclude@1.1.0"
        ],
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-BSON-10988"
        ],
        "creationTime": "2018-02-27T13:46:53.813000Z",
        "credit": [
          "Jamie Davis"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[`bson`](https://www.npmjs.com/package/bson) is a bson parser for node.js and the browser\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 26th, 2018 - Initial Response from package owner\n* Feb 26th, 2018 - Fix issued\n* Feb 27th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `bson` to version 1.0.5 or higher\n\n## References\n- [GitHub Commit](https://github.com/mongodb/js-bson/commit/bd61c45157c53a1698ff23770160cf4783e9ea4a)",
        "disclosureTime": "2018-02-27T13:46:53.813000Z",
        "id": "npm:bson:20180225",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-BSON-10988"
          ],
          "CVE": [
            "CVE-2018-13863"
          ],
          "CWE": [
            "CWE-400",
            "CWE-185"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.979102Z",
        "moduleName": "bson",
        "packageManager": "npm",
        "packageName": "bson",
        "patches": [],
        "publicationTime": "2018-02-27T16:32:24.910000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/mongodb/js-bson/commit/bd61c45157c53a1698ff23770160cf4783e9ea4a"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.0.5"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "mongoose@4.2.4",
          "bson@0.4.23"
        ],
        "upgradePath": [
          false,
          "mongoose@4.7.6",
          "bson@1.0.5"
        ],
        "version": "0.4.23",
        "name": "bson",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/bson/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-BSON-10988"
        ],
        "creationTime": "2018-02-27T13:46:53.813000Z",
        "credit": [
          "Jamie Davis"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[`bson`](https://www.npmjs.com/package/bson) is a bson parser for node.js and the browser\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 26th, 2018 - Initial Response from package owner\n* Feb 26th, 2018 - Fix issued\n* Feb 27th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `bson` to version 1.0.5 or higher\n\n## References\n- [GitHub Commit](https://github.com/mongodb/js-bson/commit/bd61c45157c53a1698ff23770160cf4783e9ea4a)",
        "disclosureTime": "2018-02-27T13:46:53.813000Z",
        "id": "npm:bson:20180225",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-BSON-10988"
          ],
          "CVE": [
            "CVE-2018-13863"
          ],
          "CWE": [
            "CWE-400",
            "CWE-185"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.979102Z",
        "moduleName": "bson",
        "packageManager": "npm",
        "packageName": "bson",
        "patches": [],
        "publicationTime": "2018-02-27T16:32:24.910000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/mongodb/js-bson/commit/bd61c45157c53a1698ff23770160cf4783e9ea4a"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.0.5"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "mongoose@4.2.4",
          "mongodb@2.0.46",
          "mongodb-core@1.2.19",
          "bson@0.4.23"
        ],
        "upgradePath": [
          false,
          "mongoose@4.7.3",
          "mongodb@2.2.16",
          "mongodb-core@2.1.2",
          "bson@1.0.5"
        ],
        "version": "0.4.23",
        "name": "bson",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/bson/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-CRYPTILES-12176"
        ],
        "creationTime": "2018-07-10T07:33:37.875000Z",
        "credit": [
          "Microsoft Vulnerability Research"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[cryptiles](https://www.npmjs.com/package/cryptiles) is a package for general crypto utilities.\n\nAffected versions of this package are vulnerable to Insecure Randomness. The `randomDigits()` method is supposed to return a cryptographically strong pseudo-random data string, but it was biased to certain digits. An attacker could be able to guess the created digits.\n\n## Remediation\nUpgrade to version 4.1.2 and higher.\n\n## References\n- [GitHub Issue](https://github.com/hapijs/cryptiles/issues/34)\n- [GitHub Commit](https://github.com/hapijs/cryptiles/commit/9332d4263a32b84e76bf538d7470d01ea63fa047)\n",
        "disclosureTime": "2018-07-10T07:33:37.875000Z",
        "id": "npm:cryptiles:20180710",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-CRYPTILES-12176"
          ],
          "CVE": [
            "CVE-2018-1000620"
          ],
          "CWE": [
            "CWE-331"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:49.011742Z",
        "moduleName": "cryptiles",
        "packageManager": "npm",
        "packageName": "cryptiles",
        "patches": [],
        "publicationTime": "2018-07-19T14:10:10.299000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/hapijs/cryptiles/commit/9332d4263a32b84e76bf538d7470d01ea63fa047"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/hapijs/cryptiles/issues/34"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.1.2"
          ]
        },
        "severity": "medium",
        "title": "Insecure Randomness",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "codecov.io@0.1.6",
          "request@2.42.0",
          "hawk@1.1.1",
          "cryptiles@0.2.2"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "request@2.84.0",
          "hawk@7.0.7",
          "cryptiles@4.1.2"
        ],
        "version": "0.2.2",
        "name": "cryptiles",
        "isUpgradable": false,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/cryptiles/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-CRYPTILES-12176"
        ],
        "creationTime": "2018-07-10T07:33:37.875000Z",
        "credit": [
          "Microsoft Vulnerability Research"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[cryptiles](https://www.npmjs.com/package/cryptiles) is a package for general crypto utilities.\n\nAffected versions of this package are vulnerable to Insecure Randomness. The `randomDigits()` method is supposed to return a cryptographically strong pseudo-random data string, but it was biased to certain digits. An attacker could be able to guess the created digits.\n\n## Remediation\nUpgrade to version 4.1.2 and higher.\n\n## References\n- [GitHub Issue](https://github.com/hapijs/cryptiles/issues/34)\n- [GitHub Commit](https://github.com/hapijs/cryptiles/commit/9332d4263a32b84e76bf538d7470d01ea63fa047)\n",
        "disclosureTime": "2018-07-10T07:33:37.875000Z",
        "id": "npm:cryptiles:20180710",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-CRYPTILES-12176"
          ],
          "CVE": [
            "CVE-2018-1000620"
          ],
          "CWE": [
            "CWE-331"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:49.011742Z",
        "moduleName": "cryptiles",
        "packageManager": "npm",
        "packageName": "cryptiles",
        "patches": [],
        "publicationTime": "2018-07-19T14:10:10.299000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/hapijs/cryptiles/commit/9332d4263a32b84e76bf538d7470d01ea63fa047"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/hapijs/cryptiles/issues/34"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.1.2"
          ]
        },
        "severity": "medium",
        "title": "Insecure Randomness",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "coveralls@2.13.3",
          "request@2.79.0",
          "hawk@3.1.3",
          "cryptiles@2.0.5"
        ],
        "upgradePath": [
          false,
          "tap@11.1.3",
          "coveralls@3.0.0",
          "request@2.84.0",
          "hawk@7.0.7",
          "cryptiles@4.1.2"
        ],
        "version": "2.0.5",
        "name": "cryptiles",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/coveralls/node_modules/cryptiles/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-DEBUG-10762"
        ],
        "creationTime": "2017-09-13T07:55:05.106000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
        "disclosureTime": "2017-09-05T21:00:00Z",
        "id": "npm:debug:20170905",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-DEBUG-10762"
          ],
          "CVE": [
            "CVE-2017-16137"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            534
          ]
        },
        "language": "js",
        "method": {
          "src/node.js": [
            {
              "name": [
                "exports.formatters.o"
              ],
              "semver": [
                "<2.6.9",
                ">=3.0.0 <3.1.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:47.143145Z",
        "moduleName": "debug",
        "packageManager": "npm",
        "packageName": "debug",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:3",
            "modificationTime": "2018-09-04T11:57:08.708662Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.0.0 <2.4.0"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:2",
            "modificationTime": "2018-09-04T11:57:08.707464Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.4.0 <2.5.0"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:1",
            "modificationTime": "2018-09-04T11:57:08.706019Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.5.1 <2.6.9"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:0",
            "modificationTime": "2018-09-04T11:57:08.704803Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
            ],
            "version": ">= 3.0.0 <=3.0.1"
          }
        ],
        "publicationTime": "2017-09-26T03:55:05Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/visionmedia/debug/pull/504"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/visionmedia/debug/issues/501"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.6.9 || >=3.0.0 <3.1.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "debug@2.2.0"
        ],
        "upgradePath": [
          false,
          "express@4.15.5",
          "debug@2.6.9"
        ],
        "version": "2.2.0",
        "name": "debug",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/debug/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-DEBUG-10762"
        ],
        "creationTime": "2017-09-13T07:55:05.106000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
        "disclosureTime": "2017-09-05T21:00:00Z",
        "id": "npm:debug:20170905",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-DEBUG-10762"
          ],
          "CVE": [
            "CVE-2017-16137"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            534
          ]
        },
        "language": "js",
        "method": {
          "src/node.js": [
            {
              "name": [
                "exports.formatters.o"
              ],
              "semver": [
                "<2.6.9",
                ">=3.0.0 <3.1.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:47.143145Z",
        "moduleName": "debug",
        "packageManager": "npm",
        "packageName": "debug",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:3",
            "modificationTime": "2018-09-04T11:57:08.708662Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.0.0 <2.4.0"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:2",
            "modificationTime": "2018-09-04T11:57:08.707464Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.4.0 <2.5.0"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:1",
            "modificationTime": "2018-09-04T11:57:08.706019Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.5.1 <2.6.9"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:0",
            "modificationTime": "2018-09-04T11:57:08.704803Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
            ],
            "version": ">= 3.0.0 <=3.0.1"
          }
        ],
        "publicationTime": "2017-09-26T03:55:05Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/visionmedia/debug/pull/504"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/visionmedia/debug/issues/501"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.6.9 || >=3.0.0 <3.1.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "finalhandler@0.3.6",
          "debug@2.2.0"
        ],
        "upgradePath": [
          false,
          "express@4.15.0",
          "finalhandler@1.0.6",
          "debug@2.6.9"
        ],
        "version": "2.2.0",
        "name": "debug",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/debug/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-DEBUG-10762"
        ],
        "creationTime": "2017-09-13T07:55:05.106000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
        "disclosureTime": "2017-09-05T21:00:00Z",
        "id": "npm:debug:20170905",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-DEBUG-10762"
          ],
          "CVE": [
            "CVE-2017-16137"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            534
          ]
        },
        "language": "js",
        "method": {
          "src/node.js": [
            {
              "name": [
                "exports.formatters.o"
              ],
              "semver": [
                "<2.6.9",
                ">=3.0.0 <3.1.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:47.143145Z",
        "moduleName": "debug",
        "packageManager": "npm",
        "packageName": "debug",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:3",
            "modificationTime": "2018-09-04T11:57:08.708662Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.0.0 <2.4.0"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:2",
            "modificationTime": "2018-09-04T11:57:08.707464Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.4.0 <2.5.0"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:1",
            "modificationTime": "2018-09-04T11:57:08.706019Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.5.1 <2.6.9"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:0",
            "modificationTime": "2018-09-04T11:57:08.704803Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
            ],
            "version": ">= 3.0.0 <=3.0.1"
          }
        ],
        "publicationTime": "2017-09-26T03:55:05Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/visionmedia/debug/pull/504"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/visionmedia/debug/issues/501"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.6.9 || >=3.0.0 <3.1.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "send@0.12.3",
          "debug@2.2.0"
        ],
        "upgradePath": [
          false,
          "express@4.15.5",
          "send@0.15.6",
          "debug@2.6.9"
        ],
        "version": "2.2.0",
        "name": "debug",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/debug/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-DEBUG-10762"
        ],
        "creationTime": "2017-09-13T07:55:05.106000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
        "disclosureTime": "2017-09-05T21:00:00Z",
        "id": "npm:debug:20170905",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-DEBUG-10762"
          ],
          "CVE": [
            "CVE-2017-16137"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            534
          ]
        },
        "language": "js",
        "method": {
          "src/node.js": [
            {
              "name": [
                "exports.formatters.o"
              ],
              "semver": [
                "<2.6.9",
                ">=3.0.0 <3.1.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:47.143145Z",
        "moduleName": "debug",
        "packageManager": "npm",
        "packageName": "debug",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:3",
            "modificationTime": "2018-09-04T11:57:08.708662Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.0.0 <2.4.0"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:2",
            "modificationTime": "2018-09-04T11:57:08.707464Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.4.0 <2.5.0"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:1",
            "modificationTime": "2018-09-04T11:57:08.706019Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.5.1 <2.6.9"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:0",
            "modificationTime": "2018-09-04T11:57:08.704803Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
            ],
            "version": ">= 3.0.0 <=3.0.1"
          }
        ],
        "publicationTime": "2017-09-26T03:55:05Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/visionmedia/debug/pull/504"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/visionmedia/debug/issues/501"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.6.9 || >=3.0.0 <3.1.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "mongoose@4.2.4",
          "mquery@1.6.3",
          "debug@2.2.0"
        ],
        "upgradePath": [
          false,
          "mongoose@4.11.14",
          "mquery@2.3.2",
          "debug@2.6.9"
        ],
        "version": "2.2.0",
        "name": "debug",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/debug/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-DEBUG-10762"
        ],
        "creationTime": "2017-09-13T07:55:05.106000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
        "disclosureTime": "2017-09-05T21:00:00Z",
        "id": "npm:debug:20170905",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-DEBUG-10762"
          ],
          "CVE": [
            "CVE-2017-16137"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            534
          ]
        },
        "language": "js",
        "method": {
          "src/node.js": [
            {
              "name": [
                "exports.formatters.o"
              ],
              "semver": [
                "<2.6.9",
                ">=3.0.0 <3.1.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:47.143145Z",
        "moduleName": "debug",
        "packageManager": "npm",
        "packageName": "debug",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:3",
            "modificationTime": "2018-09-04T11:57:08.708662Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.0.0 <2.4.0"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:2",
            "modificationTime": "2018-09-04T11:57:08.707464Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.4.0 <2.5.0"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:1",
            "modificationTime": "2018-09-04T11:57:08.706019Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.5.1 <2.6.9"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:0",
            "modificationTime": "2018-09-04T11:57:08.704803Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
            ],
            "version": ">= 3.0.0 <=3.0.1"
          }
        ],
        "publicationTime": "2017-09-26T03:55:05Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/visionmedia/debug/pull/504"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/visionmedia/debug/issues/501"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.6.9 || >=3.0.0 <3.1.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "tap-mocha-reporter@0.0.27",
          "debug@2.2.0"
        ],
        "upgradePath": [
          false,
          "tap@5.8.0",
          "tap-mocha-reporter@0.0.27",
          "debug@2.6.9"
        ],
        "version": "2.2.0",
        "name": "debug",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/debug/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-DEBUG-10762"
        ],
        "creationTime": "2017-09-13T07:55:05.106000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
        "disclosureTime": "2017-09-05T21:00:00Z",
        "id": "npm:debug:20170905",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-DEBUG-10762"
          ],
          "CVE": [
            "CVE-2017-16137"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            534
          ]
        },
        "language": "js",
        "method": {
          "src/node.js": [
            {
              "name": [
                "exports.formatters.o"
              ],
              "semver": [
                "<2.6.9",
                ">=3.0.0 <3.1.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:47.143145Z",
        "moduleName": "debug",
        "packageManager": "npm",
        "packageName": "debug",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:3",
            "modificationTime": "2018-09-04T11:57:08.708662Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.0.0 <2.4.0"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:2",
            "modificationTime": "2018-09-04T11:57:08.707464Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.4.0 <2.5.0"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:1",
            "modificationTime": "2018-09-04T11:57:08.706019Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.5.1 <2.6.9"
          },
          {
            "comments": [],
            "id": "patch:npm:debug:20170905:0",
            "modificationTime": "2018-09-04T11:57:08.704803Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
            ],
            "version": ">= 3.0.0 <=3.0.1"
          }
        ],
        "publicationTime": "2017-09-26T03:55:05Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/visionmedia/debug/pull/504"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/visionmedia/debug/issues/501"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.6.9 || >=3.0.0 <3.1.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "serve-static@1.9.3",
          "send@0.12.3",
          "debug@2.2.0"
        ],
        "upgradePath": [
          false,
          "express@4.15.5",
          "serve-static@1.12.6",
          "send@0.15.6",
          "debug@2.6.9"
        ],
        "version": "2.2.0",
        "name": "debug",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/debug/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L",
        "alternativeIds": [
          "SNYK-JS-DUSTJSLINKEDIN-10136"
        ],
        "creationTime": "2016-09-14T00:00:00Z",
        "credit": [
          "Michael Stepankin"
        ],
        "cvssScore": 8.6,
        "description": "## Overview\n[`dustjs-linkedin`](https://www.npmjs.com/package/dustjs-linkedin) is a Javascript templating engine designed to run asynchronously on both the server and the browser.\n\nDust.js uses Javascript's `eval()` function to evaluate the \"if\" statement conditions. The input to the function is sanitized by escaping all potentially dangerous characters.\n\nHowever, if the variable passed in is an array, no escaping is applied, exposing an easy path to code injection. The risk of exploit is especially high given the fact `express`, `koa` and many other Node.js servers allow users to force a query parameter to be an array using the `param[]=value` notation.\n\n## Remediation\nUpgrade to version `2.6.0` or greater.\n\n## References\n- https://github.com/linkedin/dustjs/pull/534/commits/884be3bb3a34a843e6fb411100088e9b02326bd4\n- https://github.com/linkedin/dustjs/pull/534\n- https://github.com/linkedin/dustjs/issues/741\n- https://artsploit.blogspot.co.il/2016/08/pprce2.html\n\n\n",
        "disclosureTime": "2015-01-09T00:00:00Z",
        "id": "npm:dustjs-linkedin:20160819",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-DUSTJSLINKEDIN-10136"
          ],
          "CVE": [],
          "CWE": [
            "CWE-95"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.616227Z",
        "moduleName": "dustjs-linkedin",
        "packageManager": "npm",
        "packageName": "dustjs-linkedin",
        "patches": [],
        "publicationTime": "2016-09-14T00:00:00Z",
        "references": [
          {
            "title": "ARTSPLOIT.BLOGSPOT.CO.IL",
            "url": "https://artsploit.blogspot.co.il/2016/08/pprce2.html"
          },
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/linkedin/dustjs/issues/741"
          },
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/linkedin/dustjs/pull/534"
          },
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/linkedin/dustjs/pull/534/commits/884be3bb3a34a843e6fb411100088e9b02326bd4"
          }
        ],
        "semver": {
          "vulnerable": [
            "<=2.5.1"
          ]
        },
        "severity": "high",
        "title": "Code Injection",
        "from": [
          "goof@0.0.3",
          "dustjs-linkedin@2.5.0"
        ],
        "upgradePath": [
          false,
          "dustjs-linkedin@2.6.0"
        ],
        "version": "2.5.0",
        "name": "dustjs-linkedin",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/dustjs-linkedin/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L",
        "alternativeIds": [
          "SNYK-JS-DUSTJSLINKEDIN-10136"
        ],
        "creationTime": "2016-09-14T00:00:00Z",
        "credit": [
          "Michael Stepankin"
        ],
        "cvssScore": 8.6,
        "description": "## Overview\n[`dustjs-linkedin`](https://www.npmjs.com/package/dustjs-linkedin) is a Javascript templating engine designed to run asynchronously on both the server and the browser.\n\nDust.js uses Javascript's `eval()` function to evaluate the \"if\" statement conditions. The input to the function is sanitized by escaping all potentially dangerous characters.\n\nHowever, if the variable passed in is an array, no escaping is applied, exposing an easy path to code injection. The risk of exploit is especially high given the fact `express`, `koa` and many other Node.js servers allow users to force a query parameter to be an array using the `param[]=value` notation.\n\n## Remediation\nUpgrade to version `2.6.0` or greater.\n\n## References\n- https://github.com/linkedin/dustjs/pull/534/commits/884be3bb3a34a843e6fb411100088e9b02326bd4\n- https://github.com/linkedin/dustjs/pull/534\n- https://github.com/linkedin/dustjs/issues/741\n- https://artsploit.blogspot.co.il/2016/08/pprce2.html\n\n\n",
        "disclosureTime": "2015-01-09T00:00:00Z",
        "id": "npm:dustjs-linkedin:20160819",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-DUSTJSLINKEDIN-10136"
          ],
          "CVE": [],
          "CWE": [
            "CWE-95"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.616227Z",
        "moduleName": "dustjs-linkedin",
        "packageManager": "npm",
        "packageName": "dustjs-linkedin",
        "patches": [],
        "publicationTime": "2016-09-14T00:00:00Z",
        "references": [
          {
            "title": "ARTSPLOIT.BLOGSPOT.CO.IL",
            "url": "https://artsploit.blogspot.co.il/2016/08/pprce2.html"
          },
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/linkedin/dustjs/issues/741"
          },
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/linkedin/dustjs/pull/534"
          },
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/linkedin/dustjs/pull/534/commits/884be3bb3a34a843e6fb411100088e9b02326bd4"
          }
        ],
        "semver": {
          "vulnerable": [
            "<=2.5.1"
          ]
        },
        "severity": "high",
        "title": "Code Injection",
        "from": [
          "goof@0.0.3",
          "dustjs-helpers@1.5.0",
          "dustjs-linkedin@2.5.0"
        ],
        "upgradePath": [
          false,
          "dustjs-helpers@1.5.0"
        ],
        "version": "2.5.0",
        "name": "dustjs-linkedin",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/dustjs-linkedin/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [
          "SNYK-JS-EJS-10218"
        ],
        "creationTime": "2016-11-28T18:44:12.405000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\nAffected versions of the package are vulnerable to _Remote Code Execution_ by letting the attacker under certain conditions control the source folder from which the engine renders include files.\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\n\nThere's also a [Cross-site Scripting](https://snyk.io/vuln/npm:ejs:20161130) & [Denial of Service](https://snyk.io/vuln/npm:ejs:20161130-1) vulnerabilities caused by the same behaviour. \n\n## Details\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\n\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\n```js\nejs.render(str, data, options);\n\nejs.renderFile(filename, data, options, callback)\n```\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\n```js\nejs.render(str, dataAndOptions);\n\nejs.renderFile(filename, dataAndOptions, callback)\n```\n\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `root` option, which allows changing the project root for includes with an absolute path.  \n\n```js\nejs.renderFile('my-template', {root:'/bad/root/'}, callback);\n```\n\nBy passing along the root directive in the line above, any includes would now be pulled from `/bad/root` instead of the path intended. This allows the attacker to take control of the root directory for included scripts and divert it to a library under his control, thus leading to remote code execution.\n\nThe [fix](https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\n\n## Disclosure Timeline\n- November 27th, 2016 - Reported the issue to package owner.\n- November 27th, 2016 - Issue acknowledged by package owner.\n- November 28th, 2016 - Issue fixed and version `2.5.3` released.\n\n## Remediation\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\nOtherwise, Upgrade `ejs` to version `2.5.3` or higher.\n\n## References\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\n- [Fix commit](https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6)\n\n",
        "disclosureTime": "2016-11-27T22:00:00Z",
        "id": "npm:ejs:20161128",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-EJS-10218"
          ],
          "CVE": [
            "CVE-2017-1000228"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.927383Z",
        "moduleName": "ejs",
        "packageManager": "npm",
        "packageName": "ejs",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:ejs:20161128:0",
            "modificationTime": "2018-09-04T11:57:08.679924Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ejs/20161128/ejs_20161128_0_0_3d447c5a335844b25faec04b1132dbc721f9c8f6.patch"
            ],
            "version": "<2.5.3 >=2.2.4"
          }
        ],
        "publicationTime": "2016-11-28T18:44:12.405000Z",
        "references": [
          {
            "title": "Fix commit",
            "url": "https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/fixing-ejs-rce-vuln"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.5.3"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "goof@0.0.3",
          "ejs@1.0.0"
        ],
        "upgradePath": [
          false,
          "ejs@2.5.3"
        ],
        "version": "1.0.0",
        "name": "ejs",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/ejs/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [
          "SNYK-JS-EJS-10218"
        ],
        "creationTime": "2016-11-28T18:44:12.405000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\nAffected versions of the package are vulnerable to _Remote Code Execution_ by letting the attacker under certain conditions control the source folder from which the engine renders include files.\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\n\nThere's also a [Cross-site Scripting](https://snyk.io/vuln/npm:ejs:20161130) & [Denial of Service](https://snyk.io/vuln/npm:ejs:20161130-1) vulnerabilities caused by the same behaviour. \n\n## Details\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\n\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\n```js\nejs.render(str, data, options);\n\nejs.renderFile(filename, data, options, callback)\n```\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\n```js\nejs.render(str, dataAndOptions);\n\nejs.renderFile(filename, dataAndOptions, callback)\n```\n\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `root` option, which allows changing the project root for includes with an absolute path.  \n\n```js\nejs.renderFile('my-template', {root:'/bad/root/'}, callback);\n```\n\nBy passing along the root directive in the line above, any includes would now be pulled from `/bad/root` instead of the path intended. This allows the attacker to take control of the root directory for included scripts and divert it to a library under his control, thus leading to remote code execution.\n\nThe [fix](https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\n\n## Disclosure Timeline\n- November 27th, 2016 - Reported the issue to package owner.\n- November 27th, 2016 - Issue acknowledged by package owner.\n- November 28th, 2016 - Issue fixed and version `2.5.3` released.\n\n## Remediation\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\nOtherwise, Upgrade `ejs` to version `2.5.3` or higher.\n\n## References\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\n- [Fix commit](https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6)\n\n",
        "disclosureTime": "2016-11-27T22:00:00Z",
        "id": "npm:ejs:20161128",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-EJS-10218"
          ],
          "CVE": [
            "CVE-2017-1000228"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.927383Z",
        "moduleName": "ejs",
        "packageManager": "npm",
        "packageName": "ejs",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:ejs:20161128:0",
            "modificationTime": "2018-09-04T11:57:08.679924Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ejs/20161128/ejs_20161128_0_0_3d447c5a335844b25faec04b1132dbc721f9c8f6.patch"
            ],
            "version": "<2.5.3 >=2.2.4"
          }
        ],
        "publicationTime": "2016-11-28T18:44:12.405000Z",
        "references": [
          {
            "title": "Fix commit",
            "url": "https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/fixing-ejs-rce-vuln"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.5.3"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "goof@0.0.3",
          "ejs-locals@1.0.2",
          "ejs@0.8.8"
        ],
        "upgradePath": [
          false,
          false,
          "ejs@2.5.3"
        ],
        "version": "0.8.8",
        "name": "ejs",
        "isUpgradable": false,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/ejs-locals/node_modules/ejs/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-EJS-10225"
        ],
        "creationTime": "2016-11-28T18:44:12.405000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\nAffected versions of the package are vulnerable to _Cross-site Scripting_ by letting the attacker under certain conditions control and override the `filename` option causing it to render the value as is, without escaping it.\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\n\nThere's also a [Remote Code Execution](https://snyk.io/vuln/npm:ejs:20161128) & [Denial of Service](https://snyk.io/vuln/npm:ejs:20161130-1) vulnerabilities caused by the same behaviour.\n\n## Details\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\n\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\n```js\nejs.render(str, data, options);\n\nejs.renderFile(filename, data, options, callback)\n```\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\n```js\nejs.render(str, dataAndOptions);\n\nejs.renderFile(filename, dataAndOptions, callback)\n```\n\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `filename` option, which will be rendered as is when an error occurs during rendering. \n\n```js\nejs.renderFile('my-template', {filename:'<script>alert(1)</script>'}, callback);\n```\n\nThe [fix](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\n\n## Disclosure Timeline\n- November 28th, 2016 - Reported the issue to package owner.\n- November 28th, 2016 - Issue acknowledged by package owner.\n- December 06th, 2016 - Issue fixed and version `2.5.5` released.\n\n## Remediation\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\nOtherwise, Upgrade `ejs` to version `2.5.5` or higher.\n\n## References\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\n- [Fix commit](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f)\n",
        "disclosureTime": "2016-11-27T22:00:00Z",
        "id": "npm:ejs:20161130",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-EJS-10225"
          ],
          "CVE": [
            "CVE-2017-1000188"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.957013Z",
        "moduleName": "ejs",
        "packageManager": "npm",
        "packageName": "ejs",
        "patches": [],
        "publicationTime": "2016-12-06T15:00:00Z",
        "references": [
          {
            "title": "Fix commit",
            "url": "https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/fixing-ejs-rce-vuln"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.5.5"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "goof@0.0.3",
          "ejs@1.0.0"
        ],
        "upgradePath": [
          false,
          "ejs@2.5.5"
        ],
        "version": "1.0.0",
        "name": "ejs",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/ejs/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-EJS-10225"
        ],
        "creationTime": "2016-11-28T18:44:12.405000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\nAffected versions of the package are vulnerable to _Cross-site Scripting_ by letting the attacker under certain conditions control and override the `filename` option causing it to render the value as is, without escaping it.\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\n\nThere's also a [Remote Code Execution](https://snyk.io/vuln/npm:ejs:20161128) & [Denial of Service](https://snyk.io/vuln/npm:ejs:20161130-1) vulnerabilities caused by the same behaviour.\n\n## Details\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\n\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\n```js\nejs.render(str, data, options);\n\nejs.renderFile(filename, data, options, callback)\n```\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\n```js\nejs.render(str, dataAndOptions);\n\nejs.renderFile(filename, dataAndOptions, callback)\n```\n\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `filename` option, which will be rendered as is when an error occurs during rendering. \n\n```js\nejs.renderFile('my-template', {filename:'<script>alert(1)</script>'}, callback);\n```\n\nThe [fix](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\n\n## Disclosure Timeline\n- November 28th, 2016 - Reported the issue to package owner.\n- November 28th, 2016 - Issue acknowledged by package owner.\n- December 06th, 2016 - Issue fixed and version `2.5.5` released.\n\n## Remediation\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\nOtherwise, Upgrade `ejs` to version `2.5.5` or higher.\n\n## References\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\n- [Fix commit](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f)\n",
        "disclosureTime": "2016-11-27T22:00:00Z",
        "id": "npm:ejs:20161130",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-EJS-10225"
          ],
          "CVE": [
            "CVE-2017-1000188"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.957013Z",
        "moduleName": "ejs",
        "packageManager": "npm",
        "packageName": "ejs",
        "patches": [],
        "publicationTime": "2016-12-06T15:00:00Z",
        "references": [
          {
            "title": "Fix commit",
            "url": "https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/fixing-ejs-rce-vuln"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.5.5"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "goof@0.0.3",
          "ejs-locals@1.0.2",
          "ejs@0.8.8"
        ],
        "upgradePath": [
          false,
          false,
          "ejs@2.5.5"
        ],
        "version": "0.8.8",
        "name": "ejs",
        "isUpgradable": false,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/ejs-locals/node_modules/ejs/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-EJS-10226"
        ],
        "creationTime": "2016-11-28T18:44:12.405000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\nAffected versions of the package are vulnerable to _Denial of Service_ by letting the attacker under certain conditions control and override the `localNames` option causing it to crash.\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\n\nThere's also a [Remote Code Execution](https://snyk.io/vuln/npm:ejs:20161128) & [Cross-site Scripting](https://snyk.io/vuln/npm:ejs:20161130) vulnerabilities caused by the same behaviour.\n\n## Details\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\n\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\n```js\nejs.render(str, data, options);\n\nejs.renderFile(filename, data, options, callback)\n```\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\n```js\nejs.render(str, dataAndOptions);\n\nejs.renderFile(filename, dataAndOptions, callback)\n```\n\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `localNames` option, which will cause the renderer to crash.\n\n```js\nejs.renderFile('my-template', {localNames:'try'}, callback);\n```\n\nThe [fix](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\n\n## Disclosure Timeline\n- November 28th, 2016 - Reported the issue to package owner.\n- November 28th, 2016 - Issue acknowledged by package owner.\n- December 06th, 2016 - Issue fixed and version `2.5.5` released.\n\n## Remediation\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\nOtherwise, Upgrade `ejs` to version `2.5.5` or higher.\n\n## References\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\n- [Fix commit](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f)\n",
        "disclosureTime": "2016-11-27T22:00:00Z",
        "id": "npm:ejs:20161130-1",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-EJS-10226"
          ],
          "CVE": [
            "CVE-2017-1000189"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.961382Z",
        "moduleName": "ejs",
        "packageManager": "npm",
        "packageName": "ejs",
        "patches": [],
        "publicationTime": "2016-12-06T15:00:00Z",
        "references": [
          {
            "title": "Fix commit",
            "url": "https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/fixing-ejs-rce-vuln"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.5.5"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "goof@0.0.3",
          "ejs@1.0.0"
        ],
        "upgradePath": [
          false,
          "ejs@2.5.5"
        ],
        "version": "1.0.0",
        "name": "ejs",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/ejs/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-EJS-10226"
        ],
        "creationTime": "2016-11-28T18:44:12.405000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\nAffected versions of the package are vulnerable to _Denial of Service_ by letting the attacker under certain conditions control and override the `localNames` option causing it to crash.\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\n\nThere's also a [Remote Code Execution](https://snyk.io/vuln/npm:ejs:20161128) & [Cross-site Scripting](https://snyk.io/vuln/npm:ejs:20161130) vulnerabilities caused by the same behaviour.\n\n## Details\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\n\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\n```js\nejs.render(str, data, options);\n\nejs.renderFile(filename, data, options, callback)\n```\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\n```js\nejs.render(str, dataAndOptions);\n\nejs.renderFile(filename, dataAndOptions, callback)\n```\n\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `localNames` option, which will cause the renderer to crash.\n\n```js\nejs.renderFile('my-template', {localNames:'try'}, callback);\n```\n\nThe [fix](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\n\n## Disclosure Timeline\n- November 28th, 2016 - Reported the issue to package owner.\n- November 28th, 2016 - Issue acknowledged by package owner.\n- December 06th, 2016 - Issue fixed and version `2.5.5` released.\n\n## Remediation\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\nOtherwise, Upgrade `ejs` to version `2.5.5` or higher.\n\n## References\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\n- [Fix commit](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f)\n",
        "disclosureTime": "2016-11-27T22:00:00Z",
        "id": "npm:ejs:20161130-1",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-EJS-10226"
          ],
          "CVE": [
            "CVE-2017-1000189"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.961382Z",
        "moduleName": "ejs",
        "packageManager": "npm",
        "packageName": "ejs",
        "patches": [],
        "publicationTime": "2016-12-06T15:00:00Z",
        "references": [
          {
            "title": "Fix commit",
            "url": "https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/fixing-ejs-rce-vuln"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.5.5"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "goof@0.0.3",
          "ejs-locals@1.0.2",
          "ejs@0.8.8"
        ],
        "upgradePath": [
          false,
          false,
          "ejs@2.5.5"
        ],
        "version": "0.8.8",
        "name": "ejs",
        "isUpgradable": false,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/ejs-locals/node_modules/ejs/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-FRESH-10791"
        ],
        "creationTime": "2017-09-27T08:48:49.286000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\n\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `fresh` to version 0.5.2 or higher.\n\n## References\n- [Github Issue](https://github.com/jshttp/fresh/issues/24)\n- [Github Commit](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\n",
        "disclosureTime": "2017-09-08T21:00:00Z",
        "id": "npm:fresh:20170908",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-FRESH-10791"
          ],
          "CVE": [
            "CVE-2017-16119"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            526
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.246659Z",
        "moduleName": "fresh",
        "packageManager": "npm",
        "packageName": "fresh",
        "patches": [],
        "publicationTime": "2017-09-27T08:48:49.286000Z",
        "references": [
          {
            "title": "Github Commit",
            "url": "https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec"
          },
          {
            "title": "Github Issue",
            "url": "https://github.com/jshttp/fresh/issues/24"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.5.2"
          ]
        },
        "severity": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "fresh@0.2.4"
        ],
        "upgradePath": [
          false,
          "express@4.15.5",
          "fresh@0.5.2"
        ],
        "version": "0.2.4",
        "name": "fresh",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/fresh/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-FRESH-10791"
        ],
        "creationTime": "2017-09-27T08:48:49.286000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\n\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `fresh` to version 0.5.2 or higher.\n\n## References\n- [Github Issue](https://github.com/jshttp/fresh/issues/24)\n- [Github Commit](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\n",
        "disclosureTime": "2017-09-08T21:00:00Z",
        "id": "npm:fresh:20170908",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-FRESH-10791"
          ],
          "CVE": [
            "CVE-2017-16119"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            526
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.246659Z",
        "moduleName": "fresh",
        "packageManager": "npm",
        "packageName": "fresh",
        "patches": [],
        "publicationTime": "2017-09-27T08:48:49.286000Z",
        "references": [
          {
            "title": "Github Commit",
            "url": "https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec"
          },
          {
            "title": "Github Issue",
            "url": "https://github.com/jshttp/fresh/issues/24"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.5.2"
          ]
        },
        "severity": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "send@0.12.3",
          "fresh@0.2.4"
        ],
        "upgradePath": [
          false,
          "express@4.15.5",
          "send@0.15.6",
          "fresh@0.5.2"
        ],
        "version": "0.2.4",
        "name": "fresh",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/fresh/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-FRESH-10791"
        ],
        "creationTime": "2017-09-27T08:48:49.286000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\n\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `fresh` to version 0.5.2 or higher.\n\n## References\n- [Github Issue](https://github.com/jshttp/fresh/issues/24)\n- [Github Commit](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\n",
        "disclosureTime": "2017-09-08T21:00:00Z",
        "id": "npm:fresh:20170908",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-FRESH-10791"
          ],
          "CVE": [
            "CVE-2017-16119"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            526
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.246659Z",
        "moduleName": "fresh",
        "packageManager": "npm",
        "packageName": "fresh",
        "patches": [],
        "publicationTime": "2017-09-27T08:48:49.286000Z",
        "references": [
          {
            "title": "Github Commit",
            "url": "https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec"
          },
          {
            "title": "Github Issue",
            "url": "https://github.com/jshttp/fresh/issues/24"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.5.2"
          ]
        },
        "severity": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "serve-static@1.9.3",
          "send@0.12.3",
          "fresh@0.2.4"
        ],
        "upgradePath": [
          false,
          "express@4.15.5",
          "serve-static@1.12.6",
          "send@0.15.6",
          "fresh@0.5.2"
        ],
        "version": "0.2.4",
        "name": "fresh",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/fresh/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-HAWK-10080"
        ],
        "creationTime": "2016-01-19T23:24:51.834000Z",
        "credit": [
          "Adam Baldwin"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[`hawk`](https://www.npmjs.com/package/hawk) is an HTTP authentication scheme using a message authentication code (MAC) algorithm to provide partial HTTP request cryptographic verification.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## References\n- [GitHub Issue](https://github.com/hueniverse/hawk/issues/168)\n",
        "disclosureTime": "2016-01-19T21:51:35.396000Z",
        "id": "npm:hawk:20160119",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HAWK-10080"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            77
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.371903Z",
        "moduleName": "hawk",
        "packageManager": "npm",
        "packageName": "hawk",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:hawk:20160119:3",
            "modificationTime": "2018-09-04T11:57:08.609917Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hawk/20160119/hawk_20160119_0_3_0833f99ba64558525995a7e21d4093da1f3e15fa.patch"
            ],
            "version": "<= 1.1.1 >= 1.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hawk:20160119:2",
            "modificationTime": "2018-09-04T11:57:08.608676Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hawk/20160119/hawk_20160119_0_2_0833f99ba64558525995a7e21d4093da1f3e15fa.patch"
            ],
            "version": "<= 2.3.1 >= 2.2.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hawk:20160119:1",
            "modificationTime": "2018-09-04T11:57:08.607449Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hawk/20160119/hawk_20160119_0_1_0833f99ba64558525995a7e21d4093da1f3e15fa.patch"
            ],
            "version": "<=3.1.2 >=3.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hawk:20160119:0",
            "modificationTime": "2018-09-04T11:57:08.606045Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hawk/20160119/hawk_20160119_0_0_0833f99ba64558525995a7e21d4093da1f3e15fa.patch"
            ],
            "version": "<4.1.1 >=4.0.0"
          }
        ],
        "publicationTime": "2016-01-19T23:24:51.834000Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/hueniverse/hawk/issues/168"
          }
        ],
        "semver": {
          "vulnerable": [
            "<=3.1.2 || >= 4.0.0 <4.1.1"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (DoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "codecov.io@0.1.6",
          "request@2.42.0",
          "hawk@1.1.1"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "request@2.59.0",
          "hawk@3.1.3"
        ],
        "version": "1.1.1",
        "name": "hawk",
        "isUpgradable": false,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/hawk/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L/E:F/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-HOEK-12061"
        ],
        "creationTime": "2018-02-12T22:28:27.612000Z",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "cvssScore": 1.8,
        "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)\n- [GitHub Commit 5.0.3](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit 4.2.x](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)",
        "disclosureTime": "2018-02-12T22:28:27.612000Z",
        "id": "npm:hoek:20180212",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HOEK-12061"
          ],
          "CVE": [
            "CVE-2018-3728"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            566
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:48.587606Z",
        "moduleName": "hoek",
        "packageManager": "npm",
        "packageName": "hoek",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:1",
            "modificationTime": "2018-09-04T11:57:08.716800Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
            ],
            "version": ">=2.0.0 <3.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:0",
            "modificationTime": "2018-09-04T11:57:08.715429Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
            ],
            "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0"
          }
        ],
        "publicationTime": "2018-02-14T13:22:50.418000Z",
        "references": [
          {
            "title": "GitHub Commit 4.2.x",
            "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df"
          },
          {
            "title": "GitHub Commit 5.0.3",
            "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee"
          },
          {
            "title": "GitHub Issue - 4.2.1 Backport",
            "url": "https://github.com/hapijs/hoek/issues/230"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/hapijs/hoek/pull/227"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/310439"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.2.1 || >=5.0.0 <5.0.3"
          ]
        },
        "severity": "low",
        "title": "Prototype Pollution",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "codecov.io@0.1.6",
          "request@2.42.0",
          "hawk@1.1.1",
          "hoek@0.9.1"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "request@2.82.0",
          "hawk@6.0.2",
          "hoek@4.2.1"
        ],
        "version": "0.9.1",
        "name": "hoek",
        "isUpgradable": false,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/hoek/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L/E:F/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-HOEK-12061"
        ],
        "creationTime": "2018-02-12T22:28:27.612000Z",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "cvssScore": 1.8,
        "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)\n- [GitHub Commit 5.0.3](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit 4.2.x](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)",
        "disclosureTime": "2018-02-12T22:28:27.612000Z",
        "id": "npm:hoek:20180212",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HOEK-12061"
          ],
          "CVE": [
            "CVE-2018-3728"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            566
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:48.587606Z",
        "moduleName": "hoek",
        "packageManager": "npm",
        "packageName": "hoek",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:1",
            "modificationTime": "2018-09-04T11:57:08.716800Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
            ],
            "version": ">=2.0.0 <3.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:0",
            "modificationTime": "2018-09-04T11:57:08.715429Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
            ],
            "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0"
          }
        ],
        "publicationTime": "2018-02-14T13:22:50.418000Z",
        "references": [
          {
            "title": "GitHub Commit 4.2.x",
            "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df"
          },
          {
            "title": "GitHub Commit 5.0.3",
            "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee"
          },
          {
            "title": "GitHub Issue - 4.2.1 Backport",
            "url": "https://github.com/hapijs/hoek/issues/230"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/hapijs/hoek/pull/227"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/310439"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.2.1 || >=5.0.0 <5.0.3"
          ]
        },
        "severity": "low",
        "title": "Prototype Pollution",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "codecov.io@0.1.6",
          "request@2.42.0",
          "hawk@1.1.1",
          "boom@0.4.2",
          "hoek@0.9.1"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "request@2.82.0",
          "hawk@6.0.2",
          "boom@4.0.0",
          "hoek@4.2.1"
        ],
        "version": "0.9.1",
        "name": "hoek",
        "isUpgradable": false,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/hoek/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L/E:F/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-HOEK-12061"
        ],
        "creationTime": "2018-02-12T22:28:27.612000Z",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "cvssScore": 1.8,
        "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)\n- [GitHub Commit 5.0.3](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit 4.2.x](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)",
        "disclosureTime": "2018-02-12T22:28:27.612000Z",
        "id": "npm:hoek:20180212",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HOEK-12061"
          ],
          "CVE": [
            "CVE-2018-3728"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            566
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:48.587606Z",
        "moduleName": "hoek",
        "packageManager": "npm",
        "packageName": "hoek",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:1",
            "modificationTime": "2018-09-04T11:57:08.716800Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
            ],
            "version": ">=2.0.0 <3.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:0",
            "modificationTime": "2018-09-04T11:57:08.715429Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
            ],
            "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0"
          }
        ],
        "publicationTime": "2018-02-14T13:22:50.418000Z",
        "references": [
          {
            "title": "GitHub Commit 4.2.x",
            "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df"
          },
          {
            "title": "GitHub Commit 5.0.3",
            "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee"
          },
          {
            "title": "GitHub Issue - 4.2.1 Backport",
            "url": "https://github.com/hapijs/hoek/issues/230"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/hapijs/hoek/pull/227"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/310439"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.2.1 || >=5.0.0 <5.0.3"
          ]
        },
        "severity": "low",
        "title": "Prototype Pollution",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "codecov.io@0.1.6",
          "request@2.42.0",
          "hawk@1.1.1",
          "sntp@0.2.4",
          "hoek@0.9.1"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "request@2.82.0",
          "hawk@6.0.2",
          "sntp@2.0.1",
          "hoek@4.2.1"
        ],
        "version": "0.9.1",
        "name": "hoek",
        "isUpgradable": false,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/hoek/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L/E:F/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-HOEK-12061"
        ],
        "creationTime": "2018-02-12T22:28:27.612000Z",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "cvssScore": 1.8,
        "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)\n- [GitHub Commit 5.0.3](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit 4.2.x](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)",
        "disclosureTime": "2018-02-12T22:28:27.612000Z",
        "id": "npm:hoek:20180212",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HOEK-12061"
          ],
          "CVE": [
            "CVE-2018-3728"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            566
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:48.587606Z",
        "moduleName": "hoek",
        "packageManager": "npm",
        "packageName": "hoek",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:1",
            "modificationTime": "2018-09-04T11:57:08.716800Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
            ],
            "version": ">=2.0.0 <3.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:0",
            "modificationTime": "2018-09-04T11:57:08.715429Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
            ],
            "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0"
          }
        ],
        "publicationTime": "2018-02-14T13:22:50.418000Z",
        "references": [
          {
            "title": "GitHub Commit 4.2.x",
            "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df"
          },
          {
            "title": "GitHub Commit 5.0.3",
            "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee"
          },
          {
            "title": "GitHub Issue - 4.2.1 Backport",
            "url": "https://github.com/hapijs/hoek/issues/230"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/hapijs/hoek/pull/227"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/310439"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.2.1 || >=5.0.0 <5.0.3"
          ]
        },
        "severity": "low",
        "title": "Prototype Pollution",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "codecov.io@0.1.6",
          "request@2.42.0",
          "hawk@1.1.1",
          "cryptiles@0.2.2",
          "boom@0.4.2",
          "hoek@0.9.1"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "request@2.82.0",
          "hawk@6.0.2",
          "cryptiles@3.0.0",
          "boom@3.1.3",
          "hoek@4.2.1"
        ],
        "version": "0.9.1",
        "name": "hoek",
        "isUpgradable": false,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/hoek/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L/E:F/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-HOEK-12061"
        ],
        "creationTime": "2018-02-12T22:28:27.612000Z",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "cvssScore": 1.8,
        "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)\n- [GitHub Commit 5.0.3](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit 4.2.x](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)",
        "disclosureTime": "2018-02-12T22:28:27.612000Z",
        "id": "npm:hoek:20180212",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HOEK-12061"
          ],
          "CVE": [
            "CVE-2018-3728"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            566
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:48.587606Z",
        "moduleName": "hoek",
        "packageManager": "npm",
        "packageName": "hoek",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:1",
            "modificationTime": "2018-09-04T11:57:08.716800Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
            ],
            "version": ">=2.0.0 <3.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:0",
            "modificationTime": "2018-09-04T11:57:08.715429Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
            ],
            "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0"
          }
        ],
        "publicationTime": "2018-02-14T13:22:50.418000Z",
        "references": [
          {
            "title": "GitHub Commit 4.2.x",
            "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df"
          },
          {
            "title": "GitHub Commit 5.0.3",
            "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee"
          },
          {
            "title": "GitHub Issue - 4.2.1 Backport",
            "url": "https://github.com/hapijs/hoek/issues/230"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/hapijs/hoek/pull/227"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/310439"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.2.1 || >=5.0.0 <5.0.3"
          ]
        },
        "severity": "low",
        "title": "Prototype Pollution",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "coveralls@2.13.3",
          "request@2.79.0",
          "hawk@3.1.3",
          "hoek@2.16.3"
        ],
        "upgradePath": [
          false,
          "tap@11.1.3",
          "coveralls@3.0.0",
          "request@2.82.0",
          "hawk@6.0.2",
          "hoek@4.2.1"
        ],
        "version": "2.16.3",
        "name": "hoek",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/coveralls/node_modules/hoek/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L/E:F/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-HOEK-12061"
        ],
        "creationTime": "2018-02-12T22:28:27.612000Z",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "cvssScore": 1.8,
        "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)\n- [GitHub Commit 5.0.3](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit 4.2.x](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)",
        "disclosureTime": "2018-02-12T22:28:27.612000Z",
        "id": "npm:hoek:20180212",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HOEK-12061"
          ],
          "CVE": [
            "CVE-2018-3728"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            566
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:48.587606Z",
        "moduleName": "hoek",
        "packageManager": "npm",
        "packageName": "hoek",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:1",
            "modificationTime": "2018-09-04T11:57:08.716800Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
            ],
            "version": ">=2.0.0 <3.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:0",
            "modificationTime": "2018-09-04T11:57:08.715429Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
            ],
            "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0"
          }
        ],
        "publicationTime": "2018-02-14T13:22:50.418000Z",
        "references": [
          {
            "title": "GitHub Commit 4.2.x",
            "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df"
          },
          {
            "title": "GitHub Commit 5.0.3",
            "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee"
          },
          {
            "title": "GitHub Issue - 4.2.1 Backport",
            "url": "https://github.com/hapijs/hoek/issues/230"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/hapijs/hoek/pull/227"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/310439"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.2.1 || >=5.0.0 <5.0.3"
          ]
        },
        "severity": "low",
        "title": "Prototype Pollution",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "coveralls@2.13.3",
          "request@2.79.0",
          "hawk@3.1.3",
          "boom@2.10.1",
          "hoek@2.16.3"
        ],
        "upgradePath": [
          false,
          "tap@11.1.3",
          "coveralls@3.0.0",
          "request@2.82.0",
          "hawk@6.0.2",
          "boom@4.0.0",
          "hoek@4.2.1"
        ],
        "version": "2.16.3",
        "name": "hoek",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/coveralls/node_modules/hoek/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L/E:F/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-HOEK-12061"
        ],
        "creationTime": "2018-02-12T22:28:27.612000Z",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "cvssScore": 1.8,
        "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)\n- [GitHub Commit 5.0.3](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit 4.2.x](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)",
        "disclosureTime": "2018-02-12T22:28:27.612000Z",
        "id": "npm:hoek:20180212",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HOEK-12061"
          ],
          "CVE": [
            "CVE-2018-3728"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            566
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:48.587606Z",
        "moduleName": "hoek",
        "packageManager": "npm",
        "packageName": "hoek",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:1",
            "modificationTime": "2018-09-04T11:57:08.716800Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
            ],
            "version": ">=2.0.0 <3.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:0",
            "modificationTime": "2018-09-04T11:57:08.715429Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
            ],
            "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0"
          }
        ],
        "publicationTime": "2018-02-14T13:22:50.418000Z",
        "references": [
          {
            "title": "GitHub Commit 4.2.x",
            "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df"
          },
          {
            "title": "GitHub Commit 5.0.3",
            "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee"
          },
          {
            "title": "GitHub Issue - 4.2.1 Backport",
            "url": "https://github.com/hapijs/hoek/issues/230"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/hapijs/hoek/pull/227"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/310439"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.2.1 || >=5.0.0 <5.0.3"
          ]
        },
        "severity": "low",
        "title": "Prototype Pollution",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "coveralls@2.13.3",
          "request@2.79.0",
          "hawk@3.1.3",
          "sntp@1.0.9",
          "hoek@2.16.3"
        ],
        "upgradePath": [
          false,
          "tap@11.1.3",
          "coveralls@3.0.0",
          "request@2.82.0",
          "hawk@6.0.2",
          "sntp@2.0.1",
          "hoek@4.2.1"
        ],
        "version": "2.16.3",
        "name": "hoek",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/coveralls/node_modules/hoek/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L/E:F/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-HOEK-12061"
        ],
        "creationTime": "2018-02-12T22:28:27.612000Z",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "cvssScore": 1.8,
        "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)\n- [GitHub Commit 5.0.3](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit 4.2.x](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)",
        "disclosureTime": "2018-02-12T22:28:27.612000Z",
        "id": "npm:hoek:20180212",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HOEK-12061"
          ],
          "CVE": [
            "CVE-2018-3728"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            566
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:48.587606Z",
        "moduleName": "hoek",
        "packageManager": "npm",
        "packageName": "hoek",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:1",
            "modificationTime": "2018-09-04T11:57:08.716800Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
            ],
            "version": ">=2.0.0 <3.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:0",
            "modificationTime": "2018-09-04T11:57:08.715429Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
            ],
            "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0"
          }
        ],
        "publicationTime": "2018-02-14T13:22:50.418000Z",
        "references": [
          {
            "title": "GitHub Commit 4.2.x",
            "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df"
          },
          {
            "title": "GitHub Commit 5.0.3",
            "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee"
          },
          {
            "title": "GitHub Issue - 4.2.1 Backport",
            "url": "https://github.com/hapijs/hoek/issues/230"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/hapijs/hoek/pull/227"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/310439"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.2.1 || >=5.0.0 <5.0.3"
          ]
        },
        "severity": "low",
        "title": "Prototype Pollution",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "coveralls@2.13.3",
          "request@2.79.0",
          "hawk@3.1.3",
          "cryptiles@2.0.5",
          "boom@2.10.1",
          "hoek@2.16.3"
        ],
        "upgradePath": [
          false,
          "tap@11.1.3",
          "coveralls@3.0.0",
          "request@2.82.0",
          "hawk@6.0.2",
          "cryptiles@3.0.0",
          "boom@3.1.3",
          "hoek@4.2.1"
        ],
        "version": "2.16.3",
        "name": "hoek",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/coveralls/node_modules/hoek/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "alternativeIds": [
          "SNYK-JS-HTTPSIGNATURE-10664"
        ],
        "creationTime": "2017-06-28T13:07:29.691000Z",
        "credit": [
          "Alok Menghrajani"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[`http-signature`](https://www.npmjs.com/package/http-signature) is a reference implementation of Joyent's HTTP Signature scheme.\n\nAffected versions of the package are vulnerable to Timing Attacks due to time-variable comparison of signatures. \n\nThe library implemented a character to character comparison, similar to the built-in string comparison mechanism, `===`, and not a time constant string comparison. As a result, the comparison will fail faster when the first characters in the signature are incorrect.\nAn attacker can use this difference to perform a timing attack, essentially allowing them to guess the signature one character at a time.\n\nYou can read more about timing attacks in Node.js on the [Snyk blog](https://snyk.io/blog/node-js-timing-attack-ccc-ctf/).\n\n## Remediation\nUpgrade `http-signature` to version 1.0.0 or higher.\n\n## References\n- [Github PR](https://github.com/joyent/node-http-signature/pull/36)\n- [Github Commit](https://github.com/joyent/node-http-signature/commit/78ab1da232f31f695f5c362d863593a143aa8b56)\n",
        "disclosureTime": "2015-01-21T22:00:00Z",
        "id": "npm:http-signature:20150122",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HTTPSIGNATURE-10664"
          ],
          "CVE": [],
          "CWE": [
            "CWE-310"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:46.778590Z",
        "moduleName": "http-signature",
        "packageManager": "npm",
        "packageName": "http-signature",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:http-signature:20150122:0",
            "modificationTime": "2018-09-04T11:57:08.698188Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/http-signature/20150122/20150122_0_0_http-signature_78ab1da232f31f695f5c362d863593a143aa8b56.patch"
            ],
            "version": "=0.10.1"
          }
        ],
        "publicationTime": "2017-06-28T13:07:29.691000Z",
        "references": [
          {
            "title": "Github Commit",
            "url": "https://github.com/joyent/node-http-signature/commit/78ab1da232f31f695f5c362d863593a143aa8b56"
          },
          {
            "title": "Github PR",
            "url": "https://github.com/joyent/node-http-signature/pull/36"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.0.0"
          ]
        },
        "severity": "medium",
        "title": "Timing Attack",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "codecov.io@0.1.6",
          "request@2.42.0",
          "http-signature@0.10.1"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "request@2.66.0",
          "http-signature@1.0.2"
        ],
        "version": "0.10.1",
        "name": "http-signature",
        "isUpgradable": false,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/http-signature/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "alternativeIds": [
          "SNYK-JS-JQUERY-10186"
        ],
        "creationTime": "2016-11-06T15:12:44.538000Z",
        "credit": [
          "Egor Homakov"
        ],
        "cvssScore": 5.4,
        "description": "## Overview\n[`jquery`](https://www.npmjs.com/package/jquery) is JavaScript library for DOM operations.\n\nAffected versions of the package are vulnerable to Cross-site Scripting (XSS) attacks when a cross-domain ajax request is performed without the `dataType` option causing `text/javascript` responses to be executed.\n\n## Details\nCross-Site Scripting (XSS) attacks occur when an attacker tricks a user’s browser to execute malicious JavaScript code in the context of a victim’s domain. Such scripts can steal the user’s session cookies for the domain, scrape or modify its content, and perform or modify actions on the user’s behalf, actions typically blocked by the browser’s Same Origin Policy.\n\nThese attacks are possible by escaping the context of the web application and injecting malicious scripts in an otherwise trusted website. These scripts can introduce additional attributes (say, a \"new\" option in a dropdown list or a new link to a malicious site) and can potentially execute code on the clients side, unbeknown to the victim. This occurs when characters like `<` `>` `\"` `'` are not escaped properly.\n\nThere are a few types of XSS:\n- **Persistent XSS** is an attack in which the malicious code persists into the web app’s database.\n- **Reflected XSS** is an which the website echoes back a portion of the request. The attacker needs to trick the user into clicking a malicious link (for instance through a phishing email or malicious JS on another page), which triggers the XSS attack.\n- **DOM-based XSS** is an that occurs purely in the browser when client-side JavaScript echoes back a portion of the URL onto the page. DOM-Based XSS is notoriously hard to detect, as the server never gets a chance to see the attack taking place.\n\n\n## Remediation\nUpgrade `jquery` to version `3.0.0` or higher.\n\n## References\n- [GitHub Issue](https://github.com/jquery/jquery/issues/2432)\n- [GitHub PR](https://github.com/jquery/jquery/pull/2588)\n- [GitHub Commit 3.0.0](https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2)\n- [GitHub Commit 1.12](https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc)\n",
        "disclosureTime": "2015-06-26T21:00:00Z",
        "id": "npm:jquery:20150627",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-JQUERY-10186"
          ],
          "CVE": [
            "CVE-2017-16012",
            "CVE-2015-9251"
          ],
          "CWE": [
            "CWE-79"
          ],
          "NSP": [
            328
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.818193Z",
        "moduleName": "jquery",
        "packageManager": "npm",
        "packageName": "jquery",
        "patches": [],
        "publicationTime": "2016-11-27T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit 1.12",
            "url": "https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc"
          },
          {
            "title": "GitHub Commit 3.0.0",
            "url": "https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jquery/jquery/pull/2588"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/jquery/jquery/issues/2432"
          }
        ],
        "semver": {
          "vulnerable": [
            "<3.0.0-beta1 >1.12.3 || <1.12.0 >=1.4.0"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "goof@0.0.3",
          "jquery@2.2.4"
        ],
        "upgradePath": [
          false,
          "jquery@3.0.0"
        ],
        "version": "2.2.4",
        "name": "jquery",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/jquery/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
        "alternativeIds": [
          "SNYK-JS-MARKED-10099"
        ],
        "creationTime": "2016-04-20T14:45:19.556000Z",
        "credit": [
          "Matt Austin"
        ],
        "cvssScore": 8.8,
        "description": "## Overview\n[`marked`](https://www.npmjs.com/package/marked) is a markdown parser and compiler used for rendering markdown content to html. \n\nIt is vulnerable to content injection attack allowing the attacker to bypass its output sanitization (`sanitize: true`) protection. Using the [HTML Coded Character Set](https://www.w3.org/MarkUp/html-spec/html-spec_13.html#SEC13), attackers can inject `javascript:` code snippets into the output. For example, the following input `javascript&#x58document;alert&#40;1&#41;`  will result in `alert(1)` being executed when the user clicks on the link.\n\n## Details\nCross-Site Scripting (XSS) attacks occur when an attacker tricks a user’s browser to execute malicious JavaScript code in the context of a victim’s domain. Such scripts can steal the user’s session cookies for the domain, scrape or modify its content, and perform or modify actions on the user’s behalf, actions typically blocked by the browser’s Same Origin Policy.\n\nThese attacks are possible by escaping the context of the web application and injecting malicious scripts in an otherwise trusted website. These scripts can introduce additional attributes (say, a \"new\" option in a dropdown list or a new link to a malicious site) and can potentially execute code on the clients side, unbeknown to the victim. This occurs when characters like `<` `>` `\"` `'` are not escaped properly.\n\nThere are a few types of XSS:\n- **Persistent XSS** is an attack in which the malicious code persists into the web app’s database.\n- **Reflected XSS** is an which the website echoes back a portion of the request. The attacker needs to trick the user into clicking a malicious link (for instance through a phishing email or malicious JS on another page), which triggers the XSS attack.\n- **DOM-based XSS** is an that occurs purely in the browser when client-side JavaScript echoes back a portion of the URL onto the page. DOM-Based XSS is notoriously hard to detect, as the server never gets a chance to see the attack taking place.\n\n\n## Remediation\nUpgrade `marked` to version 0.3.6 or higher.\nAlso, you can patch the vulnerability using [Snyk wizard](https://snyk.io/docs/using-snyk/#wizard).\n\n## References\n- [GitHub PR](https://github.com/chjj/marked/pull/592)\n- [GitHub Commit](https://github.com/chjj/marked/pull/592/commits/2cff85979be8e7a026a9aca35542c470cf5da523)\n",
        "disclosureTime": "2015-05-20T16:45:00Z",
        "id": "npm:marked:20150520",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MARKED-10099"
          ],
          "CVE": [
            "CVE-2016-10531"
          ],
          "CWE": [
            "CWE-79"
          ],
          "NSP": [
            101
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.453542Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [
          {
            "comments": [
              "includes 20140131-1, 20140131-2"
            ],
            "id": "patch:npm:marked:20150520:2",
            "modificationTime": "2018-09-04T11:57:08.649360Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/marked/20150520/marked_20150520_0_2_2cff85979be8e7a026a9aca35542c470cf5da523_20140131-1-2.patch"
            ],
            "version": "<=0.3.2 >0.3.0"
          },
          {
            "comments": [
              "includes 20140131-1"
            ],
            "id": "patch:npm:marked:20150520:1",
            "modificationTime": "2018-09-04T11:57:08.648109Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/marked/20150520/marked_20150520_0_1_2cff85979be8e7a026a9aca35542c470cf5da523_20140131-1.patch"
            ],
            "version": "=0.3.3"
          },
          {
            "comments": [],
            "id": "patch:npm:marked:20150520:0",
            "modificationTime": "2018-09-04T11:57:08.646871Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/marked/20150520/marked_20150520_0_0_2cff85979be8e7a026a9aca35542c470cf5da523.patch"
            ],
            "version": "<=0.3.5 >0.3.3"
          }
        ],
        "publicationTime": "2016-04-20T14:45:19.556000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/chjj/marked/pull/592/commits/2cff85979be8e7a026a9aca35542c470cf5da523"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/chjj/marked/pull/592"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.3.6"
          ]
        },
        "severity": "high",
        "title": "Content & Code Injection (XSS)",
        "from": [
          "goof@0.0.3",
          "marked@0.3.5"
        ],
        "upgradePath": [
          false,
          "marked@0.3.6"
        ],
        "version": "0.3.5",
        "name": "marked",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/marked/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [
          "SNYK-JS-MARKED-10377"
        ],
        "creationTime": "2017-01-12T00:00:00.780000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`marked`](https://www.npmjs.com/package/marked) is a markdown parser and compiler used for rendering markdown content to html.\n\nAffected versions of the package are vulnerable to Cross-site Scripting (XSS). Data URIs enable embedding small files in line in HTML documents, provided in the URL itself.\nAttackers can craft malicious web pages containing either HTML or script code that utilizes the data URI scheme, allowing them to bypass access controls or steal sensitive information.\n\nAn example of data URI used to deliver javascript code. The data holds `<script>alert('XSS')</script>` tag in base64 encoded format.\n```html\n[xss link](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)\n``` \n\n## Details\nCross-Site Scripting (XSS) attacks occur when an attacker tricks a user’s browser to execute malicious JavaScript code in the context of a victim’s domain. Such scripts can steal the user’s session cookies for the domain, scrape or modify its content, and perform or modify actions on the user’s behalf, actions typically blocked by the browser’s Same Origin Policy.\n\nThese attacks are possible by escaping the context of the web application and injecting malicious scripts in an otherwise trusted website. These scripts can introduce additional attributes (say, a \"new\" option in a dropdown list or a new link to a malicious site) and can potentially execute code on the clients side, unbeknown to the victim. This occurs when characters like `<` `>` `\"` `'` are not escaped properly.\n\nThere are a few types of XSS:\n- **Persistent XSS** is an attack in which the malicious code persists into the web app’s database.\n- **Reflected XSS** is an which the website echoes back a portion of the request. The attacker needs to trick the user into clicking a malicious link (for instance through a phishing email or malicious JS on another page), which triggers the XSS attack.\n- **DOM-based XSS** is an that occurs purely in the browser when client-side JavaScript echoes back a portion of the URL onto the page. DOM-Based XSS is notoriously hard to detect, as the server never gets a chance to see the attack taking place.\n\n\n## Remediation\nUpgrade `marked` to version 0.3.7 or higher.\nAlso, you can patch the vulnerability using [Snyk wizard](https://snyk.io/docs/using-snyk/#wizard).\n\n## References\n- [GitHub Commit](https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51)\n",
        "disclosureTime": "2017-01-12T00:00:00.780000Z",
        "id": "npm:marked:20170112",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MARKED-10377"
          ],
          "CVE": [
            "CVE-2017-1000427"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:45.611945Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:marked:20170112:0",
            "modificationTime": "2018-09-04T11:57:08.681124Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/marked/20170112/marked_20170112_0_0_cd2f6f5b7091154c5526e79b5f3bfb4d15995a51.patch"
            ],
            "version": "<=0.3.6 >0.3.3"
          }
        ],
        "publicationTime": "2017-01-30T18:00:00.780000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.3.7"
          ]
        },
        "severity": "high",
        "title": "Cross-site Scripting (XSS) via Data URIs",
        "from": [
          "goof@0.0.3",
          "marked@0.3.5"
        ],
        "upgradePath": [
          false,
          "marked@0.3.7"
        ],
        "version": "0.3.5",
        "name": "marked",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/marked/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [
          "SNYK-JS-MARKED-10849"
        ],
        "creationTime": "2017-12-04T00:00:00.780000Z",
        "credit": [
          "Andrew Krasichkov"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`marked`](https://www.npmjs.com/package/marked) is a markdown parser and compiler used for rendering markdown content to html.\n\nAffected versions of the package are vulnerable to Cross-site Scripting (XSS) attacks.\n\n## Details\nBrowsers support both lowercase and uppercase x in hexadecimal form of HTML character entity, but marked [unescaped only lowercase](https://github.com/chjj/marked/blob/v0.3.7/lib/marked.js#L1096-L1108).\n\nThis may allow an attacker to create a link with javascript code.\n\nFor example:\n```js\nvar marked = require('marked');\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  sanitize: true\n});\n\ntext = `\nlower[click me](javascript&#x3a;...)lower\nupper[click me](javascript&#X3a;...)upper\n`;\n\nconsole.log(marked(text));\n```\n\nwill render the following:\n\n```html\n<p>lowerlower\nupper<a href=\"javascript&#X3a;...\">click me</a>upper</p>\n\n```\n\n## Details\nCross-Site Scripting (XSS) attacks occur when an attacker tricks a user’s browser to execute malicious JavaScript code in the context of a victim’s domain. Such scripts can steal the user’s session cookies for the domain, scrape or modify its content, and perform or modify actions on the user’s behalf, actions typically blocked by the browser’s Same Origin Policy.\n\nThese attacks are possible by escaping the context of the web application and injecting malicious scripts in an otherwise trusted website. These scripts can introduce additional attributes (say, a \"new\" option in a dropdown list or a new link to a malicious site) and can potentially execute code on the clients side, unbeknown to the victim. This occurs when characters like `<` `>` `\"` `'` are not escaped properly.\n\nThere are a few types of XSS:\n- **Persistent XSS** is an attack in which the malicious code persists into the web app’s database.\n- **Reflected XSS** is an which the website echoes back a portion of the request. The attacker needs to trick the user into clicking a malicious link (for instance through a phishing email or malicious JS on another page), which triggers the XSS attack.\n- **DOM-based XSS** is an that occurs purely in the browser when client-side JavaScript echoes back a portion of the URL onto the page. DOM-Based XSS is notoriously hard to detect, as the server never gets a chance to see the attack taking place.\n\n\n## Remediation\nUpgrade `marked` to version 0.3.9 or higher.\n\n## References\n- [GitHub Issue](https://github.com/chjj/marked/issues/925)\n- [GitHub Issue - Release 0.3.9 status](https://github.com/chjj/marked/pull/958)\n",
        "disclosureTime": "2017-08-15T00:00:00.780000Z",
        "id": "npm:marked:20170815",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MARKED-10849"
          ],
          "CVE": [],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.444533Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [],
        "publicationTime": "2017-12-25T15:00:00.780000Z",
        "references": [
          {
            "title": "GitHub Issue - Release 0.3.9 status",
            "url": "https://github.com/chjj/marked/pull/958"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/chjj/marked/issues/925"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.3.9"
          ]
        },
        "severity": "high",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "goof@0.0.3",
          "marked@0.3.5"
        ],
        "upgradePath": [
          false,
          "marked@0.3.9"
        ],
        "version": "0.3.5",
        "name": "marked",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/marked/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "alternativeIds": [
          "SNYK-JS-MARKED-10850"
        ],
        "creationTime": "2017-12-04T00:00:00.780000Z",
        "credit": [
          "Andrew Krasichkov"
        ],
        "cvssScore": 4.8,
        "description": "## Overview\n[`marked`](https://www.npmjs.com/package/marked) is a markdown parser and compiler used for rendering markdown content to html.\n\nAffected versions of the package are vulnerable to Cross-site Scripting (XSS) attacks.\n\n## Details\nWhen mangling is disabled via option `mangle`, marked doesn't escape target `href`. This may allow an attacker to inject arbitrary `html-event` into resulting a tag.\n\nFor example:\n```js\nvar marked = require('marked');\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  sanitize: true,\n  mangle: false\n});\n\ntext = `\n<bar\"onclick=\"alert('XSS')\"@foo>\n`;\n\nconsole.log(marked(text));\n```\n\nwill render:\n\n```html\n<p><a href=\"mailto:bar\"onclick=\"alert('XSS')\"@foo\">bar\"onclick=\"alert('XSS')\"@foo</a></p>\n```\n\n## Details\nCross-Site Scripting (XSS) attacks occur when an attacker tricks a user’s browser to execute malicious JavaScript code in the context of a victim’s domain. Such scripts can steal the user’s session cookies for the domain, scrape or modify its content, and perform or modify actions on the user’s behalf, actions typically blocked by the browser’s Same Origin Policy.\n\nThese attacks are possible by escaping the context of the web application and injecting malicious scripts in an otherwise trusted website. These scripts can introduce additional attributes (say, a \"new\" option in a dropdown list or a new link to a malicious site) and can potentially execute code on the clients side, unbeknown to the victim. This occurs when characters like `<` `>` `\"` `'` are not escaped properly.\n\nThere are a few types of XSS:\n- **Persistent XSS** is an attack in which the malicious code persists into the web app’s database.\n- **Reflected XSS** is an which the website echoes back a portion of the request. The attacker needs to trick the user into clicking a malicious link (for instance through a phishing email or malicious JS on another page), which triggers the XSS attack.\n- **DOM-based XSS** is an that occurs purely in the browser when client-side JavaScript echoes back a portion of the URL onto the page. DOM-Based XSS is notoriously hard to detect, as the server never gets a chance to see the attack taking place.\n\n\n## Remediation\nUpgrade `marked` to version 0.3.9 or higher.\n\n## References\n- [GitHub Issue](https://github.com/chjj/marked/issues/926)\n- [GitHub Issue - Release 0.3.9 status](https://github.com/chjj/marked/pull/958)\n",
        "disclosureTime": "2017-08-15T00:00:00.780000Z",
        "id": "npm:marked:20170815-1",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MARKED-10850"
          ],
          "CVE": [],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.448387Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [],
        "publicationTime": "2017-12-25T15:00:00.780000Z",
        "references": [
          {
            "title": "GitHub Issue - Release 0.3.9 status",
            "url": "https://github.com/chjj/marked/pull/958"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/chjj/marked/issues/926"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.3.9"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "goof@0.0.3",
          "marked@0.3.5"
        ],
        "upgradePath": [
          false,
          "marked@0.3.9"
        ],
        "version": "0.3.5",
        "name": "marked",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/marked/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-MARKED-10782"
        ],
        "creationTime": "2017-09-21T08:07:51.834000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`marked`](https://www.npmjs.com/package/marked) is a full-featured markdown parser and compiler.\n\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks when parsing the input markdown content (1,000 characters costs around 6 seconds matching time).\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `marked` to version 0.3.9 or higher.\nIn the meantime, you can patch the vulnerability using [Snyk wizard](https://snyk.io/docs/using-snyk/#wizard).\n\n## References\n- [Github Issue](https://github.com/chjj/marked/issues/937)\n- [GitHub Issue - Release 0.3.9 status](https://github.com/chjj/marked/pull/958)\n",
        "disclosureTime": "2017-09-07T21:00:00Z",
        "id": "npm:marked:20170907",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MARKED-10782"
          ],
          "CVE": [
            "CVE-2017-16114"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            531
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.216051Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:marked:20170907:0",
            "modificationTime": "2018-09-04T11:57:08.710056Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/marked/20170907/marked_20170907_0_0_4afb8ce135a1e020e48f7084340333dd0c18229f.patch"
            ],
            "version": "<=0.3.6 >0.3.3"
          }
        ],
        "publicationTime": "2017-09-21T08:07:51.834000Z",
        "references": [
          {
            "title": "GitHub Issue - Release 0.3.9 status",
            "url": "https://github.com/chjj/marked/pull/958"
          },
          {
            "title": "Github Issue",
            "url": "https://github.com/chjj/marked/issues/937"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.3.9"
          ]
        },
        "severity": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "marked@0.3.5"
        ],
        "upgradePath": [
          false,
          "marked@0.3.9"
        ],
        "version": "0.3.5",
        "name": "marked",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/marked/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-MARKED-10990"
        ],
        "creationTime": "2018-02-27T15:06:27.571000Z",
        "credit": [
          "Jamie Davis"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`marked`](https://www.npmjs.com/package/marked) is a markdown parser built for speed\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 150 characters long.\n\n## Disclosure Timeline\n* Feb 21th, 2018 - Initial Disclosure to package owner\n* Feb 21th, 2018 - Initial Response from package owner\n* Feb 26th, 2018 - Fix issued\n* Feb 27th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade marked to version 0.3.17 or higher\n\n## References\n- [GitHub PR](https://github.com/markedjs/marked/pull/1083)\n- [GitHub Commit](https://github.com/markedjs/marked/pull/1083)",
        "disclosureTime": "2018-02-27T15:06:27.571000Z",
        "id": "npm:marked:20180225",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MARKED-10990"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400",
            "CWE-185"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.987071Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [],
        "publicationTime": "2018-02-27T16:32:24.984000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/markedjs/marked/pull/1083"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/markedjs/marked/pull/1083"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.3.17"
          ]
        },
        "severity": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "marked@0.3.5"
        ],
        "upgradePath": [
          false,
          "marked@0.3.17"
        ],
        "version": "0.3.5",
        "name": "marked",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/marked/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MIME-10788"
        ],
        "creationTime": "2017-09-26T05:48:40.307000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[`mime`](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Many Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size), allowing an attacker to exploit this and can cause the program to enter these extreme situations by using a specially crafted input and cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `mime` to versions 1.4.1, 2.0.3 or higher.\n\n## References\n- [Github Issue](https://github.com/broofa/node-mime/issues/167)\n- [Github Commit 1.x](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [Github Commit 2.0.x](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n",
        "disclosureTime": "2017-09-07T21:00:00Z",
        "id": "npm:mime:20170907",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MIME-10788"
          ],
          "CVE": [
            "CVE-2017-16138"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            535
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.233414Z",
        "moduleName": "mime",
        "packageManager": "npm",
        "packageName": "mime",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:mime:20170907:0",
            "modificationTime": "2018-09-04T11:57:08.711550Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
            ],
            "version": "=1.2.11 || =1.3.4"
          }
        ],
        "publicationTime": "2017-09-27T05:48:40.307000Z",
        "references": [
          {
            "title": "Github Commit 2.0.x",
            "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0"
          },
          {
            "title": "Github Commit 1.x",
            "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d"
          },
          {
            "title": "Github Issue",
            "url": "https://github.com/broofa/node-mime/issues/167"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.4.1 || >=2.0.0 <2.0.3"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "send@0.12.3",
          "mime@1.3.4"
        ],
        "upgradePath": [
          false,
          "express@4.16.0",
          "send@0.16.0",
          "mime@1.4.1"
        ],
        "version": "1.3.4",
        "name": "mime",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/mime/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MIME-10788"
        ],
        "creationTime": "2017-09-26T05:48:40.307000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[`mime`](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Many Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size), allowing an attacker to exploit this and can cause the program to enter these extreme situations by using a specially crafted input and cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `mime` to versions 1.4.1, 2.0.3 or higher.\n\n## References\n- [Github Issue](https://github.com/broofa/node-mime/issues/167)\n- [Github Commit 1.x](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [Github Commit 2.0.x](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n",
        "disclosureTime": "2017-09-07T21:00:00Z",
        "id": "npm:mime:20170907",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MIME-10788"
          ],
          "CVE": [
            "CVE-2017-16138"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            535
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.233414Z",
        "moduleName": "mime",
        "packageManager": "npm",
        "packageName": "mime",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:mime:20170907:0",
            "modificationTime": "2018-09-04T11:57:08.711550Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
            ],
            "version": "=1.2.11 || =1.3.4"
          }
        ],
        "publicationTime": "2017-09-27T05:48:40.307000Z",
        "references": [
          {
            "title": "Github Commit 2.0.x",
            "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0"
          },
          {
            "title": "Github Commit 1.x",
            "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d"
          },
          {
            "title": "Github Issue",
            "url": "https://github.com/broofa/node-mime/issues/167"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.4.1 || >=2.0.0 <2.0.3"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "serve-static@1.9.3",
          "send@0.12.3",
          "mime@1.3.4"
        ],
        "upgradePath": [
          false,
          "express@4.16.0",
          "serve-static@1.13.0",
          "send@0.16.0",
          "mime@1.4.1"
        ],
        "version": "1.3.4",
        "name": "mime",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/mime/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MIME-10788"
        ],
        "creationTime": "2017-09-26T05:48:40.307000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[`mime`](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Many Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size), allowing an attacker to exploit this and can cause the program to enter these extreme situations by using a specially crafted input and cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `mime` to versions 1.4.1, 2.0.3 or higher.\n\n## References\n- [Github Issue](https://github.com/broofa/node-mime/issues/167)\n- [Github Commit 1.x](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [Github Commit 2.0.x](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n",
        "disclosureTime": "2017-09-07T21:00:00Z",
        "id": "npm:mime:20170907",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MIME-10788"
          ],
          "CVE": [
            "CVE-2017-16138"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            535
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.233414Z",
        "moduleName": "mime",
        "packageManager": "npm",
        "packageName": "mime",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:mime:20170907:0",
            "modificationTime": "2018-09-04T11:57:08.711550Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
            ],
            "version": "=1.2.11 || =1.3.4"
          }
        ],
        "publicationTime": "2017-09-27T05:48:40.307000Z",
        "references": [
          {
            "title": "Github Commit 2.0.x",
            "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0"
          },
          {
            "title": "Github Commit 1.x",
            "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d"
          },
          {
            "title": "Github Issue",
            "url": "https://github.com/broofa/node-mime/issues/167"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.4.1 || >=2.0.0 <2.0.3"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "st@0.2.4",
          "mime@1.2.11"
        ],
        "upgradePath": [
          false,
          "st@1.2.1",
          "mime@1.4.1"
        ],
        "version": "1.2.11",
        "name": "mime",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/st/node_modules/mime/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MIME-10788"
        ],
        "creationTime": "2017-09-26T05:48:40.307000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[`mime`](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Many Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size), allowing an attacker to exploit this and can cause the program to enter these extreme situations by using a specially crafted input and cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `mime` to versions 1.4.1, 2.0.3 or higher.\n\n## References\n- [Github Issue](https://github.com/broofa/node-mime/issues/167)\n- [Github Commit 1.x](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [Github Commit 2.0.x](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n",
        "disclosureTime": "2017-09-07T21:00:00Z",
        "id": "npm:mime:20170907",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MIME-10788"
          ],
          "CVE": [
            "CVE-2017-16138"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            535
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.233414Z",
        "moduleName": "mime",
        "packageManager": "npm",
        "packageName": "mime",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:mime:20170907:0",
            "modificationTime": "2018-09-04T11:57:08.711550Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
            ],
            "version": "=1.2.11 || =1.3.4"
          }
        ],
        "publicationTime": "2017-09-27T05:48:40.307000Z",
        "references": [
          {
            "title": "Github Commit 2.0.x",
            "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0"
          },
          {
            "title": "Github Commit 1.x",
            "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d"
          },
          {
            "title": "Github Issue",
            "url": "https://github.com/broofa/node-mime/issues/167"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.4.1 || >=2.0.0 <2.0.3"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "codecov.io@0.1.6",
          "request@2.42.0",
          "form-data@0.1.4",
          "mime@1.2.11"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "request@2.50.0",
          "form-data@0.2.0"
        ],
        "version": "1.2.11",
        "name": "mime",
        "isUpgradable": false,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/form-data/node_modules/mime/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-MINIMATCH-10105"
        ],
        "creationTime": "2016-06-20T16:00:06.484000Z",
        "credit": [
          "Nick Starke"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`minimatch`](https://www.npmjs.com/package/minimatch) is a minimalistic matching library used for converting glob expressions into JavaScript RegExp objects.\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack.  Many Regular Expression implementations may reach edge cases that causes them to work very slowly (exponentially related to input size), allowing an attacker to exploit this and can cause the program to enter these extreme situations by using a specially crafted input and cause the service to excessively consume CPU, resulting in a Denial of Service.\n\nAn attacker can provide a long value to the `minimatch` function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Remediation\nUpgrade `minimatch` to version `3.0.2` or greater.\n\n## References\n- https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n- https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955\n",
        "disclosureTime": "2016-06-20T15:52:52Z",
        "id": "npm:minimatch:20160620",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MINIMATCH-10105"
          ],
          "CVE": [
            "CVE-2016-10540"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            118
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.478688Z",
        "moduleName": "minimatch",
        "packageManager": "npm",
        "packageName": "minimatch",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:minimatch:20160620:1",
            "modificationTime": "2018-09-04T11:57:08.660271Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/minimatch/20160620/minimatch_20160620_0_1_6944abf9e0694bd22fd9dad293faa40c2bc8a955.patch"
            ],
            "version": "<=2.0.5 >0.0.5"
          },
          {
            "comments": [],
            "id": "patch:npm:minimatch:20160620:0",
            "modificationTime": "2018-09-04T11:57:08.659029Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/minimatch/20160620/minimatch_20160620_0_0_6944abf9e0694bd22fd9dad293faa40c2bc8a955.patch"
            ],
            "version": "<=3.0.1 >2.0.5"
          }
        ],
        "publicationTime": "2016-06-20T15:52:52Z",
        "references": [
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955"
          },
          {
            "title": "WWW.OWASP.ORG",
            "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
          }
        ],
        "semver": {
          "vulnerable": [
            "<=3.0.1"
          ]
        },
        "severity": "high",
        "title": "Regular Expression Denial of Service (DoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "nyc@6.6.1",
          "glob@7.0.3",
          "minimatch@3.0.0"
        ],
        "upgradePath": [
          false,
          "tap@5.8.0",
          "nyc@6.6.1",
          "glob@7.0.3",
          "minimatch@3.0.2"
        ],
        "version": "3.0.0",
        "name": "minimatch",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/nyc/node_modules/glob/node_modules/minimatch/package.json",
        "bundled": [
          "goof@0.0.3",
          "nyc@6.6.1",
          "spawn-wrap@1.2.3"
        ],
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-MINIMATCH-10105"
        ],
        "creationTime": "2016-06-20T16:00:06.484000Z",
        "credit": [
          "Nick Starke"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`minimatch`](https://www.npmjs.com/package/minimatch) is a minimalistic matching library used for converting glob expressions into JavaScript RegExp objects.\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack.  Many Regular Expression implementations may reach edge cases that causes them to work very slowly (exponentially related to input size), allowing an attacker to exploit this and can cause the program to enter these extreme situations by using a specially crafted input and cause the service to excessively consume CPU, resulting in a Denial of Service.\n\nAn attacker can provide a long value to the `minimatch` function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Remediation\nUpgrade `minimatch` to version `3.0.2` or greater.\n\n## References\n- https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n- https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955\n",
        "disclosureTime": "2016-06-20T15:52:52Z",
        "id": "npm:minimatch:20160620",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MINIMATCH-10105"
          ],
          "CVE": [
            "CVE-2016-10540"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            118
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.478688Z",
        "moduleName": "minimatch",
        "packageManager": "npm",
        "packageName": "minimatch",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:minimatch:20160620:1",
            "modificationTime": "2018-09-04T11:57:08.660271Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/minimatch/20160620/minimatch_20160620_0_1_6944abf9e0694bd22fd9dad293faa40c2bc8a955.patch"
            ],
            "version": "<=2.0.5 >0.0.5"
          },
          {
            "comments": [],
            "id": "patch:npm:minimatch:20160620:0",
            "modificationTime": "2018-09-04T11:57:08.659029Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/minimatch/20160620/minimatch_20160620_0_0_6944abf9e0694bd22fd9dad293faa40c2bc8a955.patch"
            ],
            "version": "<=3.0.1 >2.0.5"
          }
        ],
        "publicationTime": "2016-06-20T15:52:52Z",
        "references": [
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955"
          },
          {
            "title": "WWW.OWASP.ORG",
            "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
          }
        ],
        "semver": {
          "vulnerable": [
            "<=3.0.1"
          ]
        },
        "severity": "high",
        "title": "Regular Expression Denial of Service (DoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "nyc@6.6.1",
          "rimraf@2.5.2",
          "glob@7.0.3",
          "minimatch@3.0.0"
        ],
        "upgradePath": [
          false,
          "tap@5.8.0",
          "nyc@6.6.1",
          "rimraf@2.5.2",
          "glob@7.0.3",
          "minimatch@3.0.2"
        ],
        "version": "3.0.0",
        "name": "minimatch",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/nyc/node_modules/glob/node_modules/minimatch/package.json",
        "bundled": [
          "goof@0.0.3",
          "nyc@6.6.1",
          "spawn-wrap@1.2.3"
        ],
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-MINIMATCH-10105"
        ],
        "creationTime": "2016-06-20T16:00:06.484000Z",
        "credit": [
          "Nick Starke"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`minimatch`](https://www.npmjs.com/package/minimatch) is a minimalistic matching library used for converting glob expressions into JavaScript RegExp objects.\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack.  Many Regular Expression implementations may reach edge cases that causes them to work very slowly (exponentially related to input size), allowing an attacker to exploit this and can cause the program to enter these extreme situations by using a specially crafted input and cause the service to excessively consume CPU, resulting in a Denial of Service.\n\nAn attacker can provide a long value to the `minimatch` function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Remediation\nUpgrade `minimatch` to version `3.0.2` or greater.\n\n## References\n- https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n- https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955\n",
        "disclosureTime": "2016-06-20T15:52:52Z",
        "id": "npm:minimatch:20160620",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MINIMATCH-10105"
          ],
          "CVE": [
            "CVE-2016-10540"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            118
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.478688Z",
        "moduleName": "minimatch",
        "packageManager": "npm",
        "packageName": "minimatch",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:minimatch:20160620:1",
            "modificationTime": "2018-09-04T11:57:08.660271Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/minimatch/20160620/minimatch_20160620_0_1_6944abf9e0694bd22fd9dad293faa40c2bc8a955.patch"
            ],
            "version": "<=2.0.5 >0.0.5"
          },
          {
            "comments": [],
            "id": "patch:npm:minimatch:20160620:0",
            "modificationTime": "2018-09-04T11:57:08.659029Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/minimatch/20160620/minimatch_20160620_0_0_6944abf9e0694bd22fd9dad293faa40c2bc8a955.patch"
            ],
            "version": "<=3.0.1 >2.0.5"
          }
        ],
        "publicationTime": "2016-06-20T15:52:52Z",
        "references": [
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955"
          },
          {
            "title": "WWW.OWASP.ORG",
            "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
          }
        ],
        "semver": {
          "vulnerable": [
            "<=3.0.1"
          ]
        },
        "severity": "high",
        "title": "Regular Expression Denial of Service (DoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "nyc@6.6.1",
          "spawn-wrap@1.2.3",
          "rimraf@2.5.2",
          "glob@7.0.3",
          "minimatch@3.0.0"
        ],
        "upgradePath": [
          false,
          "tap@5.8.0",
          "nyc@6.6.1",
          "spawn-wrap@1.2.3",
          "rimraf@2.5.2",
          "glob@7.0.3",
          "minimatch@3.0.2"
        ],
        "version": "3.0.0",
        "name": "minimatch",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/nyc/node_modules/glob/node_modules/minimatch/package.json",
        "bundled": [
          "goof@0.0.3",
          "nyc@6.6.1",
          "spawn-wrap@1.2.3"
        ],
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-MINIMATCH-10105"
        ],
        "creationTime": "2016-06-20T16:00:06.484000Z",
        "credit": [
          "Nick Starke"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`minimatch`](https://www.npmjs.com/package/minimatch) is a minimalistic matching library used for converting glob expressions into JavaScript RegExp objects.\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack.  Many Regular Expression implementations may reach edge cases that causes them to work very slowly (exponentially related to input size), allowing an attacker to exploit this and can cause the program to enter these extreme situations by using a specially crafted input and cause the service to excessively consume CPU, resulting in a Denial of Service.\n\nAn attacker can provide a long value to the `minimatch` function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Remediation\nUpgrade `minimatch` to version `3.0.2` or greater.\n\n## References\n- https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n- https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955\n",
        "disclosureTime": "2016-06-20T15:52:52Z",
        "id": "npm:minimatch:20160620",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MINIMATCH-10105"
          ],
          "CVE": [
            "CVE-2016-10540"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            118
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.478688Z",
        "moduleName": "minimatch",
        "packageManager": "npm",
        "packageName": "minimatch",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:minimatch:20160620:1",
            "modificationTime": "2018-09-04T11:57:08.660271Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/minimatch/20160620/minimatch_20160620_0_1_6944abf9e0694bd22fd9dad293faa40c2bc8a955.patch"
            ],
            "version": "<=2.0.5 >0.0.5"
          },
          {
            "comments": [],
            "id": "patch:npm:minimatch:20160620:0",
            "modificationTime": "2018-09-04T11:57:08.659029Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/minimatch/20160620/minimatch_20160620_0_0_6944abf9e0694bd22fd9dad293faa40c2bc8a955.patch"
            ],
            "version": "<=3.0.1 >2.0.5"
          }
        ],
        "publicationTime": "2016-06-20T15:52:52Z",
        "references": [
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955"
          },
          {
            "title": "WWW.OWASP.ORG",
            "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
          }
        ],
        "semver": {
          "vulnerable": [
            "<=3.0.1"
          ]
        },
        "severity": "high",
        "title": "Regular Expression Denial of Service (DoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "nyc@6.6.1",
          "istanbul@0.4.3",
          "fileset@0.2.1",
          "minimatch@2.0.10"
        ],
        "upgradePath": [
          false,
          "tap@5.8.0",
          "nyc@6.6.1",
          "istanbul@0.4.5"
        ],
        "version": "2.0.10",
        "name": "minimatch",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/nyc/node_modules/istanbul/node_modules/fileset/node_modules/minimatch/package.json",
        "bundled": [
          "goof@0.0.3",
          "nyc@6.6.1",
          "istanbul@0.4.3"
        ],
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-MINIMATCH-10105"
        ],
        "creationTime": "2016-06-20T16:00:06.484000Z",
        "credit": [
          "Nick Starke"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`minimatch`](https://www.npmjs.com/package/minimatch) is a minimalistic matching library used for converting glob expressions into JavaScript RegExp objects.\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack.  Many Regular Expression implementations may reach edge cases that causes them to work very slowly (exponentially related to input size), allowing an attacker to exploit this and can cause the program to enter these extreme situations by using a specially crafted input and cause the service to excessively consume CPU, resulting in a Denial of Service.\n\nAn attacker can provide a long value to the `minimatch` function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Remediation\nUpgrade `minimatch` to version `3.0.2` or greater.\n\n## References\n- https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n- https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955\n",
        "disclosureTime": "2016-06-20T15:52:52Z",
        "id": "npm:minimatch:20160620",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MINIMATCH-10105"
          ],
          "CVE": [
            "CVE-2016-10540"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            118
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.478688Z",
        "moduleName": "minimatch",
        "packageManager": "npm",
        "packageName": "minimatch",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:minimatch:20160620:1",
            "modificationTime": "2018-09-04T11:57:08.660271Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/minimatch/20160620/minimatch_20160620_0_1_6944abf9e0694bd22fd9dad293faa40c2bc8a955.patch"
            ],
            "version": "<=2.0.5 >0.0.5"
          },
          {
            "comments": [],
            "id": "patch:npm:minimatch:20160620:0",
            "modificationTime": "2018-09-04T11:57:08.659029Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/minimatch/20160620/minimatch_20160620_0_0_6944abf9e0694bd22fd9dad293faa40c2bc8a955.patch"
            ],
            "version": "<=3.0.1 >2.0.5"
          }
        ],
        "publicationTime": "2016-06-20T15:52:52Z",
        "references": [
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955"
          },
          {
            "title": "WWW.OWASP.ORG",
            "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
          }
        ],
        "semver": {
          "vulnerable": [
            "<=3.0.1"
          ]
        },
        "severity": "high",
        "title": "Regular Expression Denial of Service (DoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "nyc@6.6.1",
          "istanbul@0.4.3",
          "fileset@0.2.1",
          "glob@5.0.15",
          "minimatch@2.0.10"
        ],
        "upgradePath": [
          false,
          "tap@5.8.0",
          "nyc@6.6.1",
          "istanbul@0.4.3",
          "fileset@0.2.1",
          "glob@5.0.15",
          "minimatch@3.0.2"
        ],
        "version": "2.0.10",
        "name": "minimatch",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/nyc/node_modules/istanbul/node_modules/fileset/node_modules/minimatch/package.json",
        "bundled": [
          "goof@0.0.3",
          "nyc@6.6.1",
          "istanbul@0.4.3"
        ],
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-MOMENT-10164"
        ],
        "creationTime": "2016-10-23T06:57:59.675000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[`moment`](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of the package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks for any locale that has separate format and standalone options and `format` input can be controlled by the user.\n\nAn attacker can provide a specially crafted input to the `format` function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).\n\n## Disclosure Timeline\n- October 19th, 2016 - Reported the issue to package owner.\n- October 19th, 2016 - Issue acknowledged by package owner.\n- October 24th, 2016 - Issue fixed and version `2.15.2` released.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## References\n- [Proof of concept](https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc)\n- [Fix commit](https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9)\n",
        "disclosureTime": "2016-10-18T21:00:00Z",
        "id": "npm:moment:20161019",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MOMENT-10164"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.725320Z",
        "moduleName": "moment",
        "packageManager": "npm",
        "packageName": "moment",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:moment:20161019:1",
            "modificationTime": "2018-09-04T11:57:08.677140Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/moment/20161019/moment_20161019_0_0.patch"
            ],
            "version": "<2.14.0 >=2.12.0"
          },
          {
            "comments": [],
            "id": "patch:npm:moment:20161019:0",
            "modificationTime": "2018-09-04T11:57:08.675982Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/moment/20161019/moment_20161019_0_1.patch"
            ],
            "version": "<2.15.2 >=2.14.0"
          }
        ],
        "publicationTime": "2016-10-24T06:57:59.675000Z",
        "references": [
          {
            "title": "Fix commit",
            "url": "https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9"
          },
          {
            "title": "Proof of concept",
            "url": "https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.15.2"
          ]
        },
        "severity": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "moment@2.15.1"
        ],
        "upgradePath": [
          false,
          "moment@2.15.2"
        ],
        "version": "2.15.1",
        "name": "moment",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/moment/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MOMENT-10841"
        ],
        "creationTime": "2017-09-13T07:55:05.106000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[`moment`](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. It used a regular expression (`/[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i`) in order to parse dates specified as strings. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `moment` to version `2.19.3` or higher.\n\n## References\n- [GitHub Issue](https://github.com/moment/moment/issues/4163)\n",
        "disclosureTime": "2017-09-05T21:00:00Z",
        "id": "npm:moment:20170905",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MOMENT-10841"
          ],
          "CVE": [
            "CVE-2017-18214"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            532
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.416722Z",
        "moduleName": "moment",
        "packageManager": "npm",
        "packageName": "moment",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:moment:20170905:0",
            "modificationTime": "2018-09-04T11:57:08.712850Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/moment/20170905/moment_0_0_69ed9d44957fa6ab12b73d2ae29d286a857b80eb.patch"
            ],
            "version": "<2.19.3 >=2.16.0"
          }
        ],
        "publicationTime": "2017-11-28T14:47:22.471000Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/moment/moment/issues/4163"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.19.3"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "moment@2.15.1"
        ],
        "upgradePath": [
          false,
          "moment@2.19.3"
        ],
        "version": "2.15.1",
        "name": "moment",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/moment/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:F/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-MONGOOSE-10081"
        ],
        "creationTime": "2016-01-23T12:00:05.158000Z",
        "credit": [
          "ChALkeR"
        ],
        "cvssScore": 5.1,
        "description": "## Overview\nA potential memory disclosure vulnerability exists in mongoose.\nA `Buffer` field in a MongoDB document can be used to expose sensitive\ninformation such as code, runtime memory and user data into MongoDB.\n\n### Details\nInitializing a `Buffer` field in a document with integer `N` creates a `Buffer`\nof length `N` with non zero-ed out memory.\n**Example:**\n```\nvar x = new Buffer(100); // uninitialized Buffer of length 100\n// vs\nvar x = new Buffer('100'); // initialized Buffer with value of '100'\n```\nInitializing a MongoDB document field in such manner will dump uninitialized\nmemory into MongoDB.\nThe patch wraps `Buffer` field initialization in mongoose by converting a\n`number` value `N` to array `[N]`, initializing the `Buffer` with `N` in its\nbinary form.\n\n#### Proof of concept\n```javascript\nvar mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/bufftest');\n\n// data: Buffer is not uncommon, taken straight from the docs: http://mongoosejs.com/docs/schematypes.html\nmongoose.model('Item', new mongoose.Schema({id: String, data: Buffer}));\n\nvar Item = mongoose.model('Item');\n\nvar sample = new Item();\nsample.id = 'item1';\n\n// This will create an uninitialized buffer of size 100\nsample.data = 100;\nsample.save(function () {\n    Item.findOne(function (err, result) {\n        // Print out the data (exposed memory)\n        console.log(result.data.toString('ascii'))\n        mongoose.connection.db.dropDatabase(); // Clean up everything\n        process.exit();\n    });\n});\n```\n\n## Remediation\nUpgrade `mongoose` to version >= 3.8.39 or >= 4.3.6.\n\nIf a direct dependency update is not possible, use [`snyk wizard`](https://snyk.io/docs/using-snyk#wizard) to patch this vulnerability.\n\n## References\n- [GitHub Issue](https://github.com/Automattic/mongoose/issues/3764)\n- [Blog: Node Buffer API fix](https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md#previous-materials)\n- [Blog: Information about Buffer](https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md)\n",
        "disclosureTime": "2016-01-23T12:00:05.158000Z",
        "id": "npm:mongoose:20160116",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MONGOOSE-10081"
          ],
          "CVE": [],
          "CWE": [
            "CWE-201"
          ],
          "NSP": [
            599
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.375825Z",
        "moduleName": "mongoose",
        "packageManager": "npm",
        "packageName": "mongoose",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:mongoose:20160116:4",
            "modificationTime": "2018-09-04T11:57:08.616686Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/mongoose/20160116/20160116_0_4_mongoose_2ff7d36c5e52270211b17f3a84c8a47c6f4d8c1f.patch"
            ],
            "version": "<3.6.10 >=3.5.5"
          },
          {
            "comments": [],
            "id": "patch:npm:mongoose:20160116:3",
            "modificationTime": "2018-09-04T11:57:08.615176Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/mongoose/20160116/20160116_0_5_mongoose_2ff7d36c5e52270211b17f3a84c8a47c6f4d8c1f.patch"
            ],
            "version": "=3.6.11"
          },
          {
            "comments": [],
            "id": "patch:npm:mongoose:20160116:2",
            "modificationTime": "2018-09-04T11:57:08.613850Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/mongoose/20160116/20160116_0_3_mongoose_2ff7d36c5e52270211b17f3a84c8a47c6f4d8c1f.patch"
            ],
            "version": "<3.8.39 >=3.6.11"
          },
          {
            "comments": [],
            "id": "patch:npm:mongoose:20160116:1",
            "modificationTime": "2018-09-04T11:57:08.612546Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/mongoose/20160116/20160116_0_1_mongoose_8066b145c07984c8b7e56dbb51721c0a3d48e18a.patch"
            ],
            "version": "<4.1.2 >=4.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:mongoose:20160116:0",
            "modificationTime": "2018-09-04T11:57:08.611136Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/mongoose/20160116/20160116_0_0_mongoose_8066b145c07984c8b7e56dbb51721c0a3d48e18a.patch"
            ],
            "version": "<4.3.6 >=4.1.2"
          }
        ],
        "publicationTime": "2016-01-23T12:00:05.158000Z",
        "references": [
          {
            "title": "Blog: Information about Buffer",
            "url": "https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md"
          },
          {
            "title": "Blog: Node Buffer API fix",
            "url": "https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md#previous-materials"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/Automattic/mongoose/issues/3764"
          }
        ],
        "semver": {
          "vulnerable": [
            "<3.8.39 >=3.5.5 || <4.3.6 >=4.0.0"
          ]
        },
        "severity": "medium",
        "title": "Remote Memory Exposure",
        "from": [
          "goof@0.0.3",
          "mongoose@4.2.4"
        ],
        "upgradePath": [
          false,
          "mongoose@4.3.6"
        ],
        "version": "4.2.4",
        "name": "mongoose",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/mongoose/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MS-10064"
        ],
        "creationTime": "2015-11-06T02:09:36.187000Z",
        "credit": [
          "Adam Baldwin"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`ms`](https://www.npmjs.com/package/ms) is a tiny milisecond conversion utility.\n\nAffected versions of this package are vulnerable to a Regular expression Denial of Service (ReDoS) attack when converting a time period string (i.e. `\"2 days\"`, `\"1h\"`) into milliseconds integer. A malicious user could pas extremely long strings to `ms()`, causing the server take a long time to process, subsequently blocking the event loop for that extended period.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ms` to version 0.7.1.\n\nIf direct dependency upgrade is not possible, use [snyk wizard](https://snyk.io/docs/using-snyk#wizard) to patch this vulnerability.\n\n## References\n- [OWASP - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)\n",
        "disclosureTime": "2015-10-24T20:39:59.852000Z",
        "id": "npm:ms:20151024",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MS-10064"
          ],
          "CVE": [
            "CVE-2015-8315"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            46
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.307342Z",
        "moduleName": "ms",
        "packageManager": "npm",
        "packageName": "ms",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:ms:20151024:5",
            "modificationTime": "2018-09-04T11:57:08.591176Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20151024/ms_20151024_5_0_48701f029417faf65e6f5e0b61a3cebe5436b07b_snyk5.patch"
            ],
            "version": "=0.1.0"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20151024:4",
            "modificationTime": "2018-09-04T11:57:08.589841Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20151024/ms_20151024_4_0_48701f029417faf65e6f5e0b61a3cebe5436b07b_snyk4.patch"
            ],
            "version": "=0.2.0"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20151024:3",
            "modificationTime": "2018-09-04T11:57:08.588401Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20151024/ms_20151024_3_0_48701f029417faf65e6f5e0b61a3cebe5436b07b_snyk3.patch"
            ],
            "version": "=0.3.0"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20151024:2",
            "modificationTime": "2018-09-04T11:57:08.587123Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20151024/ms_20151024_2_0_48701f029417faf65e6f5e0b61a3cebe5436b07b_snyk2.patch"
            ],
            "version": "<0.6.0 >0.3.0"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20151024:1",
            "modificationTime": "2018-09-04T11:57:08.585851Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20151024/ms_20151024_1_0_48701f029417faf65e6f5e0b61a3cebe5436b07b_snyk.patch"
            ],
            "version": "<0.7.0 >=0.6.0"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20151024:0",
            "modificationTime": "2018-09-04T11:57:08.584568Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20151024/ms_20151024_0_0_48701f029417faf65e6f5e0b61a3cebe5436b07b.patch"
            ],
            "version": "=0.7.0"
          }
        ],
        "publicationTime": "2015-11-06T02:09:36.187000Z",
        "references": [
          {
            "title": "OWASP - ReDoS",
            "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
          }
        ],
        "semver": {
          "vulnerable": [
            "<=0.7.0"
          ]
        },
        "severity": "medium",
        "title": "Regular Expression Denial of Service (DoS)",
        "from": [
          "goof@0.0.3",
          "humanize-ms@1.0.1",
          "ms@0.6.2"
        ],
        "upgradePath": [
          false,
          "humanize-ms@1.0.2",
          "ms@0.7.1"
        ],
        "version": "0.6.2",
        "name": "ms",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/humanize-ms/node_modules/ms/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "disclosureTime": "2017-04-11T21:00:00Z",
        "id": "npm:ms:20170412",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "method": {
          "index.js": [
            {
              "name": [
                "parse"
              ],
              "semver": [
                "<2.0.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:46.135744Z",
        "moduleName": "ms",
        "packageManager": "npm",
        "packageName": "ms",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:2",
            "modificationTime": "2018-09-04T11:57:08.696913Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:1",
            "modificationTime": "2018-09-04T11:57:08.695549Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:0",
            "modificationTime": "2018-09-04T11:57:08.694191Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0"
          }
        ],
        "publicationTime": "2017-05-15T06:02:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/zeit/ms/pull/89"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "mongoose@4.2.4",
          "ms@0.7.1"
        ],
        "upgradePath": [
          false,
          "mongoose@4.10.2",
          "ms@2.0.0"
        ],
        "version": "0.7.1",
        "name": "ms",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/mongoose/node_modules/ms/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "disclosureTime": "2017-04-11T21:00:00Z",
        "id": "npm:ms:20170412",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "method": {
          "index.js": [
            {
              "name": [
                "parse"
              ],
              "semver": [
                "<2.0.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:46.135744Z",
        "moduleName": "ms",
        "packageManager": "npm",
        "packageName": "ms",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:2",
            "modificationTime": "2018-09-04T11:57:08.696913Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:1",
            "modificationTime": "2018-09-04T11:57:08.695549Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:0",
            "modificationTime": "2018-09-04T11:57:08.694191Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0"
          }
        ],
        "publicationTime": "2017-05-15T06:02:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/zeit/ms/pull/89"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "debug@2.2.0",
          "ms@0.7.1"
        ],
        "upgradePath": [
          false,
          "express@4.15.3",
          "debug@2.6.7",
          "ms@2.0.0"
        ],
        "version": "0.7.1",
        "name": "ms",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/debug/node_modules/ms/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "disclosureTime": "2017-04-11T21:00:00Z",
        "id": "npm:ms:20170412",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "method": {
          "index.js": [
            {
              "name": [
                "parse"
              ],
              "semver": [
                "<2.0.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:46.135744Z",
        "moduleName": "ms",
        "packageManager": "npm",
        "packageName": "ms",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:2",
            "modificationTime": "2018-09-04T11:57:08.696913Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:1",
            "modificationTime": "2018-09-04T11:57:08.695549Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:0",
            "modificationTime": "2018-09-04T11:57:08.694191Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0"
          }
        ],
        "publicationTime": "2017-05-15T06:02:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/zeit/ms/pull/89"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "send@0.12.3",
          "ms@0.7.1"
        ],
        "upgradePath": [
          false,
          "express@4.15.3",
          "send@0.15.3",
          "ms@2.0.0"
        ],
        "version": "0.7.1",
        "name": "ms",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/send/node_modules/ms/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "disclosureTime": "2017-04-11T21:00:00Z",
        "id": "npm:ms:20170412",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "method": {
          "index.js": [
            {
              "name": [
                "parse"
              ],
              "semver": [
                "<2.0.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:46.135744Z",
        "moduleName": "ms",
        "packageManager": "npm",
        "packageName": "ms",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:2",
            "modificationTime": "2018-09-04T11:57:08.696913Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:1",
            "modificationTime": "2018-09-04T11:57:08.695549Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:0",
            "modificationTime": "2018-09-04T11:57:08.694191Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0"
          }
        ],
        "publicationTime": "2017-05-15T06:02:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/zeit/ms/pull/89"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "finalhandler@0.3.6",
          "debug@2.2.0",
          "ms@0.7.1"
        ],
        "upgradePath": [
          false,
          "express@4.15.0",
          "finalhandler@1.0.3",
          "debug@2.6.7",
          "ms@2.0.0"
        ],
        "version": "0.7.1",
        "name": "ms",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/debug/node_modules/ms/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "disclosureTime": "2017-04-11T21:00:00Z",
        "id": "npm:ms:20170412",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "method": {
          "index.js": [
            {
              "name": [
                "parse"
              ],
              "semver": [
                "<2.0.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:46.135744Z",
        "moduleName": "ms",
        "packageManager": "npm",
        "packageName": "ms",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:2",
            "modificationTime": "2018-09-04T11:57:08.696913Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:1",
            "modificationTime": "2018-09-04T11:57:08.695549Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:0",
            "modificationTime": "2018-09-04T11:57:08.694191Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0"
          }
        ],
        "publicationTime": "2017-05-15T06:02:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/zeit/ms/pull/89"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "send@0.12.3",
          "debug@2.2.0",
          "ms@0.7.1"
        ],
        "upgradePath": [
          false,
          "express@4.15.3",
          "send@0.15.3",
          "debug@2.6.7",
          "ms@2.0.0"
        ],
        "version": "0.7.1",
        "name": "ms",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/debug/node_modules/ms/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "disclosureTime": "2017-04-11T21:00:00Z",
        "id": "npm:ms:20170412",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "method": {
          "index.js": [
            {
              "name": [
                "parse"
              ],
              "semver": [
                "<2.0.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:46.135744Z",
        "moduleName": "ms",
        "packageManager": "npm",
        "packageName": "ms",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:2",
            "modificationTime": "2018-09-04T11:57:08.696913Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:1",
            "modificationTime": "2018-09-04T11:57:08.695549Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:0",
            "modificationTime": "2018-09-04T11:57:08.694191Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0"
          }
        ],
        "publicationTime": "2017-05-15T06:02:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/zeit/ms/pull/89"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "mongoose@4.2.4",
          "mquery@1.6.3",
          "debug@2.2.0",
          "ms@0.7.1"
        ],
        "upgradePath": [
          false,
          "mongoose@4.10.2",
          "mquery@2.3.1",
          "debug@2.6.8",
          "ms@2.0.0"
        ],
        "version": "0.7.1",
        "name": "ms",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/debug/node_modules/ms/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "disclosureTime": "2017-04-11T21:00:00Z",
        "id": "npm:ms:20170412",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "method": {
          "index.js": [
            {
              "name": [
                "parse"
              ],
              "semver": [
                "<2.0.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:46.135744Z",
        "moduleName": "ms",
        "packageManager": "npm",
        "packageName": "ms",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:2",
            "modificationTime": "2018-09-04T11:57:08.696913Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:1",
            "modificationTime": "2018-09-04T11:57:08.695549Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:0",
            "modificationTime": "2018-09-04T11:57:08.694191Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0"
          }
        ],
        "publicationTime": "2017-05-15T06:02:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/zeit/ms/pull/89"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "tap-mocha-reporter@0.0.27",
          "debug@2.2.0",
          "ms@0.7.1"
        ],
        "upgradePath": [
          false,
          "tap@5.8.0",
          "tap-mocha-reporter@0.0.27",
          "debug@2.6.7",
          "ms@2.0.0"
        ],
        "version": "0.7.1",
        "name": "ms",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/debug/node_modules/ms/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "disclosureTime": "2017-04-11T21:00:00Z",
        "id": "npm:ms:20170412",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "method": {
          "index.js": [
            {
              "name": [
                "parse"
              ],
              "semver": [
                "<2.0.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:46.135744Z",
        "moduleName": "ms",
        "packageManager": "npm",
        "packageName": "ms",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:2",
            "modificationTime": "2018-09-04T11:57:08.696913Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:1",
            "modificationTime": "2018-09-04T11:57:08.695549Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:0",
            "modificationTime": "2018-09-04T11:57:08.694191Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0"
          }
        ],
        "publicationTime": "2017-05-15T06:02:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/zeit/ms/pull/89"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "serve-static@1.9.3",
          "send@0.12.3",
          "ms@0.7.1"
        ],
        "upgradePath": [
          false,
          "express@4.15.3",
          "serve-static@1.12.3",
          "send@0.15.3",
          "ms@2.0.0"
        ],
        "version": "0.7.1",
        "name": "ms",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/send/node_modules/ms/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "disclosureTime": "2017-04-11T21:00:00Z",
        "id": "npm:ms:20170412",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "method": {
          "index.js": [
            {
              "name": [
                "parse"
              ],
              "semver": [
                "<2.0.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:46.135744Z",
        "moduleName": "ms",
        "packageManager": "npm",
        "packageName": "ms",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:2",
            "modificationTime": "2018-09-04T11:57:08.696913Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:1",
            "modificationTime": "2018-09-04T11:57:08.695549Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:0",
            "modificationTime": "2018-09-04T11:57:08.694191Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0"
          }
        ],
        "publicationTime": "2017-05-15T06:02:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/zeit/ms/pull/89"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "serve-static@1.9.3",
          "send@0.12.3",
          "debug@2.2.0",
          "ms@0.7.1"
        ],
        "upgradePath": [
          false,
          "express@4.15.3",
          "serve-static@1.12.3",
          "send@0.15.3",
          "debug@2.6.7",
          "ms@2.0.0"
        ],
        "version": "0.7.1",
        "name": "ms",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/debug/node_modules/ms/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "disclosureTime": "2017-04-11T21:00:00Z",
        "id": "npm:ms:20170412",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "method": {
          "index.js": [
            {
              "name": [
                "parse"
              ],
              "semver": [
                "<2.0.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:46.135744Z",
        "moduleName": "ms",
        "packageManager": "npm",
        "packageName": "ms",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:2",
            "modificationTime": "2018-09-04T11:57:08.696913Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:1",
            "modificationTime": "2018-09-04T11:57:08.695549Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:0",
            "modificationTime": "2018-09-04T11:57:08.694191Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0"
          }
        ],
        "publicationTime": "2017-05-15T06:02:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/zeit/ms/pull/89"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "humanize-ms@1.0.1",
          "ms@0.6.2"
        ],
        "upgradePath": [
          false,
          "humanize-ms@1.2.1",
          "ms@2.0.0"
        ],
        "version": "0.6.2",
        "name": "ms",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/humanize-ms/node_modules/ms/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "disclosureTime": "2017-04-11T21:00:00Z",
        "id": "npm:ms:20170412",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "method": {
          "index.js": [
            {
              "name": [
                "parse"
              ],
              "semver": [
                "<2.0.0"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:46.135744Z",
        "moduleName": "ms",
        "packageManager": "npm",
        "packageName": "ms",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:2",
            "modificationTime": "2018-09-04T11:57:08.696913Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:1",
            "modificationTime": "2018-09-04T11:57:08.695549Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3"
          },
          {
            "comments": [],
            "id": "patch:npm:ms:20170412:0",
            "modificationTime": "2018-09-04T11:57:08.694191Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0"
          }
        ],
        "publicationTime": "2017-05-15T06:02:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/zeit/ms/pull/89"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "ms@0.7.3"
        ],
        "upgradePath": [
          false,
          "ms@2.0.0"
        ],
        "version": "0.7.3",
        "name": "ms",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/ms/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-NEGOTIATOR-10104"
        ],
        "creationTime": "2016-06-16T18:00:02.240000Z",
        "credit": [
          "Adam Baldwin"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`negotiator`](https://npmjs.org/package/negotiator) is an HTTP content negotiator for Node.js. Versions prior to `0.6.1` are vulnerable to [Regular expression Denial of Service (ReDoS)](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS) attack when parsing \"Accept-Language\" http header.\n\nAn attacker can provide a long value in the Accept-Language header, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the thread and preventing it from processing other requests. By repeatedly sending multiple such requests, the attacker can make the server unavailable (a Denial of Service attack).\n\n## Details\nThe Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time. [1]\n\n## Remediation\nUpgrade `negotiator` to version `0.6.1` or greater.\n\n## References\n- https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n- https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c\n",
        "disclosureTime": "2016-06-16T17:36:06Z",
        "id": "npm:negotiator:20160616",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-NEGOTIATOR-10104"
          ],
          "CVE": [
            "CVE-2016-10539"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            106
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.474582Z",
        "moduleName": "negotiator",
        "packageManager": "npm",
        "packageName": "negotiator",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:negotiator:20160616:3",
            "modificationTime": "2018-09-04T11:57:08.657874Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/negotiator/20160616/negotiator_20160616_0_3_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
            ],
            "version": "0.1.0"
          },
          {
            "comments": [],
            "id": "patch:npm:negotiator:20160616:2",
            "modificationTime": "2018-09-04T11:57:08.656613Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/negotiator/20160616/negotiator_20160616_0_2_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
            ],
            "version": "<= 0.4.7 > 0.1.0"
          },
          {
            "comments": [],
            "id": "patch:npm:negotiator:20160616:1",
            "modificationTime": "2018-09-04T11:57:08.655339Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/negotiator/20160616/negotiator_20160616_0_1_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
            ],
            "version": "<= 0.5.3 > 0.4.7"
          },
          {
            "comments": [],
            "id": "patch:npm:negotiator:20160616:0",
            "modificationTime": "2018-09-04T11:57:08.654149Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/negotiator/20160616/negotiator_20160616_0_0_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
            ],
            "version": "0.6.0"
          }
        ],
        "publicationTime": "2016-06-16T17:36:06Z",
        "references": [
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c"
          },
          {
            "title": "WWW.OWASP.ORG",
            "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
          }
        ],
        "semver": {
          "vulnerable": [
            "<= 0.6.0"
          ]
        },
        "severity": "high",
        "title": "Regular Expression Denial of Service (DoS)",
        "from": [
          "goof@0.0.3",
          "errorhandler@1.2.0",
          "accepts@1.1.4",
          "negotiator@0.4.9"
        ],
        "upgradePath": [
          false,
          "errorhandler@1.4.3",
          "accepts@1.3.3",
          "negotiator@0.6.1"
        ],
        "version": "0.4.9",
        "name": "negotiator",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/negotiator/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-NEGOTIATOR-10104"
        ],
        "creationTime": "2016-06-16T18:00:02.240000Z",
        "credit": [
          "Adam Baldwin"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`negotiator`](https://npmjs.org/package/negotiator) is an HTTP content negotiator for Node.js. Versions prior to `0.6.1` are vulnerable to [Regular expression Denial of Service (ReDoS)](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS) attack when parsing \"Accept-Language\" http header.\n\nAn attacker can provide a long value in the Accept-Language header, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the thread and preventing it from processing other requests. By repeatedly sending multiple such requests, the attacker can make the server unavailable (a Denial of Service attack).\n\n## Details\nThe Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time. [1]\n\n## Remediation\nUpgrade `negotiator` to version `0.6.1` or greater.\n\n## References\n- https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n- https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c\n",
        "disclosureTime": "2016-06-16T17:36:06Z",
        "id": "npm:negotiator:20160616",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-NEGOTIATOR-10104"
          ],
          "CVE": [
            "CVE-2016-10539"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            106
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.474582Z",
        "moduleName": "negotiator",
        "packageManager": "npm",
        "packageName": "negotiator",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:negotiator:20160616:3",
            "modificationTime": "2018-09-04T11:57:08.657874Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/negotiator/20160616/negotiator_20160616_0_3_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
            ],
            "version": "0.1.0"
          },
          {
            "comments": [],
            "id": "patch:npm:negotiator:20160616:2",
            "modificationTime": "2018-09-04T11:57:08.656613Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/negotiator/20160616/negotiator_20160616_0_2_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
            ],
            "version": "<= 0.4.7 > 0.1.0"
          },
          {
            "comments": [],
            "id": "patch:npm:negotiator:20160616:1",
            "modificationTime": "2018-09-04T11:57:08.655339Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/negotiator/20160616/negotiator_20160616_0_1_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
            ],
            "version": "<= 0.5.3 > 0.4.7"
          },
          {
            "comments": [],
            "id": "patch:npm:negotiator:20160616:0",
            "modificationTime": "2018-09-04T11:57:08.654149Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/negotiator/20160616/negotiator_20160616_0_0_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
            ],
            "version": "0.6.0"
          }
        ],
        "publicationTime": "2016-06-16T17:36:06Z",
        "references": [
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c"
          },
          {
            "title": "WWW.OWASP.ORG",
            "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
          }
        ],
        "semver": {
          "vulnerable": [
            "<= 0.6.0"
          ]
        },
        "severity": "high",
        "title": "Regular Expression Denial of Service (DoS)",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "accepts@1.2.13",
          "negotiator@0.5.3"
        ],
        "upgradePath": [
          false,
          "express@4.14.0",
          "accepts@1.3.3",
          "negotiator@0.6.1"
        ],
        "version": "0.5.3",
        "name": "negotiator",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/express/node_modules/negotiator/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-NEGOTIATOR-10104"
        ],
        "creationTime": "2016-06-16T18:00:02.240000Z",
        "credit": [
          "Adam Baldwin"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[`negotiator`](https://npmjs.org/package/negotiator) is an HTTP content negotiator for Node.js. Versions prior to `0.6.1` are vulnerable to [Regular expression Denial of Service (ReDoS)](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS) attack when parsing \"Accept-Language\" http header.\n\nAn attacker can provide a long value in the Accept-Language header, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the thread and preventing it from processing other requests. By repeatedly sending multiple such requests, the attacker can make the server unavailable (a Denial of Service attack).\n\n## Details\nThe Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time. [1]\n\n## Remediation\nUpgrade `negotiator` to version `0.6.1` or greater.\n\n## References\n- https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n- https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c\n",
        "disclosureTime": "2016-06-16T17:36:06Z",
        "id": "npm:negotiator:20160616",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-NEGOTIATOR-10104"
          ],
          "CVE": [
            "CVE-2016-10539"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            106
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.474582Z",
        "moduleName": "negotiator",
        "packageManager": "npm",
        "packageName": "negotiator",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:negotiator:20160616:3",
            "modificationTime": "2018-09-04T11:57:08.657874Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/negotiator/20160616/negotiator_20160616_0_3_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
            ],
            "version": "0.1.0"
          },
          {
            "comments": [],
            "id": "patch:npm:negotiator:20160616:2",
            "modificationTime": "2018-09-04T11:57:08.656613Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/negotiator/20160616/negotiator_20160616_0_2_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
            ],
            "version": "<= 0.4.7 > 0.1.0"
          },
          {
            "comments": [],
            "id": "patch:npm:negotiator:20160616:1",
            "modificationTime": "2018-09-04T11:57:08.655339Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/negotiator/20160616/negotiator_20160616_0_1_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
            ],
            "version": "<= 0.5.3 > 0.4.7"
          },
          {
            "comments": [],
            "id": "patch:npm:negotiator:20160616:0",
            "modificationTime": "2018-09-04T11:57:08.654149Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/negotiator/20160616/negotiator_20160616_0_0_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
            ],
            "version": "0.6.0"
          }
        ],
        "publicationTime": "2016-06-16T17:36:06Z",
        "references": [
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c"
          },
          {
            "title": "WWW.OWASP.ORG",
            "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
          }
        ],
        "semver": {
          "vulnerable": [
            "<= 0.6.0"
          ]
        },
        "severity": "high",
        "title": "Regular Expression Denial of Service (DoS)",
        "from": [
          "goof@0.0.3",
          "st@0.2.4",
          "negotiator@0.2.8"
        ],
        "upgradePath": [
          false,
          "st@1.1.0",
          "negotiator@0.6.1"
        ],
        "version": "0.2.8",
        "name": "negotiator",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/st/node_modules/negotiator/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:N/A:N/E:F/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-NPMCONF-12143"
        ],
        "creationTime": "2018-02-27T09:54:39.824000Z",
        "credit": [
          "ChALkeR"
        ],
        "cvssScore": 7.4,
        "description": "## Overview\nAffected versions of [npmconf](https://www.npmjs.com/package/npmconf) are vulnerable to Uninitialized Memory Exposure. It allocates and writes to disk uninitialized memory content when a typed number is passed as input.\n\n## Details\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\n```js\nconst buf1 = new Buffer([1,2,3]);\n// creates a buffer containing [01, 02, 03]\nconst buf2 = new Buffer('test');\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\nconst buf3 = new Buffer(10);\n// creates a buffer of length 10\n```\n\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\n\n## Remediation\nUpgrade `npmconf` to version 2.1.3. \n**Note** `npmconf` is deprecated and should not be used.\n**Note** This is vulnerable only for Node <=4\n\n## References\n- [HAckerOne Report](https://hackerone.com/reports/320269)\n",
        "disclosureTime": "2018-05-12T09:54:39.824000Z",
        "id": "npm:npmconf:20180512",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-NPMCONF-12143"
          ],
          "CVE": [],
          "CWE": [
            "CWE-201"
          ],
          "NSP": [
            653
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:48.879579Z",
        "moduleName": "npmconf",
        "packageManager": "npm",
        "packageName": "npmconf",
        "patches": [],
        "publicationTime": "2018-05-13T14:26:27.195000Z",
        "references": [
          {
            "title": "HAckerOne Report",
            "url": "https://hackerone.com/reports/320269"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.1.3"
          ]
        },
        "severity": "high",
        "title": "Uninitialized Memory Exposure",
        "from": [
          "goof@0.0.3",
          "npmconf@0.0.24"
        ],
        "upgradePath": [
          false,
          "npmconf@2.1.3"
        ],
        "version": "0.0.24",
        "name": "npmconf",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/npmconf/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
        "alternativeIds": [
          "SNYK-JS-QS-10407"
        ],
        "creationTime": "2017-02-14T11:44:54.163000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 7.4,
        "description": "## Overview\r\n[`qs`](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\r\n\r\nBy default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\r\n\r\n## Remediation\r\nUpgrade `qs` to version `6.4.0` or higher.\r\n**Note:** The fix was backported to the following versions `6.3.2`, `6.2.3`, `6.1.2`, `6.0.4`.\r\n\r\n## References\r\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\r\n- [Report of an insufficient fix](https://github.com/ljharb/qs/issues/200)",
        "disclosureTime": "2017-02-13T00:00:00Z",
        "id": "npm:qs:20170213",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-QS-10407"
          ],
          "CVE": [],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "js",
        "method": {
          "lib/parse.js": [
            {
              "name": [
                "parseObject"
              ],
              "semver": [
                "<6.3.2 >=6.3.0",
                "<6.2.3 >=6.2.0",
                "<6.1.2 >=6.1.",
                "<6.0.4"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:45.733111Z",
        "moduleName": "qs",
        "packageManager": "npm",
        "packageName": "qs",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:7",
            "modificationTime": "2018-09-04T11:57:08.692963Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/603_604.patch"
            ],
            "version": "=6.0.3"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:6",
            "modificationTime": "2018-09-04T11:57:08.691571Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/602_604.patch"
            ],
            "version": "=6.0.2"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:5",
            "modificationTime": "2018-09-04T11:57:08.690235Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/611_612.patch"
            ],
            "version": "=6.1.1"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:4",
            "modificationTime": "2018-09-04T11:57:08.688957Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/610_612.patch"
            ],
            "version": "=6.1.0"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:3",
            "modificationTime": "2018-09-04T11:57:08.687714Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/622_623.patch"
            ],
            "version": "=6.2.2"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:2",
            "modificationTime": "2018-09-04T11:57:08.686294Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/621_623.patch"
            ],
            "version": "=6.2.1"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:1",
            "modificationTime": "2018-09-04T11:57:08.684986Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/631_632.patch"
            ],
            "version": "=6.3.1"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:0",
            "modificationTime": "2018-09-04T11:57:08.683816Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/630_632.patch"
            ],
            "version": "=6.3.0"
          }
        ],
        "publicationTime": "2017-03-01T10:00:54Z",
        "references": [
          {
            "title": "Report of an insufficient fix",
            "url": "https://github.com/ljharb/qs/issues/200"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d"
          }
        ],
        "semver": {
          "vulnerable": [
            "<6.3.2 >=6.3.0 || <6.2.3 >=6.2.0 || <6.1.2 >=6.1.0 || <6.0.4"
          ]
        },
        "severity": "high",
        "title": "Prototype Override Protection Bypass",
        "from": [
          "goof@0.0.3",
          "body-parser@1.9.0",
          "qs@2.2.4"
        ],
        "upgradePath": [
          false,
          "body-parser@1.17.1",
          "qs@6.4.0"
        ],
        "version": "2.2.4",
        "name": "qs",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/qs/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
        "alternativeIds": [
          "SNYK-JS-QS-10407"
        ],
        "creationTime": "2017-02-14T11:44:54.163000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 7.4,
        "description": "## Overview\r\n[`qs`](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\r\n\r\nBy default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\r\n\r\n## Remediation\r\nUpgrade `qs` to version `6.4.0` or higher.\r\n**Note:** The fix was backported to the following versions `6.3.2`, `6.2.3`, `6.1.2`, `6.0.4`.\r\n\r\n## References\r\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\r\n- [Report of an insufficient fix](https://github.com/ljharb/qs/issues/200)",
        "disclosureTime": "2017-02-13T00:00:00Z",
        "id": "npm:qs:20170213",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-QS-10407"
          ],
          "CVE": [],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "js",
        "method": {
          "lib/parse.js": [
            {
              "name": [
                "parseObject"
              ],
              "semver": [
                "<6.3.2 >=6.3.0",
                "<6.2.3 >=6.2.0",
                "<6.1.2 >=6.1.",
                "<6.0.4"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:45.733111Z",
        "moduleName": "qs",
        "packageManager": "npm",
        "packageName": "qs",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:7",
            "modificationTime": "2018-09-04T11:57:08.692963Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/603_604.patch"
            ],
            "version": "=6.0.3"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:6",
            "modificationTime": "2018-09-04T11:57:08.691571Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/602_604.patch"
            ],
            "version": "=6.0.2"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:5",
            "modificationTime": "2018-09-04T11:57:08.690235Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/611_612.patch"
            ],
            "version": "=6.1.1"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:4",
            "modificationTime": "2018-09-04T11:57:08.688957Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/610_612.patch"
            ],
            "version": "=6.1.0"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:3",
            "modificationTime": "2018-09-04T11:57:08.687714Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/622_623.patch"
            ],
            "version": "=6.2.2"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:2",
            "modificationTime": "2018-09-04T11:57:08.686294Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/621_623.patch"
            ],
            "version": "=6.2.1"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:1",
            "modificationTime": "2018-09-04T11:57:08.684986Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/631_632.patch"
            ],
            "version": "=6.3.1"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:0",
            "modificationTime": "2018-09-04T11:57:08.683816Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/630_632.patch"
            ],
            "version": "=6.3.0"
          }
        ],
        "publicationTime": "2017-03-01T10:00:54Z",
        "references": [
          {
            "title": "Report of an insufficient fix",
            "url": "https://github.com/ljharb/qs/issues/200"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d"
          }
        ],
        "semver": {
          "vulnerable": [
            "<6.3.2 >=6.3.0 || <6.2.3 >=6.2.0 || <6.1.2 >=6.1.0 || <6.0.4"
          ]
        },
        "severity": "high",
        "title": "Prototype Override Protection Bypass",
        "from": [
          "goof@0.0.3",
          "express@4.12.4",
          "qs@2.4.2"
        ],
        "upgradePath": [
          false,
          "express@4.15.2",
          "qs@6.4.0"
        ],
        "version": "2.4.2",
        "name": "qs",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/express/node_modules/qs/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
        "alternativeIds": [
          "SNYK-JS-QS-10407"
        ],
        "creationTime": "2017-02-14T11:44:54.163000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 7.4,
        "description": "## Overview\r\n[`qs`](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\r\n\r\nBy default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\r\n\r\n## Remediation\r\nUpgrade `qs` to version `6.4.0` or higher.\r\n**Note:** The fix was backported to the following versions `6.3.2`, `6.2.3`, `6.1.2`, `6.0.4`.\r\n\r\n## References\r\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\r\n- [Report of an insufficient fix](https://github.com/ljharb/qs/issues/200)",
        "disclosureTime": "2017-02-13T00:00:00Z",
        "id": "npm:qs:20170213",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-QS-10407"
          ],
          "CVE": [],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "js",
        "method": {
          "lib/parse.js": [
            {
              "name": [
                "parseObject"
              ],
              "semver": [
                "<6.3.2 >=6.3.0",
                "<6.2.3 >=6.2.0",
                "<6.1.2 >=6.1.",
                "<6.0.4"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:45.733111Z",
        "moduleName": "qs",
        "packageManager": "npm",
        "packageName": "qs",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:7",
            "modificationTime": "2018-09-04T11:57:08.692963Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/603_604.patch"
            ],
            "version": "=6.0.3"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:6",
            "modificationTime": "2018-09-04T11:57:08.691571Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/602_604.patch"
            ],
            "version": "=6.0.2"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:5",
            "modificationTime": "2018-09-04T11:57:08.690235Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/611_612.patch"
            ],
            "version": "=6.1.1"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:4",
            "modificationTime": "2018-09-04T11:57:08.688957Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/610_612.patch"
            ],
            "version": "=6.1.0"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:3",
            "modificationTime": "2018-09-04T11:57:08.687714Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/622_623.patch"
            ],
            "version": "=6.2.2"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:2",
            "modificationTime": "2018-09-04T11:57:08.686294Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/621_623.patch"
            ],
            "version": "=6.2.1"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:1",
            "modificationTime": "2018-09-04T11:57:08.684986Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/631_632.patch"
            ],
            "version": "=6.3.1"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:0",
            "modificationTime": "2018-09-04T11:57:08.683816Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/qs/20170213/630_632.patch"
            ],
            "version": "=6.3.0"
          }
        ],
        "publicationTime": "2017-03-01T10:00:54Z",
        "references": [
          {
            "title": "Report of an insufficient fix",
            "url": "https://github.com/ljharb/qs/issues/200"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d"
          }
        ],
        "semver": {
          "vulnerable": [
            "<6.3.2 >=6.3.0 || <6.2.3 >=6.2.0 || <6.1.2 >=6.1.0 || <6.0.4"
          ]
        },
        "severity": "high",
        "title": "Prototype Override Protection Bypass",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "codecov.io@0.1.6",
          "request@2.42.0",
          "qs@1.2.2"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "request@2.68.0",
          "qs@6.0.4"
        ],
        "version": "1.2.2",
        "name": "qs",
        "isUpgradable": false,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/request/node_modules/qs/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-REQUEST-10088"
        ],
        "creationTime": "2016-03-22T12:00:05.158000Z",
        "credit": [
          "Feross Aboukhadijeh"
        ],
        "cvssScore": 5.1,
        "description": "## Overview\n[`request`](https://www.npmjs.com/package/request) is a simplified http request client.\nA potential remote memory exposure vulnerability exists in `request`. If a `request` uses a multipart attachment and the _body type_ option is `number` with value X, then X bytes of uninitialized memory will be sent in the body of the request.\n\nNote that while the impact of this vulnerability is high (memory exposure), exploiting it is likely difficult, as the attacker needs to somehow control the body type of the request. One potential exploit scenario is when a request is composed based on JSON input, including the body type, allowing a malicious JSON to trigger the memory leak.\n\n## Details\nConstructing a `Buffer` class with integer `N` creates a `Buffer`\nof length `N` with non zero-ed out memory.\n**Example:**\n```js\nvar x = new Buffer(100); // uninitialized Buffer of length 100\n// vs\nvar x = new Buffer('100'); // initialized Buffer with value of '100'\n```\n\nInitializing a multipart body in such manner will cause uninitialized memory to be sent in the body of the request.\n\n#### Proof of concept\n```js\nvar http = require('http')\nvar request = require('request')\n\nhttp.createServer(function (req, res) {\n  var data = ''\n  req.setEncoding('utf8')\n  req.on('data', function (chunk) {\n    console.log('data')\n    data += chunk\n  })\n  req.on('end', function () {\n    // this will print uninitialized memory from the client\n    console.log('Client sent:\\n', data)\n  })\n  res.end()\n}).listen(8000)\n\nrequest({\n  method: 'POST',\n  uri: 'http://localhost:8000',\n  multipart: [{ body: 1000 }]\n},\nfunction (err, res, body) {\n  if (err) return console.error('upload failed:', err)\n  console.log('sent')\n})\n```\n\n## Remediation\nUpgrade `request` to version 2.68.0 or higher.\n\nIf a direct dependency update is not possible, use [`snyk wizard`](https://snyk.io/docs#wizard) to patch this vulnerability.\n\n## References\n- [GitHub PR](https://github.com/request/request/pull/2018)\n- [Blog: Node Buffer API fix](https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md#previous-materials)\n- [Blog: Information about Buffer](https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md)\n",
        "disclosureTime": "2016-01-19T04:57:05.158000Z",
        "id": "npm:request:20160119",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-REQUEST-10088"
          ],
          "CVE": [
            "CVE-2017-16026"
          ],
          "CWE": [
            "CWE-201"
          ],
          "NSP": [
            309
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.407324Z",
        "moduleName": "request",
        "packageManager": "npm",
        "packageName": "request",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:request:20160119:8",
            "modificationTime": "2018-09-04T11:57:08.636616Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/request/20160119/request_20160119_0_8_3d31d4526fa4d4e4f59b89cabe194fb671063cdb.patch"
            ],
            "version": "<2.9.3 >=2.2.6"
          },
          {
            "comments": [],
            "id": "patch:npm:request:20160119:7",
            "modificationTime": "2018-09-04T11:57:08.635016Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/request/20160119/request_20160119_0_7_3d31d4526fa4d4e4f59b89cabe194fb671063cdb.patch"
            ],
            "version": "<2.9.150 >=2.9.3"
          },
          {
            "comments": [],
            "id": "patch:npm:request:20160119:6",
            "modificationTime": "2018-09-04T11:57:08.633798Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/request/20160119/request_20160119_0_6_3d31d4526fa4d4e4f59b89cabe194fb671063cdb.patch"
            ],
            "version": "<2.16.0 >=2.9.150"
          },
          {
            "comments": [],
            "id": "patch:npm:request:20160119:5",
            "modificationTime": "2018-09-04T11:57:08.632440Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/request/20160119/request_20160119_0_5_3d31d4526fa4d4e4f59b89cabe194fb671063cdb.patch"
            ],
            "version": "<2.27.0 >=2.16.0"
          },
          {
            "comments": [],
            "id": "patch:npm:request:20160119:4",
            "modificationTime": "2018-09-04T11:57:08.631066Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/request/20160119/request_20160119_0_4_3d31d4526fa4d4e4f59b89cabe194fb671063cdb.patch"
            ],
            "version": "<2.47.0 >=2.27.0"
          },
          {
            "comments": [],
            "id": "patch:npm:request:20160119:3",
            "modificationTime": "2018-09-04T11:57:08.629650Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/request/20160119/request_20160119_0_3_3d31d4526fa4d4e4f59b89cabe194fb671063cdb.patch"
            ],
            "version": "=2.47.0"
          },
          {
            "comments": [],
            "id": "patch:npm:request:20160119:2",
            "modificationTime": "2018-09-04T11:57:08.628304Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/request/20160119/request_20160119_0_2_3d31d4526fa4d4e4f59b89cabe194fb671063cdb.patch"
            ],
            "version": "<=2.51.0 >2.47.0"
          },
          {
            "comments": [],
            "id": "patch:npm:request:20160119:1",
            "modificationTime": "2018-09-04T11:57:08.627022Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/request/20160119/request_20160119_0_1_3d31d4526fa4d4e4f59b89cabe194fb671063cdb.patch"
            ],
            "version": "<2.54.0 >2.51.0"
          },
          {
            "comments": [],
            "id": "patch:npm:request:20160119:0",
            "modificationTime": "2018-09-04T11:57:08.625681Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/request/20160119/request_20160119_0_0_3d31d4526fa4d4e4f59b89cabe194fb671063cdb.patch"
            ],
            "version": "<2.68.0 >=2.54.0"
          }
        ],
        "publicationTime": "2016-03-22T12:00:05.158000Z",
        "references": [
          {
            "title": "Blog: Information about Buffer",
            "url": "https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md"
          },
          {
            "title": "Blog: Node Buffer API fix",
            "url": "https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md#previous-materials"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/request/request/pull/2018"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.68.0 >2.2.5"
          ]
        },
        "severity": "medium",
        "title": "Remote Memory Exposure",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "codecov.io@0.1.6",
          "request@2.42.0"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "request@2.68.0"
        ],
        "version": "2.42.0",
        "name": "request",
        "isUpgradable": false,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/request/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-SEMVER-10038"
        ],
        "creationTime": "2015-04-03T16:00:00Z",
        "credit": [
          "Adam Baldwin"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[npm](https://github.com/npm/npm) is a package manager for javascript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS).\nThe semver module uses regular expressions when parsing a version string. For a carefully crafted input, the time it takes to process these regular expressions is not linear to the length of the input. Since the semver module did not enforce a limit on the version string length, an attacker could provide a long string that would take up a large amount of resources, potentially taking a server down. This issue therefore enables a potential Denial of Service attack. This is a slightly differnt variant of a typical Regular Expression Denial of Service ([ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)) vulnerability.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpdate to a version 4.3.2 or greater. From the issue description [2]: \"Package version can no longer be more than 256 characters long. This prevents a situation in which parsing the version number can use exponentially more time and memory to parse, leading to a potential denial of service.\"\n\n## References\n- [GitHub Release](https://github.com/npm/npm/releases/tag/v2.7.5)\n",
        "disclosureTime": "2015-04-03T16:00:00Z",
        "id": "npm:semver:20150403",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-SEMVER-10038"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            31
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:44.203203Z",
        "moduleName": "semver",
        "packageManager": "npm",
        "packageName": "semver",
        "patches": [
          {
            "comments": [
              "https://github.com/npm/node-semver/commit/c80180d8341a8ada0236815c29a2be59864afd70.patch"
            ],
            "id": "patch:npm:semver:20150403:0",
            "modificationTime": "2018-09-04T11:57:08.562428Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/semver/20150403/semver_20150403_0_0_c80180d8341a8ada0236815c29a2be59864afd70.patch"
            ],
            "version": "<4.3.2 >= 2.0.2"
          }
        ],
        "publicationTime": "2015-04-03T16:00:00Z",
        "references": [
          {
            "title": "GitHub Release",
            "url": "https://github.com/npm/npm/releases/tag/v2.7.5"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.3.2"
          ]
        },
        "severity": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@0.0.3",
          "npmconf@0.0.24",
          "semver@1.1.4"
        ],
        "upgradePath": [
          false,
          "npmconf@2.0.9",
          "semver@4.3.2"
        ],
        "version": "1.1.4",
        "name": "semver",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/semver/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-ST-10012"
        ],
        "creationTime": "2014-02-06T07:33:48Z",
        "credit": [
          "Charlie Somerville"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\nVersions prior to 0.2.5 did not properly prevent path traversal. Literal dots in a path were resolved out, but url encoded dots were not. Thus, a request like ``` /%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd ``` would leak sensitive files and data from the server.\r\n\r\nAs of version 0.2.5, any ```'/../'``` in the request path, urlencoded or not, will be replaced with ```'/'```. If your application depends on url traversal, then you are encouraged to please refactor so that you do not depend on having ```..``` in url paths, as this tends to expose data that you may be surprised to be exposing.\r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade to version 0.2.5 or greater.\r\n\r\n## References\r\n- https://github.com/isaacs/st#security-status\r\n- http://blog.npmjs.org/post/80277229932/newly-paranoid-maintainers",
        "disclosureTime": "2014-02-06T07:33:48Z",
        "id": "npm:st:20140206",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-ST-10012"
          ],
          "CVE": [
            "CVE-2014-3744"
          ],
          "CWE": [
            "CWE-22"
          ],
          "NSP": [
            36
          ]
        },
        "language": "js",
        "method": {
          "st.js": [
            {
              "name": [
                "Mount.prototype.getPath"
              ],
              "semver": [
                "<0.2.5"
              ]
            }
          ]
        },
        "modificationTime": "2018-09-03T13:22:44.094742Z",
        "moduleName": "st",
        "packageManager": "npm",
        "packageName": "st",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:st:20140206:0",
            "modificationTime": "2018-09-04T11:57:08.540020Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/st/20140206/st-20140206_0_0_6b54ce2d2fb912eadd31e2c25c65456d2c8666e1.patch"
            ],
            "version": "<0.2.5 >0.1.4"
          }
        ],
        "publicationTime": "2014-02-06T07:33:48Z",
        "references": [
          {
            "title": "BLOG.NPMJS.ORG",
            "url": "http://blog.npmjs.org/post/80277229932/newly-paranoid-maintainers"
          },
          {
            "title": "GITHUB.COM",
            "url": "https://github.com/isaacs/st#security-status"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.2.5"
          ]
        },
        "severity": "medium",
        "title": "Directory Traversal",
        "from": [
          "goof@0.0.3",
          "st@0.2.4"
        ],
        "upgradePath": [
          false,
          "st@0.2.5"
        ],
        "version": "0.2.4",
        "name": "st",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/st/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N/E:H/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-ST-10820"
        ],
        "creationTime": "2017-10-13T18:54:37Z",
        "credit": [
          "Xin Gao"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n[`st`](https://www.npmjs.com/package/st) is a module for serving static files.\n\nAffected versions of this package are vulnerable to Open Redirect. A malicious user could send a specially crafted request, which would automatically redirect the request to another domain, controlled by the attacker.\n\n**Note:**  `st` will only redirect if requests are served from the root(`/`) and not from a subdirectory\n\n## References\n- [GitHub Commit](https://github.com/isaacs/st/commit/579960c629f12a27428e2da84c54f517e37b0a16)\n",
        "disclosureTime": "2017-10-13T23:01:42Z",
        "id": "npm:st:20171013",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-ST-10820"
          ],
          "CVE": [
            "CVE-2017-16224"
          ],
          "CWE": [
            "CWE-601"
          ],
          "NSP": [
            547
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:47.354686Z",
        "moduleName": "st",
        "packageManager": "npm",
        "packageName": "st",
        "patches": [],
        "publicationTime": "2017-10-15T07:10:40.818000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/isaacs/st/commit/579960c629f12a27428e2da84c54f517e37b0a16"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.2.2"
          ]
        },
        "severity": "medium",
        "title": "Open Redirect",
        "from": [
          "goof@0.0.3",
          "st@0.2.4"
        ],
        "upgradePath": [
          false,
          "st@1.2.2"
        ],
        "version": "0.2.4",
        "name": "st",
        "isUpgradable": true,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/st/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:F/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-TUNNELAGENT-10672"
        ],
        "creationTime": "2017-07-05T07:23:57.738000Z",
        "credit": [
          "ChALkeR"
        ],
        "cvssScore": 5.1,
        "description": "## Overview\n[`tunnel-agent`](https://www.npmjs.com/package/tunnel-agent) is HTTP proxy tunneling agent. Affected versions of the package are vulnerable to Uninitialized Memory Exposure. \n\nA possible memory disclosure vulnerability exists when a value of type `number` is used to set the _proxy.auth_ option of a request `request` and results in a possible uninitialized memory exposures in the request body.\n\nThis is a result of unobstructed use of the `Buffer` constructor, whose [insecure default constructor increases the odds of memory leakage](https://snyk.io/blog/exploiting-buffer/).\n\n## Details\nConstructing a `Buffer` class with integer `N` creates a `Buffer` of length `N` with raw (not \"zero-ed\") memory.\n\nIn the following example, the first call would allocate 100 bytes of memory, while the second example will allocate the memory needed for the string \"100\":\n```js\n// uninitialized Buffer of length 100\nx = new Buffer(100);\n// initialized Buffer with value of '100'\nx = new Buffer('100');\n```\n\n`tunnel-agent`'s `request` construction uses the default `Buffer` constructor as-is, making it easy to append uninitialized memory to an existing list. If the value of the buffer list is exposed to users, it may expose raw server side memory, potentially holding secrets, private data and code. This is a similar vulnerability to the infamous [`Heartbleed`](http://heartbleed.com/) flaw in OpenSSL.\n\n#### Proof of concept by ChALkeR\n```js\nrequire('request')({\n  method: 'GET',\n  uri: 'http://www.example.com',\n  tunnel: true,\n  proxy:{\n      protocol: 'http:',\n      host:\"127.0.0.1\",\n      port:8080,\n      auth:80\n  }\n});\n```\n\nYou can read more about the insecure `Buffer` behavior [on our blog](https://snyk.io/blog/exploiting-buffer/).\n\nSimilar vulnerabilities were discovered in [request](https://snyk.io/vuln/npm:request:20160119), [mongoose](https://snyk.io/vuln/npm:mongoose:20160116), [ws](https://snyk.io/vuln/npm:ws:20160104) and [sequelize](https://snyk.io/vuln/npm:sequelize:20160115).\n\n## Remediation\nUpgrade `tunnel-agent` to version 0.6.0 or higher.\n**Note** This is vulnerable only for Node <=4\n\n## References\n- [PoC by ChALkeR](https://gist.github.com/ChALkeR/fd6b2c445834244e7d440a043f9d2ff4)\n- [Github Commit](https://github.com/request/tunnel-agent/commit/9ca95ec7219daface8a6fc2674000653de0922c0)\n",
        "disclosureTime": "2017-03-04T22:00:00Z",
        "id": "npm:tunnel-agent:20170305",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-TUNNELAGENT-10672"
          ],
          "CVE": [],
          "CWE": [
            "CWE-201"
          ],
          "NSP": [
            598
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:46.799399Z",
        "moduleName": "tunnel-agent",
        "packageManager": "npm",
        "packageName": "tunnel-agent",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:tunnel-agent:20170305:0",
            "modificationTime": "2018-09-04T11:57:08.699388Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/tunnel-agent/20170305/tunnel-agent_20170305_0_0_9ca95ec7219daface8a6fc2674000653de0922c0.patch"
            ],
            "version": "=0.4.3 || =0.5.0"
          }
        ],
        "publicationTime": "2017-07-05T14:05:50.139000Z",
        "references": [
          {
            "title": "Github Commit",
            "url": "https://github.com/request/tunnel-agent/commit/9ca95ec7219daface8a6fc2674000653de0922c0"
          },
          {
            "title": "PoC by ChALkeR",
            "url": "https://gist.github.com/ChALkeR/fd6b2c445834244e7d440a043f9d2ff4"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.6.0"
          ]
        },
        "severity": "medium",
        "title": "Uninitialized Memory Exposure",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "codecov.io@0.1.6",
          "request@2.42.0",
          "tunnel-agent@0.4.3"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "request@2.81.0",
          "tunnel-agent@0.6.0"
        ],
        "version": "0.4.3",
        "name": "tunnel-agent",
        "isUpgradable": false,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/tunnel-agent/package.json",
        "parentDepType": "prod"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:F/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-TUNNELAGENT-10672"
        ],
        "creationTime": "2017-07-05T07:23:57.738000Z",
        "credit": [
          "ChALkeR"
        ],
        "cvssScore": 5.1,
        "description": "## Overview\n[`tunnel-agent`](https://www.npmjs.com/package/tunnel-agent) is HTTP proxy tunneling agent. Affected versions of the package are vulnerable to Uninitialized Memory Exposure. \n\nA possible memory disclosure vulnerability exists when a value of type `number` is used to set the _proxy.auth_ option of a request `request` and results in a possible uninitialized memory exposures in the request body.\n\nThis is a result of unobstructed use of the `Buffer` constructor, whose [insecure default constructor increases the odds of memory leakage](https://snyk.io/blog/exploiting-buffer/).\n\n## Details\nConstructing a `Buffer` class with integer `N` creates a `Buffer` of length `N` with raw (not \"zero-ed\") memory.\n\nIn the following example, the first call would allocate 100 bytes of memory, while the second example will allocate the memory needed for the string \"100\":\n```js\n// uninitialized Buffer of length 100\nx = new Buffer(100);\n// initialized Buffer with value of '100'\nx = new Buffer('100');\n```\n\n`tunnel-agent`'s `request` construction uses the default `Buffer` constructor as-is, making it easy to append uninitialized memory to an existing list. If the value of the buffer list is exposed to users, it may expose raw server side memory, potentially holding secrets, private data and code. This is a similar vulnerability to the infamous [`Heartbleed`](http://heartbleed.com/) flaw in OpenSSL.\n\n#### Proof of concept by ChALkeR\n```js\nrequire('request')({\n  method: 'GET',\n  uri: 'http://www.example.com',\n  tunnel: true,\n  proxy:{\n      protocol: 'http:',\n      host:\"127.0.0.1\",\n      port:8080,\n      auth:80\n  }\n});\n```\n\nYou can read more about the insecure `Buffer` behavior [on our blog](https://snyk.io/blog/exploiting-buffer/).\n\nSimilar vulnerabilities were discovered in [request](https://snyk.io/vuln/npm:request:20160119), [mongoose](https://snyk.io/vuln/npm:mongoose:20160116), [ws](https://snyk.io/vuln/npm:ws:20160104) and [sequelize](https://snyk.io/vuln/npm:sequelize:20160115).\n\n## Remediation\nUpgrade `tunnel-agent` to version 0.6.0 or higher.\n**Note** This is vulnerable only for Node <=4\n\n## References\n- [PoC by ChALkeR](https://gist.github.com/ChALkeR/fd6b2c445834244e7d440a043f9d2ff4)\n- [Github Commit](https://github.com/request/tunnel-agent/commit/9ca95ec7219daface8a6fc2674000653de0922c0)\n",
        "disclosureTime": "2017-03-04T22:00:00Z",
        "id": "npm:tunnel-agent:20170305",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-TUNNELAGENT-10672"
          ],
          "CVE": [],
          "CWE": [
            "CWE-201"
          ],
          "NSP": [
            598
          ]
        },
        "language": "js",
        "modificationTime": "2018-09-03T13:22:46.799399Z",
        "moduleName": "tunnel-agent",
        "packageManager": "npm",
        "packageName": "tunnel-agent",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:tunnel-agent:20170305:0",
            "modificationTime": "2018-09-04T11:57:08.699388Z",
            "urls": [
              "https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/tunnel-agent/20170305/tunnel-agent_20170305_0_0_9ca95ec7219daface8a6fc2674000653de0922c0.patch"
            ],
            "version": "=0.4.3 || =0.5.0"
          }
        ],
        "publicationTime": "2017-07-05T14:05:50.139000Z",
        "references": [
          {
            "title": "Github Commit",
            "url": "https://github.com/request/tunnel-agent/commit/9ca95ec7219daface8a6fc2674000653de0922c0"
          },
          {
            "title": "PoC by ChALkeR",
            "url": "https://gist.github.com/ChALkeR/fd6b2c445834244e7d440a043f9d2ff4"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.6.0"
          ]
        },
        "severity": "medium",
        "title": "Uninitialized Memory Exposure",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "coveralls@2.13.3",
          "request@2.79.0",
          "tunnel-agent@0.4.3"
        ],
        "upgradePath": [
          false,
          "tap@11.1.3",
          "coveralls@3.0.0",
          "request@2.81.0",
          "tunnel-agent@0.6.0"
        ],
        "version": "0.4.3",
        "name": "tunnel-agent",
        "isUpgradable": true,
        "isPatchable": true,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/tunnel-agent/package.json",
        "parentDepType": "prod"
      },
      {
        "license": "GPL-2.0",
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "id": "snyk:lic:npm:goof:GPL-2.0",
        "type": "license",
        "packageManager": "npm",
        "language": "js",
        "packageName": "goof",
        "title": "GPL-2.0 license",
        "description": "GPL-2.0 license",
        "publicationTime": "2018-09-20T08:25:47.545Z",
        "creationTime": "2018-09-20T08:25:47.545Z",
        "patches": [],
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/GPL-2.0.txt",
        "severity": "high",
        "from": [
          "goof@0.0.3"
        ],
        "upgradePath": [],
        "version": "0.0.3",
        "name": "goof",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "license": "MPL-2.0",
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "id": "snyk:lic:npm:symbol:MPL-2.0",
        "type": "license",
        "packageManager": "npm",
        "language": "js",
        "packageName": "symbol",
        "title": "MPL-2.0 license",
        "description": "MPL-2.0 license",
        "publicationTime": "2018-09-20T08:25:52.047Z",
        "creationTime": "2018-09-20T08:25:52.047Z",
        "patches": [],
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/MPL-2.0.txt",
        "severity": "medium",
        "from": [
          "goof@0.0.3",
          "tap@5.8.0",
          "nyc@6.6.1",
          "yargs@4.7.1",
          "pkg-conf@1.1.3",
          "symbol@0.2.3"
        ],
        "upgradePath": [],
        "version": "0.2.3",
        "name": "symbol",
        "isUpgradable": false,
        "isPatchable": false,
        "__filename": "/Users/kevin/projects/snyk-fixtures/goof/node_modules/nyc/node_modules/yargs/node_modules/pkg-conf/node_modules/symbol/package.json",
        "bundled": [
          "goof@0.0.3",
          "nyc@6.6.1",
          "yargs@4.7.1"
        ],
        "parentDepType": "prod"
      }
    ],
    "dependencyCount": 438,
    "org": "kevinwright",
    "licensesPolicy": {
      "severities": {
        "MS-RL": "medium",
        "EPL-1.0": "medium",
        "GPL-2.0": "high",
        "GPL-3.0": "high",
        "MPL-1.1": "medium",
        "MPL-2.0": "medium",
        "AGPL-1.0": "high",
        "AGPL-3.0": "high",
        "CDDL-1.0": "medium",
        "LGPL-2.0": "medium",
        "LGPL-2.1": "medium",
        "LGPL-3.0": "medium",
        "Newsletr": "medium",
        "CPOL-1.02": "high",
        "LGPL-2.1+": "medium",
        "LGPL-3.0+": "medium",
        "SimPL-2.0": "high",
        "Artistic-1.0": "medium",
        "Artistic-2.0": "medium"
      }
    },
    "isPrivate": true,
    "packageManager": "npm",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.12.0\nignore: {}\npatch: {}\n",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": true,
      "disregardFilesystemIgnores": false
    },
    "summary": "85 vulnerable dependency paths",
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 38,
    "path": "./goof"
  }
]
